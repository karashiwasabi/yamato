----- C:\Dev\YAMATO\aggregate\aggregate.go -----


----- C:\Dev\YAMATO\dat\dat.go -----
// dat/dat.go package dat  import ( 	"YAMATO/jcshms" 	"YAMATO/ma0" 	"YAMATO/model" 	"bufio" 	"fmt" 	"io" 	"log" 	"strings"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // getOrganizedFlag は指定された JAN コードについて、JCShms マスターに存在するかをチェックし、 // 存在すれば 1 (organized)、存在しなければ 0 (disorganized) を返します。 func getOrganizedFlag(jan string) (int, error) { 	records, err := jcshms.QueryByJan(ma0.DB, jan) 	if err != nil { 		return 0, fmt.Errorf("jcshms.QueryByJan error: %w", err) 	} 	if len(records) > 0 { 		return 1, nil 	} 	return 0, nil }  // ProcessDATRecord は、DATファイルから抽出されたフィールド情報のスライスを用い、 // MA0 連携処理を実行します。data の 5 番目（インデックス4）が JAN コードである前提です。 // ※この呼び出しは MA0 連携の副作用として利用される（ログ出力など）。 func ProcessDATRecord(data []string) (bool, error) { 	if len(data) < 5 { 		return false, nil 	} 	jan := data[4] 	// MA0 連携処理を行い、新規作成の場合は created==true となりますが、 	// 整理状態は後述の JCShms チェックで判定するため、ここでは副作用のみ利用します。 	_, created, err := ma0.CheckOrCreateMA0(jan) 	if err != nil { 		return false, err 	} 	if created { 		log.Printf("[DAT] New MA0 record created for JAN: %q", jan) 	} 	return created, nil }  // ParseDATFile は、io.Reader から DAT ファイルを読み込み、 // 固定長文字列フォーマットに従って各行を解析して model.DATRecord のスライスを返します。 // さらに、各レコードにつき MA0 連携のための処理を実施し、 // JCShms マスターによる整理状態（organizedFlag）を取得して datrecords テーブルへ INSERT します。 func ParseDATFile(r io.Reader) (records []model.DATRecord, totalCount, ma0CreatedCount, duplicateCount int, err error) { 	scanner := bufio.NewScanner(r) 	var currentOroshiCode string  	// getField は、固定長文字列から指定位置の部分文字列を返します。 	getField := func(s string, start, end int) string { 		if len(s) >= end { 			return s[start:end] 		} else if len(s) > start { 			return s[start:] 		} 		return "" 	}  	for scanner.Scan() { 		line := scanner.Text() 		// 行長が短い場合はスキップ 		if len(line) < 3 { 			continue 		}  		// "S20" 行の場合、卸コード（位置3〜12）を取得して currentOroshiCode に保存 		if strings.HasPrefix(line, "S20") { 			currentOroshiCode = strings.TrimSpace(line[3:12]) 			continue 		}  		// "D20" 行のみを対象とする 		if !strings.HasPrefix(line, "D20") { 			continue 		} 		totalCount++  		// 固定長フォーマットに従い各フィールドを抜き出し 		datDate := getField(line, 4, 12) 		datFlag := getField(line, 3, 4) 		datRecNo := getField(line, 12, 22) 		datLineNo := getField(line, 22, 24) 		datJan := getField(line, 25, 38) 		rawName := getField(line, 38, 78) 		// Shift‑JIS から UTF‑8 へ変換（エラー時は rawName をそのまま利用） 		name, _, convErr := transform.String(japanese.ShiftJIS.NewDecoder(), rawName) 		if convErr != nil { 			name = rawName 		} 		datQty := getField(line, 78, 83) 		datUnit := getField(line, 83, 92) 		datSub := getField(line, 92, 101) 		datPkg := getField(line, 101, 109) 		datExp := getField(line, 109, 115) 		datLot := getField(line, 115, 121)  		// model.DATRecord を生成 		rec := model.DATRecord{ 			CurrentOroshiCode: currentOroshiCode, 			DatDate:           datDate, 			DatFlag:           datFlag, 			DatRecNo:          datRecNo, 			DatJan:            datJan, 			DatLineNo:         datLineNo, 			DatProductName:    name, 			DatQty:            datQty, 			DatUnit:           datUnit, 			DatSub:            datSub, 			DatPkg:            datPkg, 			DatExp:            datExp, 			DatLot:            datLot, 		} 		records = append(records, rec)  		// MA0 連携用データスライスを作成（フィールドの順序は既存の実装と同様） 		dataSlice := []string{ 			currentOroshiCode, 			datDate, 			datFlag, 			datRecNo, 			datJan, 			datLineNo, 			name, 			datQty, 			datUnit, 			datSub, 			datPkg, 			datExp, 			datLot, 		}  		// MA0 連携の副作用として実行（結果はここでは利用せず） 		_, procErr := ProcessDATRecord(dataSlice) 		if procErr != nil { 			return records, totalCount, ma0CreatedCount, duplicateCount, procErr 		}  		// JCShms マスターを用いて整理状態フラグを取得（USAGE と同様の判定基準） 		flag, err := getOrganizedFlag(datJan) 		if err != nil { 			log.Printf("[DAT] Organized flag 確認エラー (JAN=%q): %v", datJan, err) 			flag = 0 		} 		organizedFlag := flag  		// ※ 統計用途としてカウントするなら、以下のようにカウントを更新（※名称は任意） 		if organizedFlag == 1 { 			ma0CreatedCount++ 		} else { 			duplicateCount++ 		}  		// DB 登録：InsertDATRecord は model.DATRecord と整理状態フラグを引数に取り、 		// datrecords テーブルへ INSERT を行います。 		if err := ma0.InsertDATRecord(ma0.DB, rec, organizedFlag); err != nil { 			log.Printf("Error inserting DATRecord: %v", err) 		} 	} 	if scanErr := scanner.Err(); scanErr != nil { 		err = scanErr 	} 	return records, totalCount, ma0CreatedCount, duplicateCount, err }

----- C:\Dev\YAMATO\jancode\jancode.go -----
// File: jancode/jancode.go package jancode  import ( 	"database/sql" 	"fmt" )  type JANCODERecord struct { 	JA000                      string 	JA001JanCode               string 	JA002                      string 	JA003                      string 	JA004                      string 	JA005                      string 	JA006HousouSuuryouSuuchi   string 	JA007HousouSuuryouTaniCode string 	JA008HousouSouryouSuuchi   string 	JA009                      string 	JA010                      string 	JA011                      string 	JA012                      string 	JA013                      string 	JA014                      string 	JA015                      string 	JA016                      string 	JA017                      string 	JA018                      string 	JA019                      string 	JA020                      string 	JA021                      string 	JA022                      string 	JA023                      string 	JA024                      string 	JA025                      string 	JA026                      string 	JA027                      string 	JA028                      string 	JA029                      string }  // QueryByJan は JAN コードを受け取り、該当レコードを返します func QueryJANCODERecordsByJan(db *sql.DB, jan string) ([]JANCODERecord, error) { 	const sqlQuery = `     SELECT   JA000, JA001JanCode, JA002, JA003, JA004, JA005, JA006HousouSuuryouSuuchi, JA007HousouSuuryouTaniCode, JA008HousouSouryouSuuchi, JA009, JA010, JA011, JA012, JA013, JA014, JA015, JA016, JA017, JA018, JA019, JA020, JA021, JA022, JA023, JA024, JA025, JA026, JA027, JA028, JA029         FROM jancode         WHERE JA001JanCode = ?  ` 	rows, err := db.Query(sqlQuery, jan) 	if err != nil { 		return nil, fmt.Errorf("jancode query error: %w", err) 	} 	defer rows.Close()  	var results []JANCODERecord 	for rows.Next() { 		var rec JANCODERecord 		if err := rows.Scan( 			&rec.JA000, 			&rec.JA001JanCode, 			&rec.JA002, 			&rec.JA003, 			&rec.JA004, 			&rec.JA005, 			&rec.JA006HousouSuuryouSuuchi, 			&rec.JA007HousouSuuryouTaniCode, 			&rec.JA008HousouSouryouSuuchi, 			&rec.JA009, 			&rec.JA010, 			&rec.JA011, 			&rec.JA012, 			&rec.JA013, 			&rec.JA014, 			&rec.JA015, 			&rec.JA016, 			&rec.JA017, 			&rec.JA018, 			&rec.JA019, 			&rec.JA020, 			&rec.JA021, 			&rec.JA022, 			&rec.JA023, 			&rec.JA024, 			&rec.JA025, 			&rec.JA026, 			&rec.JA027, 			&rec.JA028, 			&rec.JA029, 		); err != nil { 			return nil, fmt.Errorf("jancode scan error: %w", err) 		} 		results = append(results, rec) 	} 	if err := rows.Err(); err != nil { 		return nil, fmt.Errorf("jancode rows error: %w", err) 	} 	return results, nil }  // QueryByJan は QueryJANCODERecordsByJan の alias func QueryByJan(db *sql.DB, jan string) ([]JANCODERecord, error) { 	return QueryJANCODERecordsByJan(db, jan) }

----- C:\Dev\YAMATO\jcshms\jcshms.go -----
package jcshms  import ( 	"database/sql" 	"fmt" )  // JCFields は jcshms テーブルの125フィールドを表す構造体です type JCFields struct { 	JC000JanCode                           string 	JC001JanCodeShikibetsuKubun            string 	JC002KyuuJanCode                       string 	JC003TouitsuShouhinCode                string 	JC004YakkaKijunShuusaiIyakuhinCode     string 	JC005KyuuYakkaKijunShuusaiIyakuhinCode string 	JC006HOTBangou                         string 	JC007ReseputoCode1                     string 	JC008ReseputoCode2                     string 	JC009YJCode                            string 	JC010YakkouBunruiCode                  string 	JC011YakkouBunruiMei                   string 	JC012ShiyouKubunCode                   string 	JC013ShiyouKubunMeishou                string 	JC014NihonHyoujunShouhinBunruiBangou   string 	JC015ZaikeiCode                        string 	JC016ZaikeiKigou                       string 	JC017ZaikeiMeishou                     string 	JC018ShouhinMei                        string 	JC019HankakuShouhinMei                 string 	JC020KikakuYouryou                     string 	JC021HankakuKikakuYouryou              string 	JC022ShouhinMeiKanaSortYou             string 	JC023ShouhinMeiKanpouYouKigou          string 	JC024IppanMeishou                      string 	JC025YakkaShuusaiMeishou               string 	JC026ReseYouIyakuhinMei                string 	JC027KikakuTaniMeishou                 string 	JC028KikakuTaniKigou                   string 	JC029HanbaiMotoCode                    string 	JC030HanbaiMotoMei                     string 	JC031HanbaiMotoMeiKana                 string 	JC032HanbaiMotoMeiRyakuMei             string 	JC033SeizouMotoYunyuuMotoCode          string 	JC034SeizouMotoYunyuuMotoMei           string 	JC035SeizouMotoYunyuuMotoMeiKana       string 	JC036SeizouMotoYunyuuMotoMeiRyakuMei   string 	JC037HousouKeitai                      string 	JC038HousouTaniSuuchi                  string 	JC039HousouTaniTani                    string 	JC040HousouSuuryouSuuchi               string 	JC041HousouSuuryouTani                 string 	JC042HousouIrisuuSuuchi                string 	JC043HousouIrisuuTani                  string 	JC044HousouSouryouSuuchi               string 	JC045HousouSouryouTani                 string 	JC046HousouYouryouSuuchi               string 	JC047HousouYouryouTani                 string 	JC048HousouYakkaKeisuu                 string 	JC049GenTaniYakka                      string 	JC050GenHousouYakka                    string 	JC051KyuuTaniYakka                     string 	JC052KyuuHousouYakka                   string 	JC053KokuchiTaniYakka                  string 	JC054KokuchiHousouYakka                string 	JC055YakkaKaiteiNengappi               string 	JC056YakkaShuusaiNengappi              string 	JC057HanbaiKaishiNengappi              string 	JC058KeikaSochiNengappi                string 	JC059HatsubaiChuushiNengappi           string 	JC060SeizouChuushiNengappi             string 	JC061Doyaku                            string 	JC062Gekiyaku                          string 	JC063Mayaku                            string 	JC064Kouseishinyaku                    string 	JC065Kakuseizai                        string 	JC066KakuseizaiGenryou                 string 	JC067ShuukanseiIyakuhin                string 	JC068ShiteiIyakuhinKyuuKiseiKubun      string 	JC069YoushijiIyakuhinKyuuKiseiKubun    string 	JC070KetsuekiSeizai                    string 	JC071NihonYakkyokuhou                  string 	JC072YuukouKikan                       string 	JC073ShiyouKigen                       string 	JC074SeibutsuYuraiSeihin               string 	JC075Kouhatsuhin                       string 	JC076YakkaKijunShuusaiKubun            string 	JC077KichouGimuKubun                   string 	JC078ShouhinKubun                      string 	JC079ShohousenIyakuhin                 string 	JC080ChuushiRiyuuKubun                 string 	JC081MishiyouKyuuRyuutsuuKanrihin      string 	JC082MentenanceKubun                   string 	JC083KouhatsuhinNoAruSenpatsuhinKubun  string 	JC084AuthorizedGeneric                 string 	JC085Biosimilar                        string 	JC086HighRiskYaku                      string 	JC087Kuuran1                           string 	JC088Kuuran2                           string 	JC089Shitsuon                          string 	JC090Reisho                            string 	JC091Reizou                            string 	JC092Reitou                            string 	JC093Ansho                             string 	JC094Shakou                            string 	JC095KimitsuYouki                      string 	JC096MippuuYouki                       string 	JC097Kikenbutsu                        string 	JC098OndoJougen                        string 	JC099OndoKagen                         string 	JC100SonotaHokanjouNoChui              string 	JC101KonpouJuuryouSizeJouhou           string 	JC102KonpouTateSizeJouhou              string 	JC103KonpouYokoSizeJouhou              string 	JC104KonpouTakasaSizeJouhou            string 	JC105KonpouTaiseiSizeJouhou            string 	JC106ChuubakoJuuryouSizeJouhou         string 	JC107ChuubakoTateSizeJouhou            string 	JC108ChuubakoYokoSizeJouhou            string 	JC109ChuubakoTakasaSizeJouhou          string 	JC110ChuubakoTaiseiSizeJouhou          string 	JC111KousouJuuryouSizeJouhou           string 	JC112KousouTateSizeJouhou              string 	JC113KousouYokoSizeJouhou              string 	JC114KousouTakasaSizeJouhou            string 	JC115KousouTaiseiSizeJouhou            string 	JC116KonpouTaniSizeJouhou              string 	JC117HacchuuTaniSizeJouhou             string 	JC118KoushinKubun                      string 	JC119TourokuNengappi                   string 	JC120KoushinNengappi                   string 	JC121ChouzaiHousouTaniCode             string 	JC122HanbaiHousouTaniCode              string 	JC123IppanMeiKana                      string 	JC124SaishouYakkaKansanKeisuu          string }  // JCSHMSRecord は QueryJCSHMSRecordsByJan の返却型 type JCSHMSRecord struct { 	JC000JanCode string 	JC           JCFields }  // QueryJCSHMSRecordsByJan は JAN コードを受けて jcshms テーブルを検索し、 // JCSHMSRecord スライスを返します // QueryJCSHMSRecordsByJan は JAN コードを受け、該当する JCSHMSRecord を返します func QueryJCSHMSRecordsByJan(db *sql.DB, jan string) ([]JCSHMSRecord, error) { 	const query = `       SELECT       JC000JanCode, JC001JanCodeShikibetsuKubun, JC002KyuuJanCode, JC003TouitsuShouhinCode, JC004YakkaKijunShuusaiIyakuhinCode, JC005KyuuYakkaKijunShuusaiIyakuhinCode, JC006HOTBangou, JC007ReseputoCode1, JC008ReseputoCode2, JC009YJCode, JC010YakkouBunruiCode, JC011YakkouBunruiMei, JC012ShiyouKubunCode, JC013ShiyouKubunMeishou, JC014NihonHyoujunShouhinBunruiBangou, JC015ZaikeiCode, JC016ZaikeiKigou, JC017ZaikeiMeishou, JC018ShouhinMei, JC019HankakuShouhinMei, JC020KikakuYouryou, JC021HankakuKikakuYouryou, JC022ShouhinMeiKanaSortYou, JC023ShouhinMeiKanpouYouKigou, JC024IppanMeishou, JC025YakkaShuusaiMeishou, JC026ReseYouIyakuhinMei, JC027KikakuTaniMeishou, JC028KikakuTaniKigou, JC029HanbaiMotoCode, JC030HanbaiMotoMei, JC031HanbaiMotoMeiKana, JC032HanbaiMotoMeiRyakuMei, JC033SeizouMotoYunyuuMotoCode, JC034SeizouMotoYunyuuMotoMei, JC035SeizouMotoYunyuuMotoMeiKana, JC036SeizouMotoYunyuuMotoMeiRyakuMei, JC037HousouKeitai, JC038HousouTaniSuuchi, JC039HousouTaniTani, JC040HousouSuuryouSuuchi, JC041HousouSuuryouTani, JC042HousouIrisuuSuuchi, JC043HousouIrisuuTani, JC044HousouSouryouSuuchi, JC045HousouSouryouTani, JC046HousouYouryouSuuchi, JC047HousouYouryouTani, JC048HousouYakkaKeisuu, JC049GenTaniYakka, JC050GenHousouYakka, JC051KyuuTaniYakka, JC052KyuuHousouYakka, JC053KokuchiTaniYakka, JC054KokuchiHousouYakka, JC055YakkaKaiteiNengappi, JC056YakkaShuusaiNengappi, JC057HanbaiKaishiNengappi, JC058KeikaSochiNengappi, JC059HatsubaiChuushiNengappi, JC060SeizouChuushiNengappi, JC061Doyaku, JC062Gekiyaku, JC063Mayaku, JC064Kouseishinyaku, JC065Kakuseizai, JC066KakuseizaiGenryou, JC067ShuukanseiIyakuhin, JC068ShiteiIyakuhinKyuuKiseiKubun, JC069YoushijiIyakuhinKyuuKiseiKubun, JC070KetsuekiSeizai, JC071NihonYakkyokuhou, JC072YuukouKikan, JC073ShiyouKigen, JC074SeibutsuYuraiSeihin, JC075Kouhatsuhin, JC076YakkaKijunShuusaiKubun, JC077KichouGimuKubun, JC078ShouhinKubun, JC079ShohousenIyakuhin, JC080ChuushiRiyuuKubun, JC081MishiyouKyuuRyuutsuuKanrihin, JC082MentenanceKubun, JC083KouhatsuhinNoAruSenpatsuhinKubun, JC084AuthorizedGeneric, JC085Biosimilar, JC086HighRiskYaku, JC087Kuuran1, JC088Kuuran2, JC089Shitsuon, JC090Reisho, JC091Reizou, JC092Reitou, JC093Ansho, JC094Shakou, JC095KimitsuYouki, JC096MippuuYouki, JC097Kikenbutsu, JC098OndoJougen, JC099OndoKagen, JC100SonotaHokanjouNoChui, JC101KonpouJuuryouSizeJouhou, JC102KonpouTateSizeJouhou, JC103KonpouYokoSizeJouhou, JC104KonpouTakasaSizeJouhou, JC105KonpouTaiseiSizeJouhou, JC106ChuubakoJuuryouSizeJouhou, JC107ChuubakoTateSizeJouhou, JC108ChuubakoYokoSizeJouhou, JC109ChuubakoTakasaSizeJouhou, JC110ChuubakoTaiseiSizeJouhou, JC111KousouJuuryouSizeJouhou, JC112KousouTateSizeJouhou, JC113KousouYokoSizeJouhou, JC114KousouTakasaSizeJouhou, JC115KousouTaiseiSizeJouhou, JC116KonpouTaniSizeJouhou, JC117HacchuuTaniSizeJouhou, JC118KoushinKubun, JC119TourokuNengappi, JC120KoushinNengappi, JC121ChouzaiHousouTaniCode, JC122HanbaiHousouTaniCode, JC123IppanMeiKana, JC124SaishouYakkaKansanKeisuu     FROM jcshms     WHERE JC000JanCode = ?   `  	rows, err := db.Query(query, jan) 	if err != nil { 		return nil, fmt.Errorf("jcshms query error: %w", err) 	} 	defer rows.Close()  	var out []JCSHMSRecord 	for rows.Next() { 		var rec JCSHMSRecord 		// Scan の順序は上記 SELECT とまったく同じ順番で書くこと 		if err := rows.Scan( 			&rec.JC.JC000JanCode, 			&rec.JC.JC001JanCodeShikibetsuKubun, 			&rec.JC.JC002KyuuJanCode, 			&rec.JC.JC003TouitsuShouhinCode, 			&rec.JC.JC004YakkaKijunShuusaiIyakuhinCode, 			&rec.JC.JC005KyuuYakkaKijunShuusaiIyakuhinCode, 			&rec.JC.JC006HOTBangou, 			&rec.JC.JC007ReseputoCode1, 			&rec.JC.JC008ReseputoCode2, 			&rec.JC.JC009YJCode, 			&rec.JC.JC010YakkouBunruiCode, 			&rec.JC.JC011YakkouBunruiMei, 			&rec.JC.JC012ShiyouKubunCode, 			&rec.JC.JC013ShiyouKubunMeishou, 			&rec.JC.JC014NihonHyoujunShouhinBunruiBangou, 			&rec.JC.JC015ZaikeiCode, 			&rec.JC.JC016ZaikeiKigou, 			&rec.JC.JC017ZaikeiMeishou, 			&rec.JC.JC018ShouhinMei, 			&rec.JC.JC019HankakuShouhinMei, 			&rec.JC.JC020KikakuYouryou, 			&rec.JC.JC021HankakuKikakuYouryou, 			&rec.JC.JC022ShouhinMeiKanaSortYou, 			&rec.JC.JC023ShouhinMeiKanpouYouKigou, 			&rec.JC.JC024IppanMeishou, 			&rec.JC.JC025YakkaShuusaiMeishou, 			&rec.JC.JC026ReseYouIyakuhinMei, 			&rec.JC.JC027KikakuTaniMeishou, 			&rec.JC.JC028KikakuTaniKigou, 			&rec.JC.JC029HanbaiMotoCode, 			&rec.JC.JC030HanbaiMotoMei, 			&rec.JC.JC031HanbaiMotoMeiKana, 			&rec.JC.JC032HanbaiMotoMeiRyakuMei, 			&rec.JC.JC033SeizouMotoYunyuuMotoCode, 			&rec.JC.JC034SeizouMotoYunyuuMotoMei, 			&rec.JC.JC035SeizouMotoYunyuuMotoMeiKana, 			&rec.JC.JC036SeizouMotoYunyuuMotoMeiRyakuMei, 			&rec.JC.JC037HousouKeitai, 			&rec.JC.JC038HousouTaniSuuchi, 			&rec.JC.JC039HousouTaniTani, 			&rec.JC.JC040HousouSuuryouSuuchi, 			&rec.JC.JC041HousouSuuryouTani, 			&rec.JC.JC042HousouIrisuuSuuchi, 			&rec.JC.JC043HousouIrisuuTani, 			&rec.JC.JC044HousouSouryouSuuchi, 			&rec.JC.JC045HousouSouryouTani, 			&rec.JC.JC046HousouYouryouSuuchi, 			&rec.JC.JC047HousouYouryouTani, 			&rec.JC.JC048HousouYakkaKeisuu, 			&rec.JC.JC049GenTaniYakka, 			&rec.JC.JC050GenHousouYakka, 			&rec.JC.JC051KyuuTaniYakka, 			&rec.JC.JC052KyuuHousouYakka, 			&rec.JC.JC053KokuchiTaniYakka, 			&rec.JC.JC054KokuchiHousouYakka, 			&rec.JC.JC055YakkaKaiteiNengappi, 			&rec.JC.JC056YakkaShuusaiNengappi, 			&rec.JC.JC057HanbaiKaishiNengappi, 			&rec.JC.JC058KeikaSochiNengappi, 			&rec.JC.JC059HatsubaiChuushiNengappi, 			&rec.JC.JC060SeizouChuushiNengappi, 			&rec.JC.JC061Doyaku, 			&rec.JC.JC062Gekiyaku, 			&rec.JC.JC063Mayaku, 			&rec.JC.JC064Kouseishinyaku, 			&rec.JC.JC065Kakuseizai, 			&rec.JC.JC066KakuseizaiGenryou, 			&rec.JC.JC067ShuukanseiIyakuhin, 			&rec.JC.JC068ShiteiIyakuhinKyuuKiseiKubun, 			&rec.JC.JC069YoushijiIyakuhinKyuuKiseiKubun, 			&rec.JC.JC070KetsuekiSeizai, 			&rec.JC.JC071NihonYakkyokuhou, 			&rec.JC.JC072YuukouKikan, 			&rec.JC.JC073ShiyouKigen, 			&rec.JC.JC074SeibutsuYuraiSeihin, 			&rec.JC.JC075Kouhatsuhin, 			&rec.JC.JC076YakkaKijunShuusaiKubun, 			&rec.JC.JC077KichouGimuKubun, 			&rec.JC.JC078ShouhinKubun, 			&rec.JC.JC079ShohousenIyakuhin, 			&rec.JC.JC080ChuushiRiyuuKubun, 			&rec.JC.JC081MishiyouKyuuRyuutsuuKanrihin, 			&rec.JC.JC082MentenanceKubun, 			&rec.JC.JC083KouhatsuhinNoAruSenpatsuhinKubun, 			&rec.JC.JC084AuthorizedGeneric, 			&rec.JC.JC085Biosimilar, 			&rec.JC.JC086HighRiskYaku, 			&rec.JC.JC087Kuuran1, 			&rec.JC.JC088Kuuran2, 			&rec.JC.JC089Shitsuon, 			&rec.JC.JC090Reisho, 			&rec.JC.JC091Reizou, 			&rec.JC.JC092Reitou, 			&rec.JC.JC093Ansho, 			&rec.JC.JC094Shakou, 			&rec.JC.JC095KimitsuYouki, 			&rec.JC.JC096MippuuYouki, 			&rec.JC.JC097Kikenbutsu, 			&rec.JC.JC098OndoJougen, 			&rec.JC.JC099OndoKagen, 			&rec.JC.JC100SonotaHokanjouNoChui, 			&rec.JC.JC101KonpouJuuryouSizeJouhou, 			&rec.JC.JC102KonpouTateSizeJouhou, 			&rec.JC.JC103KonpouYokoSizeJouhou, 			&rec.JC.JC104KonpouTakasaSizeJouhou, 			&rec.JC.JC105KonpouTaiseiSizeJouhou, 			&rec.JC.JC106ChuubakoJuuryouSizeJouhou, 			&rec.JC.JC107ChuubakoTateSizeJouhou, 			&rec.JC.JC108ChuubakoYokoSizeJouhou, 			&rec.JC.JC109ChuubakoTakasaSizeJouhou, 			&rec.JC.JC110ChuubakoTaiseiSizeJouhou, 			&rec.JC.JC111KousouJuuryouSizeJouhou, 			&rec.JC.JC112KousouTateSizeJouhou, 			&rec.JC.JC113KousouYokoSizeJouhou, 			&rec.JC.JC114KousouTakasaSizeJouhou, 			&rec.JC.JC115KousouTaiseiSizeJouhou, 			&rec.JC.JC116KonpouTaniSizeJouhou, 			&rec.JC.JC117HacchuuTaniSizeJouhou, 			&rec.JC.JC118KoushinKubun, 			&rec.JC.JC119TourokuNengappi, 			&rec.JC.JC120KoushinNengappi, 			&rec.JC.JC121ChouzaiHousouTaniCode, 			&rec.JC.JC122HanbaiHousouTaniCode, 			&rec.JC.JC123IppanMeiKana, 			&rec.JC.JC124SaishouYakkaKansanKeisuu, 		); err != nil { 			return nil, fmt.Errorf("jcshms scan error: %w", err) 		} 		out = append(out, rec) 	} 	if err := rows.Err(); err != nil { 		return nil, fmt.Errorf("jcshms rows error: %w", err) 	} 	return out, nil }  func QueryByJan(db *sql.DB, jan string) ([]JCFields, error) { 	recs, err := QueryJCSHMSRecordsByJan(db, jan) 	if err != nil { 		return nil, err 	} 	// JCSHMSRecord の中身（.JC）を抜き出す 	out := make([]JCFields, len(recs)) 	for i, r := range recs { 		f := r.JC 		// 主キーであるJC000JanCodeも JCFields に含めたい場合はここで設定 		f.JC000JanCode = r.JC000JanCode 		out[i] = f 	} 	return out, nil }

----- C:\Dev\YAMATO\js\dat.js -----
document.addEventListener('DOMContentLoaded', () => {   const uploadBtn = document.getElementById('uploadBtn');   const fileInput = document.getElementById('fileInput');   const indicator = document.getElementById('indicator');   const output = document.getElementById('output');    if (!uploadBtn || !fileInput || !indicator || !output) {     console.error("必要な DOM 要素が見つかりません。HTML を確認してください。");     return;   }    // アップロードボタンをクリックでファイル選択ダイアログを表示   uploadBtn.addEventListener('click', () => {     fileInput.click();   });    fileInput.addEventListener('change', async () => {     const files = fileInput.files;     if (!files || files.length === 0) {       console.warn("ファイルが選択されていません。");       return;     }      // Indicator に選択されたファイル数を表示     indicator.textContent = `${files.length} 個のファイルが選択されました。`;      let results = [];     // 各ファイルを1個ずつアップロード     for (let i = 0; i < files.length; i++) {       const formData = new FormData();       formData.append('file', files[i]);        try {         const res = await fetch('/upload', {           method: 'POST',           body: formData         });         if (!res.ok) throw new Error(`HTTPエラー: ${res.status}`);         // レスポンスはプレーンテキストとして受け取る         const text = await res.text();         results.push(`[${files[i].name}]:\n${text}`);       } catch (err) {         results.push(`[${files[i].name}]: アップロード失敗 (${err.message})`);       }     }     output.textContent = results.join("\n\n");     indicator.textContent += " アップロード処理が完了しました。";     fileInput.value = '';   }); });

----- C:\Dev\YAMATO\ma0\mao.go -----
// ma0/mao.go package ma0  import ( 	"database/sql" 	"fmt" 	"reflect" 	"strings"  	"YAMATO/jancode" 	"YAMATO/jcshms" 	"YAMATO/model" )  // MA0Record は、マスター連携用の全155フィールドを保持する構造体です。 // ※フィールド名は "MAxxxJCyyy"（JC マスター連携用）と "MAxxxJAyyy"（JANコード連携用）に分かれています。 type MA0Record struct { 	MA000JC000JanCode                           string 	MA001JC001JanCodeShikibetsuKubun            string 	MA002JC002KyuuJanCode                       string 	MA003JC003TouitsuShouhinCode                string 	MA004JC004YakkaKijunShuusaiIyakuhinCode     string 	MA005JC005KyuuYakkaKijunShuusaiIyakuhinCode string 	MA006JC006HOTBangou                         string 	MA007JC007ReseputoCode1                     string 	MA008JC008ReseputoCode2                     string 	MA009JC009YJCode                            string 	MA010JC010YakkouBunruiCode                  string 	MA011JC011YakkouBunruiMei                   string 	MA012JC012ShiyouKubunCode                   string 	MA013JC013ShiyouKubunMeishou                string 	MA014JC014NihonHyoujunShouhinBunruiBangou   string 	MA015JC015ZaikeiCode                        string 	MA016JC016ZaikeiKigou                       string 	MA017JC017ZaikeiMeishou                     string 	MA018JC018ShouhinMei                        string 	MA019JC019HankakuShouhinMei                 string 	MA020JC020KikakuYouryou                     string 	MA021JC021HankakuKikakuYouryou              string 	MA022JC022ShouhinMeiKanaSortYou             string 	MA023JC023ShouhinMeiKanpouYouKigou          string 	MA024JC024IppanMeishou                      string 	MA025JC025YakkaShuusaiMeishou               string 	MA026JC026ReseYouIyakuhinMei                string 	MA027JC027KikakuTaniMeishou                 string 	MA028JC028KikakuTaniKigou                   string 	MA029JC029HanbaiMotoCode                    string 	MA030JC030HanbaiMotoMei                     string 	MA031JC031HanbaiMotoMeiKana                 string 	MA032JC032HanbaiMotoMeiRyakuMei             string 	MA033JC033SeizouMotoYunyuuMotoCode          string 	MA034JC034SeizouMotoYunyuuMotoMei           string 	MA035JC035SeizouMotoYunyuuMotoMeiKana       string 	MA036JC036SeizouMotoYunyuuMotoMeiRyakuMei   string 	MA037JC037HousouKeitai                      string 	MA038JC038HousouTaniSuuchi                  string 	MA039JC039HousouTaniTani                    string 	MA040JC040HousouSuuryouSuuchi               string 	MA041JC041HousouSuuryouTani                 string 	MA042JC042HousouIrisuuSuuchi                string 	MA043JC043HousouIrisuuTani                  string 	MA044JC044HousouSouryouSuuchi               string 	MA045JC045HousouSouryouTani                 string 	MA046JC046HousouYouryouSuuchi               string 	MA047JC047HousouYouryouTani                 string 	MA048JC048HousouYakkaKeisuu                 string 	MA049JC049GenTaniYakka                      string 	MA050JC050GenHousouYakka                    string 	MA051JC051KyuuTaniYakka                     string 	MA052JC052KyuuHousouYakka                   string 	MA053JC053KokuchiTaniYakka                  string 	MA054JC054KokuchiHousouYakka                string 	MA055JC055YakkaKaiteiNengappi               string 	MA056JC056YakkaShuusaiNengappi              string 	MA057JC057HanbaiKaishiNengappi              string 	MA058JC058KeikaSochiNengappi                string 	MA059JC059HatsubaiChuushiNengappi           string 	MA060JC060SeizouChuushiNengappi             string 	MA061JC061Doyaku                            string 	MA062JC062Gekiyaku                          string 	MA063JC063Mayaku                            string 	MA064JC064Kouseishinyaku                    string 	MA065JC065Kakuseizai                        string 	MA066JC066KakuseizaiGenryou                 string 	MA067JC067ShuukanseiIyakuhin                string 	MA068JC068ShiteiIyakuhinKyuuKiseiKubun      string 	MA069JC069YoushijiIyakuhinKyuuKiseiKubun    string 	MA070JC070KetsuekiSeizai                    string 	MA071JC071NihonYakkyokuhou                  string 	MA072JC072YuukouKikan                       string 	MA073JC073ShiyouKigen                       string 	MA074JC074SeibutsuYuraiSeihin               string 	MA075JC075Kouhatsuhin                       string 	MA076JC076YakkaKijunShuusaiKubun            string 	MA077JC077KichouGimuKubun                   string 	MA078JC078ShouhinKubun                      string 	MA079JC079ShohousenIyakuhin                 string 	MA080JC080ChuushiRiyuuKubun                 string 	MA081JC081MishiyouKyuuRyuutsuuKanrihin      string 	MA082JC082MentenanceKubun                   string 	MA083JC083KouhatsuhinNoAruSenpatsuhinKubun  string 	MA084JC084AuthorizedGeneric                 string 	MA085JC085Biosimilar                        string 	MA086JC086HighRiskYaku                      string 	MA087JC087Kuuran1                           string 	MA088JC088Kuuran2                           string 	MA089JC089Shitsuon                          string 	MA090JC090Reisho                            string 	MA091JC091Reizou                            string 	MA092JC092Reitou                            string 	MA093JC093Ansho                             string 	MA094JC094Shakou                            string 	MA095JC095KimitsuYouki                      string 	MA096JC096MippuuYouki                       string 	MA097JC097Kikenbutsu                        string 	MA098JC098OndoJougen                        string 	MA099JC099OndoKagen                         string 	MA100JC100SonotaHokanjouNoChui              string 	MA101JC101KonpouJuuryouSizeJouhou           string 	MA102JC102KonpouTateSizeJouhou              string 	MA103JC103KonpouYokoSizeJouhou              string 	MA104JC104KonpouTakasaSizeJouhou            string 	MA105JC105KonpouTaiseiSizeJouhou            string 	MA106JC106ChuubakoJuuryouSizeJouhou         string 	MA107JC107ChuubakoTateSizeJouhou            string 	MA108JC108ChuubakoYokoSizeJouhou            string 	MA109JC109ChuubakoTakasaSizeJouhou          string 	MA110JC110ChuubakoTaiseiSizeJouhou          string 	MA111JC111KousouJuuryouSizeJouhou           string 	MA112JC112KousouTateSizeJouhou              string 	MA113JC113KousouYokoSizeJouhou              string 	MA114JC114KousouTakasaSizeJouhou            string 	MA115JC115KousouTaiseiSizeJouhou            string 	MA116JC116KonpouTaniSizeJouhou              string 	MA117JC117HacchuuTaniSizeJouhou             string 	MA118JC118KoushinKubun                      string 	MA119JC119TourokuNengappi                   string 	MA120JC120KoushinNengappi                   string 	MA121JC121ChouzaiHousouTaniCode             string 	MA122JC122HanbaiHousouTaniCode              string 	MA123JC123IppanMeiKana                      string 	MA124JC124SaishouYakkaKansanKeisuu          string 	MA125JA000                                  string 	MA126JA001JanCode                           string 	MA127JA002                                  string 	MA128JA003                                  string 	MA129JA004                                  string 	MA130JA005                                  string 	MA131JA006HousouSuuryouSuuchi               string 	MA132JA007HousouSuuryouTaniCode             string 	MA133JA008HousouSouryouSuuchi               string 	MA134JA009                                  string 	MA135JA010                                  string 	MA136JA011                                  string 	MA137JA012                                  string 	MA138JA013                                  string 	MA139JA014                                  string 	MA140JA015                                  string 	MA141JA016                                  string 	MA142JA017                                  string 	MA143JA018                                  string 	MA144JA019                                  string 	MA145JA020                                  string 	MA146JA021                                  string 	MA147JA022                                  string 	MA148JA023                                  string 	MA149JA024                                  string 	MA150JA025                                  string 	MA151JA026                                  string 	MA152JA027                                  string 	MA153JA028                                  string 	MA154JA029                                  string }  // DB は、ma0 連携用に参照するグローバルなデータベース接続です。 var DB *sql.DB  // Migrate は、MA0Record の全フィールドを TEXT 型として、 // 最初のフィールドを PRIMARY KEY としたテーブル "ma0" を作成します。 func Migrate(db *sql.DB) error { 	t := reflect.TypeOf(MA0Record{}) 	cols := make([]string, t.NumField()) 	for i := 0; i < t.NumField(); i++ { 		name := t.Field(i).Name 		if i == 0 { 			cols[i] = fmt.Sprintf("%s TEXT PRIMARY KEY", name) 		} else { 			cols[i] = fmt.Sprintf("%s TEXT", name) 		} 	} 	ddl := fmt.Sprintf( 		"CREATE TABLE IF NOT EXISTS ma0 (\n  %s\n);", 		strings.Join(cols, ",\n  "), 	) 	_, err := db.Exec(ddl) 	return err }  // columns は MA0Record の各フィールド名をスライスとして返します。 func columns() []string { 	t := reflect.TypeOf(MA0Record{}) 	out := make([]string, t.NumField()) 	for i := range out { 		out[i] = t.Field(i).Name 	} 	return out }  // values は与えられた MA0Record のフィールド値の一覧を []interface{} として返します。 func values(rec MA0Record) []interface{} { 	v := reflect.ValueOf(rec) 	out := make([]interface{}, v.NumField()) 	for i := range out { 		out[i] = v.Field(i).Interface() 	} 	return out }  // InsertIgnore は、複数の MA0Record を一括で INSERT OR IGNORE します。 // PRIMARY KEY 制約により重複が自動的に防がれます。 func InsertIgnore(db *sql.DB, recs []MA0Record) error { 	cols := columns() 	placeholders := make([]string, len(cols)) 	for i := range placeholders { 		placeholders[i] = "?" 	} 	stmt := fmt.Sprintf( 		"INSERT OR IGNORE INTO ma0 (%s) VALUES (%s)", 		strings.Join(cols, ","), 		strings.Join(placeholders, ","), 	) 	prep, err := db.Prepare(stmt) 	if err != nil { 		return err 	} 	defer prep.Close()  	for _, rec := range recs { 		if _, err := prep.Exec(values(rec)...); err != nil { 			return err 		} 	} 	return nil }  // CheckOrCreateMA0 は、指定された JAN コードで ma0 テーブルを検索します。 // 既存ならそのレコードを返し、created=false とします。 // 見つからなければ、jcshms および jancode からマスター照会を行い、 // 新規レコードを INSERT OR IGNORE して created=true として返します。 func CheckOrCreateMA0(jan string) (MA0Record, bool, error) { 	// 1) ma0 に既にレコードが存在するかチェック 	var rec MA0Record 	cols := columns() 	addrs := make([]interface{}, len(cols)) 	recVal := reflect.ValueOf(&rec).Elem() 	for i := range addrs { 		addrs[i] = recVal.Field(i).Addr().Interface() 	} 	query := fmt.Sprintf("SELECT %s FROM ma0 WHERE MA000JC000JanCode = ?", strings.Join(cols, ",")) 	err := DB.QueryRow(query, jan).Scan(addrs...) 	if err == nil { 		// 既存レコードが見つかった場合 		return rec, false, nil 	} 	if err != sql.ErrNoRows { 		return MA0Record{}, false, fmt.Errorf("ma0 select error: %v", err) 	}  	// 2) マスター照会（jcshms および jancode から）およびフィールドのコピー 	cs, _ := jcshms.QueryByJan(DB, jan) 	ja, _ := jancode.QueryByJan(DB, jan)  	// 両方のマスターにヒットがなければ、登録せずに終了する 	if len(cs) == 0 && len(ja) == 0 { 		return MA0Record{}, false, nil 	}  	// 反射を用いて、jcshms からの項目を MA0Record にコピー 	if len(cs) > 0 { 		jcVal := reflect.ValueOf(cs[0]) 		for i := 0; i < recVal.NumField(); i++ { 			field := recVal.Type().Field(i) 			// MAレコードで "JC" を含むフィールドは、jcshms の対応フィールドへマッピング 			if strings.HasPrefix(field.Name, "MA") && strings.Contains(field.Name, "JC") { 				idx := strings.Index(field.Name, "JC") 				masterName := field.Name[idx:] 				if masterField := jcVal.FieldByName(masterName); masterField.IsValid() { 					recVal.Field(i).SetString(masterField.String()) 				} 			} 		} 	}  	// jancode からも同様にコピー（フィールド名に "JA" を含むもの） 	if len(ja) > 0 { 		jaVal := reflect.ValueOf(ja[0]) 		for i := 0; i < recVal.NumField(); i++ { 			field := recVal.Type().Field(i) 			if strings.HasPrefix(field.Name, "MA") && strings.Contains(field.Name, "JA") { 				idx := strings.Index(field.Name, "JA") 				masterName := field.Name[idx:] 				if masterField := jaVal.FieldByName(masterName); masterField.IsValid() { 					recVal.Field(i).SetString(masterField.String()) 				} 			} 		} 	}  	// 主キー（JANコード）の設定 	rec.MA000JC000JanCode = jan  	// 3) INSERT OR IGNORE により DB へ新規レコード挿入 	if err := InsertIgnore(DB, []MA0Record{rec}); err != nil { 		return MA0Record{}, false, fmt.Errorf("ma0 insert error: %v", err) 	} 	return rec, true, nil }  // ProcessMA0Record は、dat.go や usage.go から呼び出され、 // 与えられたデータスライスから JAN コードを抽出して CheckOrCreateMA0 を実行します。 // ※ data の 3 番目の要素（インデックス2）が JAN コードであるという慣例に従います。 func ProcessMA0Record(data []string) error { 	if len(data) < 3 { 		return fmt.Errorf("insufficient fields: %v", data) 	} 	jan := data[2] 	_, _, err := CheckOrCreateMA0(jan) 	return err }  // InsertDATRecord は、与えられた model.DATRecord を datrecords テーブルに挿入します。 // organizedFlag には、1 (organized) または 0 (disorganized) を指定します。 func InsertDATRecord(db *sql.DB, rec model.DATRecord, organizedFlag int) error { 	stmt := ` 		INSERT OR IGNORE INTO datrecords ( 			CurrentOroshiCode, 			DatDate, 			DatDeliveryFlag, 			DatReceiptNumber, 			DatLineNumber, 			DatJanCode, 			DatProductName, 			DatQuantity, 			DatUnitPrice, 			DatSubtotal, 			DatPackagingDrugPrice, 			DatExpiryDate, 			DatLotNumber, 			organizedFlag 		) 		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);` 	_, err := db.Exec(stmt, 		rec.CurrentOroshiCode, // DatOroshiCode 列へ 		rec.DatDate,           // DatDate 列へ 		rec.DatFlag,           // DatDeliveryFlag 列へ（旧：DatDeliveryFlag → DatFlag） 		rec.DatRecNo,          // DatReceiptNumber 列へ 		rec.DatLineNo,         // DatLineNumber 列へ 		rec.DatJan,            // DatJanCode 列へ 		rec.DatProductName,    // DatProductName 列へ 		rec.DatQty,            // DatQuantity 列へ 		rec.DatUnit,           // DatUnitPrice 列へ 		rec.DatSub,            // DatSubtotal 列へ 		rec.DatPkg,            // DatPackagingDrugPrice 列へ 		rec.DatExp,            // DatExpiryDate 列へ 		rec.DatLot,            // DatLotNumber 列へ 		organizedFlag, 	) 	if err != nil { 		return fmt.Errorf("failed to insert DATRecord: %w", err) 	} 	return nil }  // InsertUsageRecord inserts one USAGERecord into the "usage_records" table. func InsertUsageRecord(db *sql.DB, rec model.USAGERecord) error { 	stmt := ` 		INSERT OR IGNORE INTO usage_records ( 			usageDate, 			usageYjCode, 			usageJanCode, 			usageProductName, 			usageAmount, 			usageUnit, 			usageUnitName, 			organizedFlag 		) VALUES (?, ?, ?, ?, ?, ?, ?, ?); 	` 	_, err := db.Exec(stmt, 		rec.UsageDate, 		rec.UsageYjCode, 		rec.UsageJanCode, 		rec.UsageProductName, 		rec.UsageAmount, 		rec.UsageUnit, 		rec.UsageUnitName, 		rec.OrganizedFlag, 	) 	if err != nil { 		return fmt.Errorf("failed to insert USAGE record: %w", err) 	} 	return nil }

----- C:\Dev\YAMATO\model\model.go -----
// model/model.go package model  // DATRecord は、DAT ファイルの1行分の情報を表す共通データモデルです。 // 注意: DAT ファイルから生の文字列として読み込む場合は、初期値として // "Name" フィールドに読み込まれますが、Shift‑JIS から UTF‑8 への変換後は // この値を "DatProductName" にセットします。 type DATRecord struct { 	CurrentOroshiCode string `json:"DatOroshiCode"`         // 卸コード 	DatDate           string `json:"DatDate"`               // 日付 	DatFlag           string `json:"DatDeliveryFlag"`       // 納品／返品フラグ 	DatRecNo          string `json:"DatReceiptNumber"`      // 伝票番号 	DatJan            string `json:"DatJanCode"`            // JANコード 	DatLineNo         string `json:"DatLineNumber"`         // 行番号 	DatProductName    string `json:"DatProductName"`        // 商品名（変換後の値） 	DatQty            string `json:"DatQuantity"`           // 数量 	DatUnit           string `json:"DatUnitPrice"`          // 単価または単位 	DatSub            string `json:"DatSubtotal"`           // 小計 	DatPkg            string `json:"DatPackagingDrugPrice"` // 包装薬価 	DatExp            string `json:"DatExpiryDate"`         // 賞味期限 	DatLot            string `json:"DatLotNumber"`          // ロット番号 }  // USAGERecord は、USAGE CSV の1行分の情報を表します。 type USAGERecord struct { 	UsageDate        string // 使用日 	UsageYjCode      string // YJコード 	UsageJanCode     string // JANコード（MA0のキーとして利用） 	UsageProductName string // 商品名 	UsageAmount      string // 数量または金額 	UsageUnit        string // 単位コード 	UsageUnitName    string // 単位名称（TANI マップ経由で解決） 	OrganizedFlag    int    // 1: organized, 0: disorganized }

----- C:\Dev\YAMATO\static\css\styles.css -----
/* すべての要素のマージン・パディングをリセット */ * {   margin: 0;   padding: 0;   box-sizing: border-box; }  body {   /* フォントサイズに対しては何もしない */   font-family: Arial, sans-serif; }  /* ヘッダー全体をstickyに */ #header {   position: sticky;   top: 0;   background-color: #f8f8f8;   border-bottom: 1px solid #ccc;   /* マージン・パディングは0ですが、最低高さだけは確保 */   min-height: 50px; }    /* indicatorはheader内に配置 */ #indicator {   background-color: #ddd;   border-bottom: 1px solid #aaa;   /* マージン、パディングは0 */ }  /* ナビゲーションボタン */ nav button {   background-color: #007BFF;   /* 青い背景 */   color: #fff;                 /* 白い文字 */   padding: 10px 15px;          /* 上下に10px、左右に15pxの余白 */   border: none;                /* 境界線は無し */   border-radius: 4px;          /* 少し角を丸く */   font-size: 16px;             /* 読みやすいサイズ */   margin: 5px;                 /* 各ボタン間に5pxの間隔 */   cursor: pointer;             /* カーソルをポインターに */   transition: background-color 0.3s ease; /* ホバー時の背景色変化にスムーズなアニメーション */ }  nav button:hover {   background-color: #0056b3;   /* ホバー時の色を少し濃い青に */ }   /* 出力テーブル */ #outputTable {   width: 100%;   border-collapse: collapse;   /* マージン 0 */ }  #outputTable th, #outputTable td {   border: 1px solid #ccc;   /* マージン、パディング 0 */   padding: 0;   text-align: left; }

----- C:\Dev\YAMATO\static\js\aggregate.js -----


----- C:\Dev\YAMATO\static\js\dat.js -----
document.addEventListener('DOMContentLoaded', () => {   // 必要なDOM要素の取得   const btn       = document.getElementById('datBtn');   const input     = document.getElementById('datInput');   const indicator = document.getElementById('indicator');   const table     = document.getElementById('outputTable');   const thead     = table.querySelector('thead');   const tbody     = table.querySelector('tbody');    // 「DATファイルアップロード」ボタン押下時：   // ①テーブル内（出力）の既存内容をクリア   // ②隠しファイル入力をトリガーしてファイル選択ダイアログを表示   btn.addEventListener('click', () => {     thead.innerHTML = "";     tbody.innerHTML = "";     input.click();   });    // ファイルが選択された時の処理   input.addEventListener('change', async () => {     if (!input.files.length) return;      // アップロード開始状態の表示     indicator.textContent = 'DATアップロード中…';      // テーブルヘッダー、ボディの初期化（DAT用）     thead.innerHTML = `       <tr>         <th>卸コード</th>         <th>日付</th>         <th>納品／返品</th>         <th>伝票番号</th>         <th>行番号</th>         <th>JANコード</th>         <th>商品名</th>         <th>数量</th>         <th>単価</th>         <th>小計</th>         <th>包装薬価</th>         <th>有効期限</th>         <th>ロット番号</th>       </tr>`;     tbody.innerHTML = '';      // 選択された各ファイルに対してアップロード処理を実施     for (let file of input.files) {       const formData = new FormData();       formData.append('datFileInput[]', file);        try {         // サーバの /uploadDat エンドポイントに対してPOSTリクエスト         const res = await fetch('/uploadDat', {           method: 'POST',           body: formData         });         if (!res.ok) {           throw new Error(`HTTPステータス: ${res.status}`);         }         // レスポンスはJSON形式で取得（DAT読み込み件数などの情報を含む）         const result = await res.json();          indicator.textContent = `${file.name}: DAT読み込み: ${result.DATReadCount} 件 | MA0作成: ${result.MA0CreatedCount} 件 | 重複: ${result.DuplicateCount} 件`;          // 結果のDATRecordsをテーブルに追加         if (result.DATRecords && result.DATRecords.length > 0) {           result.DATRecords.forEach(record => {             const tr = document.createElement('tr');             tr.innerHTML = `               <td>${record.DatOroshiCode}</td>               <td>${record.DatDate}</td>               <td>${record.DatDeliveryFlag}</td>               <td>${record.DatReceiptNumber}</td>               <td>${record.DatLineNumber}</td>               <td>${record.DatJanCode}</td>               <td>${record.DatProductName}</td>               <td>${record.DatQuantity}</td>               <td>${record.DatUnitPrice}</td>               <td>${record.DatSubtotal}</td>               <td>${record.DatPackagingDrugPrice}</td>               <td>${record.DatExpiryDate}</td>               <td>${record.DatLotNumber}</td>             `;             tbody.appendChild(tr);           });         }       } catch (err) {         indicator.textContent = "アップロード中にエラーが発生しました: " + err.message;         console.error(err);       }     }     indicator.textContent += " 完了";     // 次回のアップロードのためにファイル入力をリセット     input.value = '';   }); });

----- C:\Dev\YAMATO\static\js\usage.js -----
document.addEventListener('DOMContentLoaded', () => {   // 必要なDOM要素の取得   const usageBtn   = document.getElementById('usageBtn');   const usageInput = document.getElementById('usageInput');   const indicator  = document.getElementById('indicator');   const table      = document.getElementById('outputTable');   const thead      = table.querySelector('thead');   const tbody      = table.querySelector('tbody');    // 「USAGEファイルアップロード」ボタン押下時：   // ①出力テーブルの内容をクリア   // ②隠しファイル入力をトリガー   usageBtn.addEventListener('click', () => {     thead.innerHTML = "";     tbody.innerHTML = "";     usageInput.click();   });    // ファイルが選択された時の処理   usageInput.addEventListener('change', async () => {     if (!usageInput.files || usageInput.files.length === 0) return;      indicator.textContent = 'USAGEアップロード中…';      // USAGE用のテーブルヘッダー、ボディを初期化     thead.innerHTML = `       <tr>         <th>日付</th>         <th>YJコード</th>         <th>JANコード</th>         <th>商品名</th>         <th>数量</th>         <th>単位コード</th>         <th>単位名称</th>       </tr>`;     tbody.innerHTML = '';      // 選択された各ファイルに対してアップロード処理を実施     for (let file of usageInput.files) {       const formData = new FormData();       formData.append('usageFileInput[]', file);        try {         const res = await fetch('/uploadUsage', {           method: 'POST',           body: formData         });         if (!res.ok) {           throw new Error(`HTTPエラー: ${res.status}`);         }         // サーバからJSON形式で結果を取得         const result = await res.json();         indicator.textContent = `${file.name}: USAGE読み込み: ${result.TotalRecords} 件`;          // 結果のUSAGERecordsをテーブルに追加         if (result.USAGERecords && result.USAGERecords.length > 0) {           result.USAGERecords.forEach(record => {             const tr = document.createElement('tr');             tr.innerHTML = `               <td>${record.usageDate}</td>               <td>${record.usageYjCode}</td>               <td>${record.usageJanCode}</td>               <td>${record.usageProductName}</td>               <td>${record.usageAmount}</td>               <td>${record.usageUnit}</td>               <td>${record.usageUnitName}</td>             `;             tbody.appendChild(tr);           });         }       } catch (error) {         indicator.textContent = "アップロード中にエラー: " + error.message;         console.error("USAGEアップロードエラー:", error);       }     }     indicator.textContent += " 完了";     usageInput.value = '';   }); });

----- C:\Dev\YAMATO\static\index.html -----
<!DOCTYPE html> <html lang="ja"> <head>   <meta charset="UTF-8">   <link rel="stylesheet" href="css/styles.css"> </head> <body>   <header id="header">     <div id="indicator"></div>     <nav>       <button id="datBtn">DAT</button>       <button id="usageBtn">USAGE</button>       <button id="aggregateBtn">集計</button>     </nav>   </header>    <table id="outputTable">     <thead></thead>     <tbody></tbody>   </table>    <input type="file" id="datInput" accept=".dat" multiple hidden>   <input type="file" id="usageInput" accept=".csv" multiple hidden>    <script src="js/dat.js"></script>   <script src="js/usage.js"></script>   <script src="js/aggregate.js"></script> </body> </html>

----- C:\Dev\YAMATO\tani\tani.go -----
package tani  import ( 	"encoding/csv" 	"io" 	"log"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // ParseTANI は、TANI CSV ファイルを Shift‑JIS から UTF‑8 に変換しながら読み込み、 // 各行のフィールド0（単位コード）をキー、フィールド1（単位名称）を値とするマップを返します。 func ParseTANI(r io.Reader) (map[string]string, error) { 	// Shift‑JIS → UTF‑8 変換を適用 	decoder := transform.NewReader(r, japanese.ShiftJIS.NewDecoder()) 	reader := csv.NewReader(decoder) 	records, err := reader.ReadAll() 	if err != nil { 		return nil, err 	} 	taniMap := make(map[string]string) 	for _, row := range records { 		if len(row) < 2 { 			log.Printf("TANI行のフィールド不足: %v", row) 			continue 		} 		code := row[0] 		unit := row[1] 		taniMap[code] = unit 	} 	return taniMap, nil }

----- C:\Dev\YAMATO\usage\usage.go -----
// usage/usage.go package usage  import ( 	"bufio" 	"database/sql" 	"fmt" 	"io" 	"log" 	"os" 	"strings"  	"YAMATO/jcshms" 	"YAMATO/ma0" 	"YAMATO/tani"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // UsageRecord はUSAGE CSVの1行分のデータを表します。 type UsageRecord struct { 	UsageDate        string `json:"usageDate"` 	UsageYjCode      string `json:"usageYjCode"` 	UsageJanCode     string `json:"usageJanCode"` 	UsageProductName string `json:"usageProductName"` 	UsageAmount      string `json:"usageAmount"` 	UsageUnit        string `json:"usageUnit"` 	UsageUnitName    string `json:"usageUnitName"` 	OrganizedFlag    int    `json:"organizedFlag"` // 1: organized, 0: disorganized }  var taniMap map[string]string  // loadTaniMap は、TANI CSVファイルを読み込み、単位コードから単位名称へのマッピングを作成します。 func loadTaniMap() { 	if taniMap != nil { 		return 	} 	f, err := os.Open("C:\\Dev\\YAMATO\\SOU\\TANI.CSV") 	if err != nil { 		log.Printf("TANIファイルオープンエラー: %v", err) 		taniMap = make(map[string]string) 		return 	} 	defer f.Close() 	tMap, err := tani.ParseTANI(f) 	if err != nil { 		log.Printf("TANIパース失敗: %v", err) 		taniMap = make(map[string]string) 		return 	} 	taniMap = tMap }  // getOrganizedFlag は、指定されたJANコードについてJCShmsマスターに存在するかをチェックし、 // 存在すれば 1 (organized)、存在しなければ 0 (disorganized) を返します。 func getOrganizedFlag(jan string) (int, error) { 	records, err := jcshms.QueryByJan(ma0.DB, jan) 	if err != nil { 		return 0, fmt.Errorf("jcshms.QueryByJan error: %w", err) 	} 	if len(records) > 0 { 		return 1, nil 	} 	return 0, nil }  // ParseUsageFile は、Shift-JISでエンコードされたUSAGE CSVを読み込み、 // 各行を UsageRecord に変換します。各レコードに対して、単位名称の解決および // JCShmsマスターによる整理状態の判定を実施します。 func ParseUsageFile(r io.Reader) ([]UsageRecord, error) { 	loadTaniMap() 	decoder := japanese.ShiftJIS.NewDecoder() 	scanner := bufio.NewScanner(transform.NewReader(r, decoder)) 	var records []UsageRecord 	headerSkipped := false  	for scanner.Scan() { 		line := scanner.Text() 		// ヘッダー行をスキップ 		if !headerSkipped { 			if strings.Contains(line, "UsageDate") { 				headerSkipped = true 				continue 			} 			headerSkipped = true 		} 		fields := strings.Split(line, ",") 		if len(fields) < 6 { 			log.Printf("[USAGE] フィールド数不足の行をスキップ: %v", fields) 			continue 		} 		for i, f := range fields { 			fields[i] = strings.Trim(f, "\" ") 		} 		ur := UsageRecord{ 			UsageDate:        strings.TrimSpace(fields[0]), 			UsageYjCode:      fields[1], 			UsageJanCode:     fields[2], 			UsageProductName: fields[3], 			UsageAmount:      fields[4], 			UsageUnit:        fields[5], 		} 		if name, ok := taniMap[ur.UsageUnit]; ok { 			ur.UsageUnitName = name 		} else { 			ur.UsageUnitName = ur.UsageUnit 		} 		flag, err := getOrganizedFlag(ur.UsageJanCode) 		if err != nil { 			log.Printf("[USAGE] Organized flag 確認エラー (JAN=%q): %v", ur.UsageJanCode, err) 			ur.OrganizedFlag = 0 		} else { 			ur.OrganizedFlag = flag 		} 		records = append(records, ur) 		// MA0連携処理（必要に応じて） 		dataSlice := []string{ 			ur.UsageDate, 			ur.UsageYjCode, 			ur.UsageJanCode, 			ur.UsageProductName, 			ur.UsageAmount, 			ur.UsageUnit, 			ur.UsageUnitName, 		} 		if err := ma0.ProcessMA0Record(dataSlice); err != nil { 			log.Printf("[USAGE] MA0照合エラー (JAN=%q): %v", ur.UsageJanCode, err) 		} 		log.Printf("[USAGE] Parsed record: %+v", ur) 	} 	if err := scanner.Err(); err != nil { 		return nil, err 	} 	return records, nil }  // InsertUsageRecords は、パース済みUsageRecordのスライスをDBの"usagerecords"テーブルに登録します。 func InsertUsageRecords(db *sql.DB, recs []UsageRecord) error { 	stmt := ` 		INSERT OR REPLACE INTO usagerecords ( 			usageDate, 			usageYjCode, 			usageJanCode, 			usageProductName, 			usageAmount, 			usageUnit, 			usageUnitName, 			organizedFlag 		) VALUES (?, ?, ?, ?, ?, ?, ?, ?); 	` 	for _, r := range recs { 		_, err := db.Exec(stmt, 			strings.TrimSpace(r.UsageDate), 			r.UsageYjCode, 			r.UsageJanCode, 			r.UsageProductName, 			r.UsageAmount, 			r.UsageUnit, 			r.UsageUnitName, 			r.OrganizedFlag, 		) 		if err != nil { 			return fmt.Errorf("failed to insert USAGE record: %w", err) 		} 	} 	return nil }  // ReplaceUsageRecordsWithPeriod は、ファイル内にある UsageDate の最小値から最大値までの期間のレコードを // DBから削除した上で、新たなレコードを登録する一連の処理を実施します。 func ReplaceUsageRecordsWithPeriod(db *sql.DB, recs []UsageRecord) error { 	log.Printf("ReplaceUsageRecordsWithPeriod が呼ばれました。レコード件数: %d", len(recs)) 	if len(recs) == 0 { 		log.Printf("レコードが存在しないため、処理を終了します。") 		return nil 	}  	// 対象期間を算出 	periodStart := strings.TrimSpace(recs[0].UsageDate) 	periodEnd := strings.TrimSpace(recs[0].UsageDate) 	for _, rec := range recs { 		rdate := strings.TrimSpace(rec.UsageDate) 		if rdate < periodStart { 			periodStart = rdate 		} 		if rdate > periodEnd { 			periodEnd = rdate 		} 	} 	log.Printf("削除対象期間: %s ～ %s", periodStart, periodEnd)  	// 対象期間の既存レコードを削除 	deleteStmt := `DELETE FROM usagerecords WHERE usageDate BETWEEN ? AND ?` 	res, err := db.Exec(deleteStmt, periodStart, periodEnd) 	if err != nil { 		return fmt.Errorf("failed to delete existing usage records for period %s-%s: %w", periodStart, periodEnd, err) 	} 	n, err := res.RowsAffected() 	if err != nil { 		log.Printf("RowsAffectedの取得エラー: %v", err) 	} else { 		log.Printf("対象期間内で削除されたレコード件数: %d", n) 	}  	// 新規レコードの挿入 	if err := InsertUsageRecords(db, recs); err != nil { 		return fmt.Errorf("failed to insert new usage records: %w", err) 	} 	log.Printf("新規レコードの挿入が完了しました。") 	return nil }

----- C:\Dev\YAMATO\main.go -----
// File: main.go package main  import ( 	"database/sql" 	"encoding/csv" 	"encoding/json" 	"io" 	"log" 	"net/http" 	"os" 	"os/exec" 	"runtime" 	"strings"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform"  	"YAMATO/dat" 	"YAMATO/ma0" 	"YAMATO/model" 	"YAMATO/usage"  	_ "github.com/mattn/go-sqlite3" )  // loadCSV は、Shift-JIS → UTF-8 変換しつつCSVを読み込み、指定テーブルに INSERT OR REPLACE する関数です。 func loadCSV(db *sql.DB, filePath, table string, cols int, skipHeader bool) error { 	f, err := os.Open(filePath) 	if err != nil { 		return err 	} 	defer f.Close()  	rd := csv.NewReader(transform.NewReader(f, japanese.ShiftJIS.NewDecoder())) 	rd.LazyQuotes = true 	rd.FieldsPerRecord = -1  	if skipHeader { 		if _, err := rd.Read(); err != nil { 			return err 		} 	}  	tx, err := db.Begin() 	if err != nil { 		return err 	} 	defer func() { 		if err != nil { 			tx.Rollback() 		} 	}()  	ph := make([]string, cols) 	for i := range ph { 		ph[i] = "?" 	}  	stmt, err := tx.Prepare( 		"INSERT OR REPLACE INTO " + table + " VALUES(" + strings.Join(ph, ",") + ")", 	) 	if err != nil { 		return err 	} 	defer stmt.Close()  	for { 		rec, err := rd.Read() 		if err == io.EOF { 			break 		} 		if err != nil { 			return err 		} 		args := make([]interface{}, len(rec)) 		for i, v := range rec { 			args[i] = v 		} 		if _, err := stmt.Exec(args...); err != nil { 			return err 		} 	} 	return tx.Commit() }  // uploadDatHandler は /uploadDat エンドポイントです。 // DAT ファイルを受け取り、dat.ParseDATFile でパースした結果を JSON で返します。 func uploadDatHandler(w http.ResponseWriter, r *http.Request) { 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	} 	if err := r.ParseMultipartForm(10 << 20); err != nil { 		http.Error(w, "Error parsing form: "+err.Error(), http.StatusBadRequest) 		return 	} 	files := r.MultipartForm.File["datFileInput[]"] 	if len(files) == 0 { 		http.Error(w, "No DAT file uploaded", http.StatusBadRequest) 		return 	}  	// ここでは、dat パッケージの DATRecord 型をそのまま利用します。 	var all []model.DATRecord 	total, created, dup := 0, 0, 0  	for _, fh := range files { 		file, err := fh.Open() 		if err != nil { 			log.Println("open DAT error:", err) 			continue 		} 		defer file.Close()  		recs, tc, mc, dc, err := dat.ParseDATFile(file) 		if err != nil { 			log.Println("parse DAT error:", err) 			continue 		} 		total += tc 		created += mc 		dup += dc 		// all は型 []dat.DATRecord として宣言しているため、recs をそのまま append 可能です。 		all = append(all, recs...) 	}  	resp := map[string]interface{}{ 		"DATReadCount":    total, 		"MA0CreatedCount": created, 		"DuplicateCount":  dup, 		"DATRecords":      all, 	} 	w.Header().Set("Content-Type", "application/json") 	json.NewEncoder(w).Encode(resp) }  // uploadUsageHandler は、USAGE CSV ファイルを受け取り、 // ファイル内の UsageDate の対象期間に該当する既存レコードを削除した後、 // 新たにアップロードされた USAGE レコードを挿入し、結果を JSON で返します。 func uploadUsageHandler(w http.ResponseWriter, r *http.Request) { 	// POST メソッド以外は拒否 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	}  	// マルチパートフォームをパース（最大 10 MB を想定） 	if err := r.ParseMultipartForm(10 << 20); err != nil { 		http.Error(w, "Error parsing form: "+err.Error(), http.StatusBadRequest) 		return 	}  	// "usageFileInput[]" というキーに紐づくファイル群を取得 	files := r.MultipartForm.File["usageFileInput[]"] 	if len(files) == 0 { 		http.Error(w, "No USAGE file uploaded", http.StatusBadRequest) 		return 	}  	var allRecords []usage.UsageRecord  	// 各アップロードファイルを処理 	for _, fh := range files { 		file, err := fh.Open() 		if err != nil { 			log.Printf("Error opening usage file %s: %v", fh.Filename, err) 			continue 		} 		recs, err := usage.ParseUsageFile(file) 		file.Close() // 明示的にクローズ 		if err != nil { 			log.Printf("Error parsing usage file %s: %v", fh.Filename, err) 			continue 		} 		allRecords = append(allRecords, recs...) 	}  	// ここで、usage.ReplaceUsageRecordsWithPeriod を呼び出して 	// ファイル内の期間の既存レコードを削除し、新しいレコードを挿入する 	if err := usage.ReplaceUsageRecordsWithPeriod(ma0.DB, allRecords); err != nil { 		log.Printf("Failed to replace USAGE records: %v", err) 		http.Error(w, "Failed to update USAGE records", http.StatusInternalServerError) 		return 	}  	// 結果を JSON として返す 	response := map[string]interface{}{ 		"TotalRecords": len(allRecords), 		"USAGERecords": allRecords, 	} 	w.Header().Set("Content-Type", "application/json") 	if err := json.NewEncoder(w).Encode(response); err != nil { 		log.Printf("JSON encode error: %v", err) 	} }  // autoLaunchBrowser は、サーバ起動後にブラウザを自動オープンします。 func autoLaunchBrowser(url string) { 	var cmd string 	var args []string 	switch runtime.GOOS { 	case "windows": 		cmd = "cmd" 		args = []string{"/c", "start", url} 	case "darwin": 		cmd = "open" 		args = []string{url} 	default: 		cmd = "xdg-open" 		args = []string{url} 	} 	if err := exec.Command(cmd, args...).Start(); err != nil { 		log.Printf("browser start failed: %v", err) 	} }  func main() { 	db, err := sql.Open("sqlite3", "yamato.db") 	if err != nil { 		log.Fatalf("DB open error: %v", err) 	} 	defer db.Close()  	// ma0 パッケージに DB をセット（MA0 連携用） 	ma0.DB = db  	// schema.sql を読み込み実行 	schema, err := os.ReadFile("schema.sql") 	if err != nil { 		log.Fatalf("read schema.sql error: %v", err) 	} 	if _, err := db.Exec(string(schema)); err != nil { 		log.Fatalf("exec schema.sql error: %v", err) 	}  	// マスター CSV のロード 	if err := loadCSV(db, "SOU/JCSHMS.CSV", "jcshms", 125, false); err != nil { 		log.Fatalf("load JCSHMS failed: %v", err) 	} 	if err := loadCSV(db, "SOU/JANCODE.CSV", "jancode", 30, true); err != nil { 		log.Fatalf("load JANCODE failed: %v", err) 	}  	// HTTP ルーティングの設定 	http.Handle("/", http.FileServer(http.Dir("./static"))) 	http.HandleFunc("/uploadDat", uploadDatHandler) 	http.HandleFunc("/uploadUsage", uploadUsageHandler)  	// 自動ブラウザ起動 	go autoLaunchBrowser("http://localhost:8080")  	log.Println("Server listening on :8080") 	log.Fatal(http.ListenAndServe(":8080", nil)) }

----- C:\Dev\YAMATO\schema.sql -----
CREATE TABLE IF NOT EXISTS ma0 ( MA000JC000JanCode TEXT KEY, MA001JC001JanCodeShikibetsuKubun TEXT, MA002JC002KyuuJanCode TEXT, MA003JC003TouitsuShouhinCode TEXT, MA004JC004YakkaKijunShuusaiIyakuhinCode TEXT, MA005JC005KyuuYakkaKijunShuusaiIyakuhinCode TEXT, MA006JC006HOTBangou TEXT, MA007JC007ReseputoCode1 TEXT, MA008JC008ReseputoCode2 TEXT, MA009JC009YJCode TEXT, MA010JC010YakkouBunruiCode TEXT, MA011JC011YakkouBunruiMei TEXT, MA012JC012ShiyouKubunCode TEXT, MA013JC013ShiyouKubunMeishou TEXT, MA014JC014NihonHyoujunShouhinBunruiBangou TEXT, MA015JC015ZaikeiCode TEXT, MA016JC016ZaikeiKigou TEXT, MA017JC017ZaikeiMeishou TEXT, MA018JC018ShouhinMei TEXT, MA019JC019HankakuShouhinMei TEXT, MA020JC020KikakuYouryou TEXT, MA021JC021HankakuKikakuYouryou TEXT, MA022JC022ShouhinMeiKanaSortYou TEXT, MA023JC023ShouhinMeiKanpouYouKigou TEXT, MA024JC024IppanMeishou TEXT, MA025JC025YakkaShuusaiMeishou TEXT, MA026JC026ReseYouIyakuhinMei TEXT, MA027JC027KikakuTaniMeishou TEXT, MA028JC028KikakuTaniKigou TEXT, MA029JC029HanbaiMotoCode TEXT, MA030JC030HanbaiMotoMei TEXT, MA031JC031HanbaiMotoMeiKana TEXT, MA032JC032HanbaiMotoMeiRyakuMei TEXT, MA033JC033SeizouMotoYunyuuMotoCode TEXT, MA034JC034SeizouMotoYunyuuMotoMei TEXT, MA035JC035SeizouMotoYunyuuMotoMeiKana TEXT, MA036JC036SeizouMotoYunyuuMotoMeiRyakuMei TEXT, MA037JC037HousouKeitai TEXT, MA038JC038HousouTaniSuuchi TEXT, MA039JC039HousouTaniTani TEXT, MA040JC040HousouSuuryouSuuchi TEXT, MA041JC041HousouSuuryouTani TEXT, MA042JC042HousouIrisuuSuuchi TEXT, MA043JC043HousouIrisuuTani TEXT, MA044JC044HousouSouryouSuuchi TEXT, MA045JC045HousouSouryouTani TEXT, MA046JC046HousouYouryouSuuchi TEXT, MA047JC047HousouYouryouTani TEXT, MA048JC048HousouYakkaKeisuu TEXT, MA049JC049GenTaniYakka TEXT, MA050JC050GenHousouYakka TEXT, MA051JC051KyuuTaniYakka TEXT, MA052JC052KyuuHousouYakka TEXT, MA053JC053KokuchiTaniYakka TEXT, MA054JC054KokuchiHousouYakka TEXT, MA055JC055YakkaKaiteiNengappi TEXT, MA056JC056YakkaShuusaiNengappi TEXT, MA057JC057HanbaiKaishiNengappi TEXT, MA058JC058KeikaSochiNengappi TEXT, MA059JC059HatsubaiChuushiNengappi TEXT, MA060JC060SeizouChuushiNengappi TEXT, MA061JC061Doyaku TEXT, MA062JC062Gekiyaku TEXT, MA063JC063Mayaku TEXT, MA064JC064Kouseishinyaku TEXT, MA065JC065Kakuseizai TEXT, MA066JC066KakuseizaiGenryou TEXT, MA067JC067ShuukanseiIyakuhin TEXT, MA068JC068ShiteiIyakuhinKyuuKiseiKubun TEXT, MA069JC069YoushijiIyakuhinKyuuKiseiKubun TEXT, MA070JC070KetsuekiSeizai TEXT, MA071JC071NihonYakkyokuhou TEXT, MA072JC072YuukouKikan TEXT, MA073JC073ShiyouKigen TEXT, MA074JC074SeibutsuYuraiSeihin TEXT, MA075JC075Kouhatsuhin TEXT, MA076JC076YakkaKijunShuusaiKubun TEXT, MA077JC077KichouGimuKubun TEXT, MA078JC078ShouhinKubun TEXT, MA079JC079ShohousenIyakuhin TEXT, MA080JC080ChuushiRiyuuKubun TEXT, MA081JC081MishiyouKyuuRyuutsuuKanrihin TEXT, MA082JC082MentenanceKubun TEXT, MA083JC083KouhatsuhinNoAruSenpatsuhinKubun TEXT, MA084JC084AuthorizedGeneric TEXT, MA085JC085Biosimilar TEXT, MA086JC086HighRiskYaku TEXT, MA087JC087Kuuran1 TEXT, MA088JC088Kuuran2 TEXT, MA089JC089Shitsuon TEXT, MA090JC090Reisho TEXT, MA091JC091Reizou TEXT, MA092JC092Reitou TEXT, MA093JC093Ansho TEXT, MA094JC094Shakou TEXT, MA095JC095KimitsuYouki TEXT, MA096JC096MippuuYouki TEXT, MA097JC097Kikenbutsu TEXT, MA098JC098OndoJougen TEXT, MA099JC099OndoKagen TEXT, MA100JC100SonotaHokanjouNoChui TEXT, MA101JC101KonpouJuuryouSizeJouhou TEXT, MA102JC102KonpouTateSizeJouhou TEXT, MA103JC103KonpouYokoSizeJouhou TEXT, MA104JC104KonpouTakasaSizeJouhou TEXT, MA105JC105KonpouTaiseiSizeJouhou TEXT, MA106JC106ChuubakoJuuryouSizeJouhou TEXT, MA107JC107ChuubakoTateSizeJouhou TEXT, MA108JC108ChuubakoYokoSizeJouhou TEXT, MA109JC109ChuubakoTakasaSizeJouhou TEXT, MA110JC110ChuubakoTaiseiSizeJouhou TEXT, MA111JC111KousouJuuryouSizeJouhou TEXT, MA112JC112KousouTateSizeJouhou TEXT, MA113JC113KousouYokoSizeJouhou TEXT, MA114JC114KousouTakasaSizeJouhou TEXT, MA115JC115KousouTaiseiSizeJouhou TEXT, MA116JC116KonpouTaniSizeJouhou TEXT, MA117JC117HacchuuTaniSizeJouhou TEXT, MA118JC118KoushinKubun TEXT, MA119JC119TourokuNengappi TEXT, MA120JC120KoushinNengappi TEXT, MA121JC121ChouzaiHousouTaniCode TEXT, MA122JC122HanbaiHousouTaniCode TEXT, MA123JC123IppanMeiKana TEXT, MA124JC124SaishouYakkaKansanKeisuu TEXT, MA125JA000 TEXT, MA126JA001JanCode TEXT, MA127JA002 TEXT, MA128JA003 TEXT, MA129JA004 TEXT, MA130JA005 TEXT, MA131JA006HousouSuuryouSuuchi TEXT, MA132JA007HousouSuuryouTaniCode TEXT, MA133JA008HousouSouryouSuuchi TEXT, MA134JA009 TEXT, MA135JA010 TEXT, MA136JA011 TEXT, MA137JA012 TEXT, MA138JA013 TEXT, MA139JA014 TEXT, MA140JA015 TEXT, MA141JA016 TEXT, MA142JA017 TEXT, MA143JA018 TEXT, MA144JA019 TEXT, MA145JA020 TEXT, MA146JA021 TEXT, MA147JA022 TEXT, MA148JA023 TEXT, MA149JA024 TEXT, MA150JA025 TEXT, MA151JA026 TEXT, MA152JA027 TEXT, MA153JA028 TEXT, MA154JA029 TEXT,   PRIMARY KEY(MA000JC000JanCode) );  CREATE TABLE IF NOT EXISTS jcshms ( JC000JanCode TEXT, JC001JanCodeShikibetsuKubun TEXT, JC002KyuuJanCode TEXT, JC003TouitsuShouhinCode TEXT, JC004YakkaKijunShuusaiIyakuhinCode TEXT, JC005KyuuYakkaKijunShuusaiIyakuhinCode TEXT, JC006HOTBangou TEXT, JC007ReseputoCode1 TEXT, JC008ReseputoCode2 TEXT, JC009YJCode TEXT, JC010YakkouBunruiCode TEXT, JC011YakkouBunruiMei TEXT, JC012ShiyouKubunCode TEXT, JC013ShiyouKubunMeishou TEXT, JC014NihonHyoujunShouhinBunruiBangou TEXT, JC015ZaikeiCode TEXT, JC016ZaikeiKigou TEXT, JC017ZaikeiMeishou TEXT, JC018ShouhinMei TEXT, JC019HankakuShouhinMei TEXT, JC020KikakuYouryou TEXT, JC021HankakuKikakuYouryou TEXT, JC022ShouhinMeiKanaSortYou TEXT, JC023ShouhinMeiKanpouYouKigou TEXT, JC024IppanMeishou TEXT, JC025YakkaShuusaiMeishou TEXT, JC026ReseYouIyakuhinMei TEXT, JC027KikakuTaniMeishou TEXT, JC028KikakuTaniKigou TEXT, JC029HanbaiMotoCode TEXT, JC030HanbaiMotoMei TEXT, JC031HanbaiMotoMeiKana TEXT, JC032HanbaiMotoMeiRyakuMei TEXT, JC033SeizouMotoYunyuuMotoCode TEXT, JC034SeizouMotoYunyuuMotoMei TEXT, JC035SeizouMotoYunyuuMotoMeiKana TEXT, JC036SeizouMotoYunyuuMotoMeiRyakuMei TEXT, JC037HousouKeitai TEXT, JC038HousouTaniSuuchi TEXT, JC039HousouTaniTani TEXT, JC040HousouSuuryouSuuchi TEXT, JC041HousouSuuryouTani TEXT, JC042HousouIrisuuSuuchi TEXT, JC043HousouIrisuuTani TEXT, JC044HousouSouryouSuuchi TEXT, JC045HousouSouryouTani TEXT, JC046HousouYouryouSuuchi TEXT, JC047HousouYouryouTani TEXT, JC048HousouYakkaKeisuu TEXT, JC049GenTaniYakka TEXT, JC050GenHousouYakka TEXT, JC051KyuuTaniYakka TEXT, JC052KyuuHousouYakka TEXT, JC053KokuchiTaniYakka TEXT, JC054KokuchiHousouYakka TEXT, JC055YakkaKaiteiNengappi TEXT, JC056YakkaShuusaiNengappi TEXT, JC057HanbaiKaishiNengappi TEXT, JC058KeikaSochiNengappi TEXT, JC059HatsubaiChuushiNengappi TEXT, JC060SeizouChuushiNengappi TEXT, JC061Doyaku TEXT, JC062Gekiyaku TEXT, JC063Mayaku TEXT, JC064Kouseishinyaku TEXT, JC065Kakuseizai TEXT, JC066KakuseizaiGenryou TEXT, JC067ShuukanseiIyakuhin TEXT, JC068ShiteiIyakuhinKyuuKiseiKubun TEXT, JC069YoushijiIyakuhinKyuuKiseiKubun TEXT, JC070KetsuekiSeizai TEXT, JC071NihonYakkyokuhou TEXT, JC072YuukouKikan TEXT, JC073ShiyouKigen TEXT, JC074SeibutsuYuraiSeihin TEXT, JC075Kouhatsuhin TEXT, JC076YakkaKijunShuusaiKubun TEXT, JC077KichouGimuKubun TEXT, JC078ShouhinKubun TEXT, JC079ShohousenIyakuhin TEXT, JC080ChuushiRiyuuKubun TEXT, JC081MishiyouKyuuRyuutsuuKanrihin TEXT, JC082MentenanceKubun TEXT, JC083KouhatsuhinNoAruSenpatsuhinKubun TEXT, JC084AuthorizedGeneric TEXT, JC085Biosimilar TEXT, JC086HighRiskYaku TEXT, JC087Kuuran1 TEXT, JC088Kuuran2 TEXT, JC089Shitsuon TEXT, JC090Reisho TEXT, JC091Reizou TEXT, JC092Reitou TEXT, JC093Ansho TEXT, JC094Shakou TEXT, JC095KimitsuYouki TEXT, JC096MippuuYouki TEXT, JC097Kikenbutsu TEXT, JC098OndoJougen TEXT, JC099OndoKagen TEXT, JC100SonotaHokanjouNoChui TEXT, JC101KonpouJuuryouSizeJouhou TEXT, JC102KonpouTateSizeJouhou TEXT, JC103KonpouYokoSizeJouhou TEXT, JC104KonpouTakasaSizeJouhou TEXT, JC105KonpouTaiseiSizeJouhou TEXT, JC106ChuubakoJuuryouSizeJouhou TEXT, JC107ChuubakoTateSizeJouhou TEXT, JC108ChuubakoYokoSizeJouhou TEXT, JC109ChuubakoTakasaSizeJouhou TEXT, JC110ChuubakoTaiseiSizeJouhou TEXT, JC111KousouJuuryouSizeJouhou TEXT, JC112KousouTateSizeJouhou TEXT, JC113KousouYokoSizeJouhou TEXT, JC114KousouTakasaSizeJouhou TEXT, JC115KousouTaiseiSizeJouhou TEXT, JC116KonpouTaniSizeJouhou TEXT, JC117HacchuuTaniSizeJouhou TEXT, JC118KoushinKubun TEXT, JC119TourokuNengappi TEXT, JC120KoushinNengappi TEXT, JC121ChouzaiHousouTaniCode TEXT, JC122HanbaiHousouTaniCode TEXT, JC123IppanMeiKana TEXT, JC124SaishouYakkaKansanKeisuu TEXT, PRIMARY KEY(JC000JanCode) );  CREATE TABLE IF NOT EXISTS jancode ( JA000 TEXT, JA001JanCode TEXT, JA002 TEXT, JA003 TEXT, JA004 TEXT, JA005 TEXT, JA006HousouSuuryouSuuchi TEXT, JA007HousouSuuryouTaniCode TEXT, JA008HousouSouryouSuuchi TEXT, JA009 TEXT, JA010 TEXT, JA011 TEXT, JA012 TEXT, JA013 TEXT, JA014 TEXT, JA015 TEXT, JA016 TEXT, JA017 TEXT, JA018 TEXT, JA019 TEXT, JA020 TEXT, JA021 TEXT, JA022 TEXT, JA023 TEXT, JA024 TEXT, JA025 TEXT, JA026 TEXT, JA027 TEXT, JA028 TEXT, JA029 TEXT, PRIMARY KEY(JA001JanCode) );  CREATE TABLE IF NOT EXISTS datrecords (   CurrentOroshiCode         TEXT,   DatDate               TEXT,   DatDeliveryFlag       TEXT,   DatReceiptNumber      TEXT,   DatLineNumber         TEXT,   DatJanCode            TEXT,   DatProductName        TEXT,   DatQuantity           TEXT,   DatUnitPrice          TEXT,   DatSubtotal           TEXT,   DatPackagingDrugPrice TEXT,   DatExpiryDate         TEXT,   DatLotNumber          TEXT,   organizedFlag         INTEGER );    CREATE TABLE IF NOT EXISTS usagerecords (     usageDate         TEXT,     usageYjCode       TEXT,     usageJanCode      TEXT,     usageProductName  TEXT,     usageAmount       TEXT,     usageUnit         TEXT,     usageUnitName     TEXT,     organizedFlag     INTEGER NOT NULL DEFAULT 0, -- 1: organized, 0: disorganized     PRIMARY KEY (usageDate, usageYjCode, usageJanCode) ); 

