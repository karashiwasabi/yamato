----- C:\Dev\YAMATO\aggregate\aggregate.go -----
package aggregate  import ( 	"database/sql" 	"encoding/json" 	"log" 	"net/http" 	"net/url" 	"sort" 	"strconv" 	"strings"  	"YAMATO/usage" )  var DB *sql.DB  // SetDB は main から DB を受け取ります func SetDB(db *sql.DB) { 	DB = db }  // Detail は /aggregate が返す明細行 type Detail struct { 	YJ            string `json:"yj"` 	ProductName   string `json:"productName"` 	Date          string `json:"date"` 	Type          string `json:"type"` 	Quantity      string `json:"quantity"` 	Unit          string `json:"unit"` 	Packaging     string `json:"packaging"` 	Count         string `json:"count"` 	UnitPrice     string `json:"unitPrice"` 	Subtotal      string `json:"subtotal"` 	ExpiryDate    string `json:"expiryDate"` 	LotNumber     string `json:"lotNumber"` 	OroshiCode    string `json:"oroshiCode"` 	ReceiptNumber string `json:"receiptNumber"` 	LineNumber    string `json:"lineNumber"`  	// 内部用 	RawCount     string `json:"-"` 	HK           string `json:"-"` 	HS           string `json:"-"` 	HU           string `json:"-"` 	JSN          string `json:"-"` 	JSU          string `json:"-"` 	JSSN         string `json:"-"` 	PackagingKey string `json:"-"` }  // YJResult は YJ コード単位のまとめ type YJResult struct { 	ProductName string              `json:"productName"` 	Groups      map[string][]Detail `json:"groups"` }  // parseParams は from/to とフィルタを取得 func parseParams(r *http.Request) (from, to string, q url.Values, errMsg string, code int) { 	q = r.URL.Query() 	fr, tr := q.Get("from"), q.Get("to") 	if fr == "" || tr == "" { 		return "", "", nil, "from/to は必須です", http.StatusBadRequest 	} 	from = strings.ReplaceAll(fr, "-", "") 	to = strings.ReplaceAll(tr, "-", "") 	return from, to, q, "", 0 }  // fetchDatDetails は DAT レコードを取り Detail に変換 func fetchDatDetails(from, to string, q url.Values) ([]Detail, error) { 	var details []Detail 	args := []interface{}{from, to} 	sb := &strings.Builder{} 	sb.WriteString(` SELECT   -- YJ: MA0 → MA2 フォールバック   COALESCE(NULLIF(m.MA009JC009YJCode,''), m2.MA2YjCode, '')                  AS yj,   -- 商品名: MA0 → MA2   COALESCE(NULLIF(m.MA018JC018ShouhinMei,''), m2.Shouhinmei, '')            AS productName,   d.DatDate                                                               AS date,   CASE d.DatDeliveryFlag WHEN '1' THEN '納品'                          WHEN '2' THEN '返品'                          ELSE d.DatDeliveryFlag END                         AS type,   d.DatQuantity                                                           AS rawCount,   -- 単位（包装単位コード→名称は Go 側で補完）   COALESCE(NULLIF(m.MA039JC039HousouTaniTani,''), m2.HousouTaniUnit, '')    AS unit,   ''                                                                       AS packaging,   d.DatUnitPrice                                                           AS unitPrice,   d.DatSubtotal                                                            AS subtotal,   d.DatExpiryDate                                                          AS expiryDate,   d.DatLotNumber                                                           AS lotNumber,   d.CurrentOroshiCode                                                      AS oroshiCode,   d.DatReceiptNumber                                                       AS receiptNumber,   d.DatLineNumber                                                          AS lineNumber,   -- 包装情報: MA0 → MA2   COALESCE(NULLIF(m.MA037JC037HousouKeitai,''), m2.HousouKeitai, '')       AS hk,   COALESCE(NULLIF(m.MA044JC044HousouSouryouSuuchi,''), CAST(m2.HousouSouryouNumber AS TEXT), '') AS hs,   COALESCE(NULLIF(m.MA039JC039HousouTaniTani,''), m2.HousouTaniUnit, '')    AS hu,   COALESCE(NULLIF(m.MA131JA006HousouSuuryouSuuchi,''), CAST(m2.JanHousouSuuryouNumber AS TEXT), '') AS jsn,   COALESCE(NULLIF(m.MA132JA007HousouSuuryouTaniCode,''), m2.JanHousouSuuryouUnit, '')   AS jsu,   COALESCE(NULLIF(m.MA133JA008HousouSouryouSuuchi,''), CAST(m2.JanHousouSouryouNumber AS TEXT), '')    AS jssn FROM datrecords d LEFT JOIN ma0 m  ON d.DatJanCode = m.MA000JC000JanCode LEFT JOIN ma2 m2 ON d.DatJanCode = m2.MA2JanCode WHERE d.DatDate BETWEEN ? AND ? `) 	if f := q.Get("filter"); f != "" { 		sb.WriteString(" AND COALESCE(NULLIF(m.MA018JC018ShouhinMei,''), m2.Shouhinmei) LIKE ?")  		args = append(args, "%"+f+"%") 	} 	for _, c := range []struct{ name, col string }{ 		{"doyaku", "MA061JC061Doyaku"}, 		{"gekiyaku", "MA062JC062Gekiyaku"}, 		{"mayaku", "MA063JC063Mayaku"}, 		{"kakuseizai", "MA065JC065Kakuseizai"}, 		{"kakuseizaiGenryou", "MA066JC066KakuseizaiGenryou"}, 	} { 		if q.Get(c.name) == "1" { 			sb.WriteString(" AND m." + c.col + "='1'") 		} 	} 	if ks := q.Get("kouseishinyaku"); ks != "" { 		parts := strings.Split(ks, ",") 		ph := make([]string, len(parts)) 		for i, v := range parts { 			ph[i] = "?" 			args = append(args, v) 		} 		sb.WriteString(" AND m.MA064JC064Kouseishinyaku IN(" + strings.Join(ph, ",") + ")") 	}  	query := sb.String() 	log.Printf("▶ DAT SQL: %s\n   args=%v", query, args)  	rows, err := DB.Query(query, args...) 	if err != nil { 		log.Printf("▶ DAT Query error: %v", err) 		return nil, err 	} 	defer rows.Close()  	for rows.Next() { 		var d Detail 		if err := rows.Scan( 			&d.YJ, &d.ProductName, &d.Date, &d.Type, 			&d.RawCount, &d.Unit, &d.Packaging, 			&d.UnitPrice, &d.Subtotal, &d.ExpiryDate, 			&d.LotNumber, &d.OroshiCode, &d.ReceiptNumber, &d.LineNumber, 			&d.HK, &d.HS, &d.HU, &d.JSN, &d.JSU, &d.JSSN, 		); err != nil { 			log.Printf("▶ DAT Scan error: %v", err) 			continue 		} 		// 単位・包装単位コード→名称 		if nm := usage.GetTaniName(d.Unit); nm != "" { 			d.Unit = nm 		} 		if nm := usage.GetTaniName(d.HU); nm != "" { 			d.HU = nm 		}  		// 数量計算 		hsVal, _ := strconv.Atoi(strings.TrimLeft(d.HS, "0")) 		rcVal, _ := strconv.Atoi(strings.TrimLeft(d.RawCount, "0")) 		d.Quantity = strconv.Itoa(hsVal * rcVal) 		d.Count = d.RawCount  		// Packaging文字列 		inner := d.JSN + d.HU + "×" + d.JSSN 		if d.JSU != "" && d.JSU != "0" { 			if nm := usage.GetTaniName(d.JSU); nm != "" { 				inner += nm 			} 		} 		d.Packaging = d.HK + d.HS + d.HU + "(" + inner + ")"  		details = append(details, d) 	} 	return details, nil }  // fetchUsageDetails は USAGE レコードを取り Detail に変換 func fetchUsageDetails(from, to string, q url.Values) ([]Detail, error) { 	var details []Detail 	args := []interface{}{from, to} 	sb := &strings.Builder{} 	sb.WriteString(` SELECT   u.usageDate                                               AS date,   -- YJ フォールバック   COALESCE(NULLIF(m.MA009JC009YJCode,''), m2.MA2YjCode, '') AS yj,   -- 商品名 フォールバック   COALESCE(NULLIF(m.MA018JC018ShouhinMei,''), m2.Shouhinmei, '') AS productName,   u.usageAmount                                            AS rawCount,   u.usageUnitName                                          AS unit,   COALESCE(NULLIF(m.MA037JC037HousouKeitai,''), m2.HousouKeitai, '')        AS hk,   COALESCE(NULLIF(m.MA044JC044HousouSouryouSuuchi,''), CAST(m2.HousouSouryouNumber AS TEXT), '') AS hs,   COALESCE(NULLIF(m.MA039JC039HousouTaniTani,''), m2.HousouTaniUnit, '')    AS hu,   COALESCE(NULLIF(m.MA131JA006HousouSuuryouSuuchi,''), CAST(m2.JanHousouSuuryouNumber AS TEXT), '') AS jsn,   COALESCE(NULLIF(m.MA132JA007HousouSuuryouTaniCode,''), m2.JanHousouSuuryouUnit, '')   AS jsu,   COALESCE(NULLIF(m.MA133JA008HousouSouryouSuuchi,''), CAST(m2.JanHousouSouryouNumber AS TEXT), '')    AS jssn FROM usagerecords u LEFT JOIN ma0 m  ON u.usageJanCode = m.MA000JC000JanCode LEFT JOIN ma2 m2 ON u.usageJanCode = m2.MA2JanCode WHERE u.usageDate BETWEEN ? AND ? `) 	if f := q.Get("filter"); f != "" { 		sb.WriteString(" AND COALESCE(NULLIF(m.MA018JC018ShouhinMei,''), m2.Shouhinmei) LIKE ?")  		args = append(args, "%"+f+"%") 	} 	for _, c := range []struct{ name, col string }{ 		{"doyaku", "MA061JC061Doyaku"}, 		{"gekiyaku", "MA062JC062Gekiyaku"}, 		{"mayaku", "MA063JC063Mayaku"}, 		{"kakuseizai", "MA065JC065Kakuseizai"}, 		{"kakuseizaiGenryou", "MA066JC066KakuseizaiGenryou"}, 	} { 		if q.Get(c.name) == "1" { 			sb.WriteString(" AND m." + c.col + "='1'") 		} 	} 	if ks := q.Get("kouseishinyaku"); ks != "" { 		parts := strings.Split(ks, ",") 		ph := make([]string, len(parts)) 		for i, v := range parts { 			ph[i] = "?" 			args = append(args, v) 		} 		sb.WriteString(" AND m.MA064JC064Kouseishinyaku IN(" + strings.Join(ph, ",") + ")") 	}  	query := sb.String() 	log.Printf("▶ USAGE SQL: %s\n   args=%v", query, args)  	rows, err := DB.Query(query, args...) 	if err != nil { 		log.Printf("▶ USAGE Query error: %v", err) 		return nil, err 	} 	defer rows.Close()  	for rows.Next() { 		var d Detail 		var rawCount, unitName string 		if err := rows.Scan( 			&d.Date, &d.YJ, &d.ProductName, 			&rawCount, &unitName, 			&d.HK, &d.HS, &d.HU, &d.JSN, &d.JSU, &d.JSSN, 		); err != nil { 			log.Printf("▶ USAGE Scan error: %v", err) 			continue 		} 		d.Type = "処方" 		d.Quantity = rawCount 		d.Unit = unitName 		if nm := usage.GetTaniName(d.HU); nm != "" { 			d.HU = nm 		} 		d.Count = ""  		inner := d.JSN + d.HU + "×" + d.JSSN 		if d.JSU != "" && d.JSU != "0" { 			if nm := usage.GetTaniName(d.JSU); nm != "" { 				inner += nm 			} 		} 		d.Packaging = d.HK + d.HS + d.HU + "(" + inner + ")"  		details = append(details, d) 	} 	return details, nil }  // groupDetails は Detail を YJ→PackagingKey でまとめる func groupDetails(details []Detail) map[string]YJResult { 	tmp := make(map[string]map[string][]Detail) 	for i := range details { 		d := &details[i] 		d.PackagingKey = d.HK + d.JSN + d.HU 		if tmp[d.YJ] == nil { 			tmp[d.YJ] = make(map[string][]Detail) 		} 		tmp[d.YJ][d.PackagingKey] = append(tmp[d.YJ][d.PackagingKey], *d) 	} 	for _, pkMap := range tmp { 		for pk, list := range pkMap { 			sort.Slice(list, func(i, j int) bool { 				return list[i].Date < list[j].Date 			}) 			pkMap[pk] = list 		} 	} 	resp := make(map[string]YJResult, len(tmp)) 	for yj, pkMap := range tmp { 		name := "" 		for _, list := range pkMap { 			if len(list) > 0 { 				name = list[0].ProductName 				break 			} 		} 		resp[yj] = YJResult{ProductName: name, Groups: pkMap} 	} 	return resp }  // renderResponse は JSON レスポンスを返す func renderResponse(w http.ResponseWriter, data map[string]YJResult) error { 	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	return json.NewEncoder(w).Encode(data) }  // AggregateHandler は /aggregate エンドポイント func AggregateHandler(w http.ResponseWriter, r *http.Request) { 	defer func() { 		if rec := recover(); rec != nil { 			log.Printf("[AGGREGATE panic] %v", rec) 			http.Error(w, "Internal Server Error", http.StatusInternalServerError) 		} 	}()  	from, to, q, errMsg, code := parseParams(r) 	if errMsg != "" { 		log.Printf("[AGGREGATE] invalid params: %s", errMsg) 		http.Error(w, errMsg, code) 		return 	}  	dats, err := fetchDatDetails(from, to, q) 	if err != nil { 		log.Printf("[AGGREGATE] fetchDatDetails error: %v", err) 		http.Error(w, "DAT Query error: "+err.Error(), http.StatusInternalServerError) 		return 	}  	usgs, err := fetchUsageDetails(from, to, q) 	if err != nil { 		log.Printf("[AGGREGATE] fetchUsageDetails error: %v", err) 		http.Error(w, "USAGE Query error: "+err.Error(), http.StatusInternalServerError) 		return 	}  	all := append(dats, usgs...) 	resp := groupDetails(all)  	if err := renderResponse(w, resp); err != nil { 		log.Printf("[AGGREGATE] renderResponse error: %v", err) 	} }

----- C:\Dev\YAMATO\dat\dat.go -----
// File: YAMATO/dat/dat.go package dat  import ( 	"bufio" 	"fmt" 	"io" 	"log" 	"strconv" 	"strings"  	"YAMATO/jcshms" 	"YAMATO/ma0" 	"YAMATO/model"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // getOrganizedFlag は JAN が JCShms マスターにあれば1、なければ0を返します。 func getOrganizedFlag(jan string) (int, error) { 	recs, err := jcshms.QueryByJan(ma0.DB, jan) 	if err != nil { 		return 0, fmt.Errorf("jcshms.QueryByJan error: %w", err) 	} 	if len(recs) > 0 { 		return 1, nil 	} 	return 0, nil }  // ParseDATFile は DAT ファイルを読み込み、 // model.DATRecord スライスと統計値を返します。 // MA0 未登録品はすべて MA2 テーブルに登録します。 func ParseDATFile( 	r io.Reader, ) ( 	records []model.DATRecord, 	totalCount, ma0CreatedCount, duplicateCount int, 	err error, ) { 	scanner := bufio.NewScanner(r) 	var currentOroshiCode string  	// 固定長フィールド取得ヘルパー 	getField := func(s string, start, end int) string { 		if len(s) >= end { 			return s[start:end] 		} else if len(s) > start { 			return s[start:] 		} 		return "" 	}  	for scanner.Scan() { 		line := scanner.Text() 		if len(line) < 3 { 			continue 		} 		if strings.HasPrefix(line, "S20") { 			currentOroshiCode = strings.TrimSpace(getField(line, 3, 12)) 			continue 		} 		if !strings.HasPrefix(line, "D20") { 			continue 		} 		totalCount++  		// DATRecord 組み立て 		datDate := getField(line, 4, 12) 		datFlag := getField(line, 3, 4) 		datRecNo := getField(line, 12, 22) 		datLineNo := getField(line, 22, 24) 		datJan := getField(line, 25, 38) 		rawName := getField(line, 38, 78) 		name, _, convErr := transform.String(japanese.ShiftJIS.NewDecoder(), rawName) 		if convErr != nil { 			name = rawName 		} 		datQty := getField(line, 78, 83) 		datUnit := getField(line, 83, 92) 		datSub := getField(line, 92, 101) 		datPkg := getField(line, 101, 109) 		datExp := getField(line, 109, 115) 		datLot := getField(line, 115, 121)  		rec := model.DATRecord{ 			CurrentOroshiCode: currentOroshiCode, 			DatDate:           datDate, 			DatFlag:           datFlag, 			DatRecNo:          datRecNo, 			DatLineNo:         datLineNo, 			DatJan:            datJan, 			DatProductName:    name, 			DatQty:            datQty, 			DatUnit:           datUnit, 			DatSub:            datSub, 			DatPkg:            datPkg, 			DatExp:            datExp, 			DatLot:            datLot, 		} 		records = append(records, rec)  		// datrecords テーブル挿入＋organizedFlag 集計 		flag, fgErr := getOrganizedFlag(datJan) 		if fgErr != nil { 			log.Printf("[DAT] OrganizedFlag error JAN=%q: %v", datJan, fgErr) 			flag = 0 		} 		if err := ma0.InsertDATRecord(ma0.DB, rec, flag); err != nil { 			log.Printf("[DAT] InsertDATRecord error: %v", err) 		} 		if flag == 1 { 			// organized 		} else { 			duplicateCount++ 		}  		// MA0 連携／MA2 登録 		ma0Rec, created, err0 := ma0.CheckOrCreateMA0(datJan) 		if err0 != nil { 			log.Printf("[DAT] MA0 lookup error JAN=%s: %v", datJan, err0) 		} 		if created { 			ma0CreatedCount++ 		} 		// マスター未登録品は MA2 に登録 		if !created && ma0Rec.MA018JC018ShouhinMei == "" { 			hs, _ := strconv.Atoi(ma0Rec.MA044JC044HousouSouryouSuuchi) 			jsn, _ := strconv.Atoi(ma0Rec.MA131JA006HousouSuuryouSuuchi) 			jssn, _ := strconv.Atoi(ma0Rec.MA133JA008HousouSouryouSuuchi) 			mrec := &ma0.MARecord{ 				JanCode:                datJan, 				ProductName:            name, 				HousouKeitai:           ma0Rec.MA037JC037HousouKeitai, 				HousouTaniUnit:         ma0Rec.MA038JC038HousouTaniSuuchi, 				HousouSouryouNumber:    hs, 				JanHousouSuuryouNumber: jsn, 				JanHousouSuuryouUnit:   ma0Rec.MA132JA007HousouSuuryouTaniCode, 				JanHousouSouryouNumber: jssn, 			} 			_, _, err2 := ma0.RegisterMA(ma0.DB, mrec) 			if err2 != nil { 				log.Printf("[DAT] MA2 registration error JAN=%s: %v", datJan, err2) 			} 		} 	}  	if scanErr := scanner.Err(); scanErr != nil { 		err = scanErr 	} 	return }

----- C:\Dev\YAMATO\inout\inout.go -----
// File: YAMATO/inout/inout.go package inout  import ( 	"database/sql" 	"encoding/json" 	"log" 	"net/http"  	"YAMATO/ma0" )  var DB *sql.DB  // InoutRecord は得意先マスターを表します type InoutRecord struct { 	InoutCode  string `json:"inoutcode"` 	Name       string `json:"name"` 	OroshiCode string `json:"oroshicode"` }  // ProductRec は /api/inout/search の結果レコードです type ProductRec struct { 	YJ              string  `json:"yj"` 	Jan             string  `json:"jan"` 	Name            string  `json:"name"` 	Spec            string  `json:"spec"` 	PackQtyNumber   float64 `json:"packQtyNumber"` 	PackQtyUnitCode int     `json:"packQtyUnitCode"` 	PackTotal       float64 `json:"packTotal"` 	Coef            float64 `json:"coef"` 	UnitName        string  `json:"unitName"` 	UnitYaku        float64 `json:"unitYaku"` }  // IODRecord は出庫・入庫明細DTOです type IODRecord struct { 	IodJan           string  `json:"iodJan"` 	IodDate          string  `json:"iodDate"` 	IodType          string  `json:"iodType"` 	IodJanQuantity   float64 `json:"iodJanQuantity"` 	IodJanUnit       string  `json:"iodJanUnit"` 	IodQuantity      float64 `json:"iodQuantity"` 	IodUnit          string  `json:"iodUnit"` 	IodPackaging     string  `json:"iodPackaging"` 	IodUnitPrice     float64 `json:"iodUnitPrice"` 	IodSubtotal      float64 `json:"iodSubtotal"` 	IodExpiryDate    string  `json:"iodExpiryDate"` 	IodLotNumber     string  `json:"iodLotNumber"` 	IodOroshiCode    string  `json:"iodOroshiCode"` 	IodReceiptNumber string  `json:"iodReceiptNumber"` 	IodLineNumber    int     `json:"iodLineNumber"` }  // Handler は /api/inout の GET/POST を処理します func Handler(w http.ResponseWriter, r *http.Request) { 	switch r.Method { 	case http.MethodGet: 		listClients(w) 	case http.MethodPost: 		saveClient(w, r) 	default: 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 	} }  // listClients は得意先一覧を返却します func listClients(w http.ResponseWriter) { 	rows, err := DB.Query(`SELECT inoutcode, name, oroshicode FROM inout ORDER BY inoutcode`) 	if err != nil { 		http.Error(w, err.Error(), http.StatusInternalServerError) 		return 	} 	defer rows.Close()  	var out []InoutRecord 	for rows.Next() { 		var rec InoutRecord 		if err := rows.Scan(&rec.InoutCode, &rec.Name, &rec.OroshiCode); err != nil { 			log.Println("inout scan error:", err) 			continue 		} 		out = append(out, rec) 	}  	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	json.NewEncoder(w).Encode(out) }  // saveClient は POST で送られてきた得意先を inout テーブルに登録します func saveClient(w http.ResponseWriter, r *http.Request) { 	var req struct { 		Name       string `json:"name"` 		OroshiCode string `json:"oroshicode"` 	} 	if err := json.NewDecoder(r.Body).Decode(&req); err != nil { 		http.Error(w, "Bad Request", http.StatusBadRequest) 		return 	}  	// シーケンス発行 	seq, err := ma0.NextSequence(DB, "INOUT") 	if err != nil { 		log.Println("INOUT sequence error:", err) 		http.Error(w, "Sequence Error", http.StatusInternalServerError) 		return 	}  	// inout テーブルに挿入 	if _, err := DB.Exec( 		`INSERT INTO inout(inoutcode, name, oroshicode) VALUES(?,?,?)`, 		seq, req.Name, req.OroshiCode, 	); err != nil { 		log.Println("inout insert error:", err) 		http.Error(w, "Insert Error", http.StatusInternalServerError) 		return 	}  	w.WriteHeader(http.StatusNoContent) }  // ProductSearchHandler は /api/inout/search を実装します func ProductSearchHandler(w http.ResponseWriter, r *http.Request) { 	q := r.URL.Query() 	name := "%" + q.Get("name") + "%" 	spec := "%" + q.Get("spec") + "%"  	rows, err := DB.Query(`     SELECT       j.JC009YJCode,       j.JC000JanCode,       j.JC018ShouhinMei,       j.JC020KikakuYouryou AS spec,       m2.JA006HousouSuuryouSuuchi   AS packQtyNumber,       m2.JA007HousouSuuryouTaniCode AS packQtyUnitCode,       j.JC044HousouSouryouSuuchi     AS packTotal,       COALESCE(NULLIF(j.JC048HousouYakkaKeisuu, ''), '0') AS coef         AS coef,       j.JC039HousouTaniTani          AS unitName,       j.JC049GenTaniYakka            AS unitYaku     FROM jcshms AS j     LEFT JOIN jancode AS m2       ON j.JC000JanCode = m2.JA001JanCode     WHERE j.JC018ShouhinMei LIKE ?       AND j.JC020KikakuYouryou LIKE ?     LIMIT 100   `, name, spec) 	if err != nil { 		http.Error(w, err.Error(), http.StatusInternalServerError) 		return 	} 	defer rows.Close()  	var out []ProductRec 	for rows.Next() { 		var p ProductRec 		if err := rows.Scan( 			&p.YJ, &p.Jan, &p.Name, &p.Spec, 			&p.PackQtyNumber, &p.PackQtyUnitCode, 			&p.PackTotal, &p.Coef, 			&p.UnitName, &p.UnitYaku, 		); err != nil { 			log.Println("search scan error:", err) 			continue 		} 		out = append(out, p) 	}  	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	json.NewEncoder(w).Encode(out) }  // SaveIODHandler は /api/inout/save で明細を受け取り DB に登録します func SaveIODHandler(w http.ResponseWriter, r *http.Request) { 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	}  	var recs []IODRecord 	if err := json.NewDecoder(r.Body).Decode(&recs); err != nil { 		http.Error(w, "Bad Request", http.StatusBadRequest) 		return 	} 	log.Printf("SaveIOD payload: %+v\n", recs)  	tx, err := DB.Begin() 	if err != nil { 		http.Error(w, "DB Error", http.StatusInternalServerError) 		return 	} 	defer tx.Rollback()  	stmt, err := tx.Prepare(`     INSERT OR REPLACE INTO iod (       iodJan, iodDate, iodType,       iodJanQuantity, iodJanUnit,       iodQuantity, iodUnit,       iodPackaging, iodUnitPrice, iodSubtotal,       iodExpiryDate, iodLotNumber,       iodOroshiCode, iodReceiptNumber, iodLineNumber     ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)   `) 	if err != nil { 		http.Error(w, "Prepare Error", http.StatusInternalServerError) 		return 	} 	defer stmt.Close()  	for _, v := range recs { 		if v.IodJan == "" || v.IodQuantity == 0 { 			continue 		} 		if _, err := stmt.Exec( 			v.IodJan, v.IodDate, v.IodType, 			v.IodJanQuantity, v.IodJanUnit, 			v.IodQuantity, v.IodUnit, 			v.IodPackaging, v.IodUnitPrice, v.IodSubtotal, 			v.IodExpiryDate, v.IodLotNumber, 			v.IodOroshiCode, v.IodReceiptNumber, v.IodLineNumber, 		); err != nil { 			log.Println("iod insert error:", err) 			continue 		} 	}  	if err := tx.Commit(); err != nil { 		http.Error(w, "Commit Error", http.StatusInternalServerError) 		return 	} 	w.WriteHeader(http.StatusNoContent) }

----- C:\Dev\YAMATO\inventory\inventory.go -----
// C:/Dev/YAMATO/inventory/inventory.go package inventory  import ( 	"encoding/csv" 	"encoding/json" 	"fmt" 	"io" 	"log" 	"net/http" 	"strconv" 	"strings"  	"YAMATO/jcshms" 	"YAMATO/ma0" 	"YAMATO/ma2" 	"YAMATO/tani" 	"YAMATO/usage"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // trimQS は前後のクォート・空白を削除 func trimQS(s string) string { 	return strings.Trim(s, `"' `) }  // InventoryRecord は CSV の１行分 type InventoryRecord struct { 	InvDate                   string  // 棚卸日 	InvYjCode                 string  // YJコード 	InvJanCode                string  // JANコード 	InvProductName            string  // 商品名 	InvJanHousouSuuryouNumber float64 // JAN包装数量 	Qty                       float64 // 在庫数(包装単位) 	HousouTaniUnit            string  // 包装単位(名称) 	InvHousouTaniUnit         string  // 包装単位(コード) 	JanQty                    float64 // 在庫数(JAN包装単位) 	JanHousouSuuryouUnit      string  // JAN包装数量単位(名称) 	InvJanHousouSuuryouUnit   string  // JAN包装数量単位(コード) }  // ParseInventoryCSV は Shift-JIS から UTF-8 変換しつつ CSV を読み込む func ParseInventoryCSV(r io.Reader) ([]InventoryRecord, error) { 	rd := csv.NewReader(transform.NewReader(r, japanese.ShiftJIS.NewDecoder())) 	rd.LazyQuotes = true 	rd.FieldsPerRecord = -1  	// 1行目: H行から日付を取得 	hrow, err := rd.Read() 	if err != nil { 		return nil, fmt.Errorf("inventory: H行読み込みエラー: %w", err) 	} 	if len(hrow) <= 4 { 		return nil, fmt.Errorf("inventory: H行の列不足") 	} 	date := trimQS(hrow[4])  	var recs []InventoryRecord 	for { 		parts, err := rd.Read() 		if err == io.EOF { 			break 		} 		if err != nil { 			return nil, fmt.Errorf("inventory: CSV読み込みエラー: %w", err) 		} 		if len(parts) <= 45 { 			continue 		}  		yj := trimQS(parts[42])   // R43 		jan := trimQS(parts[45])  // R46 		name := trimQS(parts[12]) // R13  		jps, _ := strconv.ParseFloat(trimQS(parts[17]), 64) 		baseQty, _ := strconv.ParseFloat(trimQS(parts[21]), 64) 		qty := baseQty * jps 		janQty, _ := strconv.ParseFloat(trimQS(parts[21]), 64)  		rawPack := trimQS(parts[16])    // R17 		rawJanUnit := trimQS(parts[23]) // R24  		recs = append(recs, InventoryRecord{ 			InvDate:                   date, 			InvYjCode:                 yj, 			InvJanCode:                jan, 			InvProductName:            name, 			InvJanHousouSuuryouNumber: jps, 			Qty:                       qty, 			HousouTaniUnit:            rawPack, 			InvHousouTaniUnit:         rawPack, 			JanQty:                    janQty, 			JanHousouSuuryouUnit:      rawJanUnit, 			InvJanHousouSuuryouUnit:   rawJanUnit, 		}) 	} 	return recs, nil }  // UploadInventoryHandler は棚卸CSVを受け取って //  1. inventory テーブルにUPSERT //  2. JCSHMS未登録のみMA2にUpsert // // を実行します。 func UploadInventoryHandler(w http.ResponseWriter, r *http.Request) { 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	} 	file, _, err := r.FormFile("inventoryFile") 	if err != nil { 		http.Error(w, "ファイルが指定されていません", http.StatusBadRequest) 		return 	} 	defer file.Close()  	// CSVパース 	recs, err := ParseInventoryCSV(file) 	if err != nil { 		http.Error(w, "CSV読み込みエラー: "+err.Error(), http.StatusBadRequest) 		return 	}  	// 名称→コードマップ 	nameToCode := tani.BuildNameToCodeMap(usage.GetTaniMap())  	for i := range recs { 		rec := &recs[i]  		// MA0 登録／取得（YJコード取得用） 		maRec, _, err := ma0.CheckOrCreateMA0(rec.InvJanCode) 		if err != nil { 			log.Printf("[INVENTORY] MA0 error JAN=%s: %v", rec.InvJanCode, err) 			continue 		} 		rec.InvYjCode = maRec.MA009JC009YJCode  		// 在庫テーブル用：名称→コード 		rawPack := strings.Trim(rec.HousouTaniUnit, `"' `) 		if code, ok := nameToCode[rawPack]; ok { 			rec.InvHousouTaniUnit = code 		} 		rawJan := strings.Trim(rec.JanHousouSuuryouUnit, `"' `) 		if code, ok := nameToCode[rawJan]; ok { 			rec.InvJanHousouSuuryouUnit = code 		}  		// inventory UPSERT 		prod := maRec.MA018JC018ShouhinMei 		if prod == "" { 			prod = rec.InvProductName 		} 		if _, err := ma0.DB.Exec( 			`INSERT OR REPLACE INTO inventory          (invDate, invYjCode, invJanCode, invProductName,           invJanHousouSuuryouNumber, qty,           HousouTaniUnit, InvHousouTaniUnit,           janqty, JanHousouSuuryouUnit, InvJanHousouSuuryouUnit)        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, 			rec.InvDate, 			rec.InvYjCode, 			rec.InvJanCode, 			prod, 			rec.InvJanHousouSuuryouNumber, 			rec.Qty, 			rec.HousouTaniUnit, 			rec.InvHousouTaniUnit, 			rec.JanQty, 			rec.JanHousouSuuryouUnit, 			rec.InvJanHousouSuuryouUnit, 		); err != nil { 			log.Printf("[INVENTORY] upsert error JAN=%s: %v", rec.InvJanCode, err) 			continue 		}  		// JCSHMS に未登録なら MA2 Upsert 		cs, err := jcshms.QueryByJan(ma0.DB, rec.InvJanCode) 		if err != nil { 			log.Printf("[INVENTORY] JCShms error JAN=%s: %v", rec.InvJanCode, err) 			continue 		} 		if len(cs) == 0 { 			// MA2 登録用レコード組立 			m2 := &ma2.Record{ 				JanCode:                  rec.InvJanCode, 				Shouhinmei:               rec.InvProductName, 				HousouKeitai:             "", // CSVに無ければ空 				HousouTaniUnitName:       rec.HousouTaniUnit, 				HousouSouryouNumber:      0, 				JanHousouSuuryouNumber:   int(rec.InvJanHousouSuuryouNumber), 				JanHousouSuuryouUnitName: rec.JanHousouSuuryouUnit, 				JanHousouSouryouNumber:   0, 			} 			if err := ma2.Upsert(ma0.DB, m2); err != nil { 				log.Printf("[INVENTORY] MA2 Upsert error JAN=%s: %v", rec.InvJanCode, err) 			} else { 				// 結果のYJコードを在庫レコードにも反映 				rec.InvYjCode = m2.YjCode 			} 		} 	}  	// JSON応答 	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	json.NewEncoder(w).Encode(map[string]interface{}{ 		"count":       len(recs), 		"inventories": recs, 	}) }

----- C:\Dev\YAMATO\jancode\jancode.go -----
// File: jancode/jancode.go package jancode  import ( 	"database/sql" 	"fmt" )  type JANCODERecord struct { 	JA000                      string 	JA001JanCode               string 	JA002                      string 	JA003                      string 	JA004                      string 	JA005                      string 	JA006HousouSuuryouSuuchi   string 	JA007HousouSuuryouTaniCode string 	JA008HousouSouryouSuuchi   string 	JA009                      string 	JA010                      string 	JA011                      string 	JA012                      string 	JA013                      string 	JA014                      string 	JA015                      string 	JA016                      string 	JA017                      string 	JA018                      string 	JA019                      string 	JA020                      string 	JA021                      string 	JA022                      string 	JA023                      string 	JA024                      string 	JA025                      string 	JA026                      string 	JA027                      string 	JA028                      string 	JA029                      string }  // QueryByJan は JAN コードを受け取り、該当レコードを返します func QueryJANCODERecordsByJan(db *sql.DB, jan string) ([]JANCODERecord, error) { 	const sqlQuery = `     SELECT   JA000, JA001JanCode, JA002, JA003, JA004, JA005, JA006HousouSuuryouSuuchi, JA007HousouSuuryouTaniCode, JA008HousouSouryouSuuchi, JA009, JA010, JA011, JA012, JA013, JA014, JA015, JA016, JA017, JA018, JA019, JA020, JA021, JA022, JA023, JA024, JA025, JA026, JA027, JA028, JA029         FROM jancode         WHERE JA001JanCode = ?  ` 	rows, err := db.Query(sqlQuery, jan) 	if err != nil { 		return nil, fmt.Errorf("jancode query error: %w", err) 	} 	defer rows.Close()  	var results []JANCODERecord 	for rows.Next() { 		var rec JANCODERecord 		if err := rows.Scan( 			&rec.JA000, 			&rec.JA001JanCode, 			&rec.JA002, 			&rec.JA003, 			&rec.JA004, 			&rec.JA005, 			&rec.JA006HousouSuuryouSuuchi, 			&rec.JA007HousouSuuryouTaniCode, 			&rec.JA008HousouSouryouSuuchi, 			&rec.JA009, 			&rec.JA010, 			&rec.JA011, 			&rec.JA012, 			&rec.JA013, 			&rec.JA014, 			&rec.JA015, 			&rec.JA016, 			&rec.JA017, 			&rec.JA018, 			&rec.JA019, 			&rec.JA020, 			&rec.JA021, 			&rec.JA022, 			&rec.JA023, 			&rec.JA024, 			&rec.JA025, 			&rec.JA026, 			&rec.JA027, 			&rec.JA028, 			&rec.JA029, 		); err != nil { 			return nil, fmt.Errorf("jancode scan error: %w", err) 		} 		results = append(results, rec) 	} 	if err := rows.Err(); err != nil { 		return nil, fmt.Errorf("jancode rows error: %w", err) 	} 	return results, nil }  // QueryByJan は QueryJANCODERecordsByJan の alias func QueryByJan(db *sql.DB, jan string) ([]JANCODERecord, error) { 	return QueryJANCODERecordsByJan(db, jan) }

----- C:\Dev\YAMATO\jcshms\jcshms.go -----
package jcshms  import ( 	"database/sql" 	"fmt" )  // JCFields は jcshms テーブルの125フィールドを表す構造体です type JCFields struct { 	JC000JanCode                           string 	JC001JanCodeShikibetsuKubun            string 	JC002KyuuJanCode                       string 	JC003TouitsuShouhinCode                string 	JC004YakkaKijunShuusaiIyakuhinCode     string 	JC005KyuuYakkaKijunShuusaiIyakuhinCode string 	JC006HOTBangou                         string 	JC007ReseputoCode1                     string 	JC008ReseputoCode2                     string 	JC009YJCode                            string 	JC010YakkouBunruiCode                  string 	JC011YakkouBunruiMei                   string 	JC012ShiyouKubunCode                   string 	JC013ShiyouKubunMeishou                string 	JC014NihonHyoujunShouhinBunruiBangou   string 	JC015ZaikeiCode                        string 	JC016ZaikeiKigou                       string 	JC017ZaikeiMeishou                     string 	JC018ShouhinMei                        string 	JC019HankakuShouhinMei                 string 	JC020KikakuYouryou                     string 	JC021HankakuKikakuYouryou              string 	JC022ShouhinMeiKanaSortYou             string 	JC023ShouhinMeiKanpouYouKigou          string 	JC024IppanMeishou                      string 	JC025YakkaShuusaiMeishou               string 	JC026ReseYouIyakuhinMei                string 	JC027KikakuTaniMeishou                 string 	JC028KikakuTaniKigou                   string 	JC029HanbaiMotoCode                    string 	JC030HanbaiMotoMei                     string 	JC031HanbaiMotoMeiKana                 string 	JC032HanbaiMotoMeiRyakuMei             string 	JC033SeizouMotoYunyuuMotoCode          string 	JC034SeizouMotoYunyuuMotoMei           string 	JC035SeizouMotoYunyuuMotoMeiKana       string 	JC036SeizouMotoYunyuuMotoMeiRyakuMei   string 	JC037HousouKeitai                      string 	JC038HousouTaniSuuchi                  string 	JC039HousouTaniTani                    string 	JC040HousouSuuryouSuuchi               string 	JC041HousouSuuryouTani                 string 	JC042HousouIrisuuSuuchi                string 	JC043HousouIrisuuTani                  string 	JC044HousouSouryouSuuchi               string 	JC045HousouSouryouTani                 string 	JC046HousouYouryouSuuchi               string 	JC047HousouYouryouTani                 string 	JC048HousouYakkaKeisuu                 string 	JC049GenTaniYakka                      string 	JC050GenHousouYakka                    string 	JC051KyuuTaniYakka                     string 	JC052KyuuHousouYakka                   string 	JC053KokuchiTaniYakka                  string 	JC054KokuchiHousouYakka                string 	JC055YakkaKaiteiNengappi               string 	JC056YakkaShuusaiNengappi              string 	JC057HanbaiKaishiNengappi              string 	JC058KeikaSochiNengappi                string 	JC059HatsubaiChuushiNengappi           string 	JC060SeizouChuushiNengappi             string 	JC061Doyaku                            string 	JC062Gekiyaku                          string 	JC063Mayaku                            string 	JC064Kouseishinyaku                    string 	JC065Kakuseizai                        string 	JC066KakuseizaiGenryou                 string 	JC067ShuukanseiIyakuhin                string 	JC068ShiteiIyakuhinKyuuKiseiKubun      string 	JC069YoushijiIyakuhinKyuuKiseiKubun    string 	JC070KetsuekiSeizai                    string 	JC071NihonYakkyokuhou                  string 	JC072YuukouKikan                       string 	JC073ShiyouKigen                       string 	JC074SeibutsuYuraiSeihin               string 	JC075Kouhatsuhin                       string 	JC076YakkaKijunShuusaiKubun            string 	JC077KichouGimuKubun                   string 	JC078ShouhinKubun                      string 	JC079ShohousenIyakuhin                 string 	JC080ChuushiRiyuuKubun                 string 	JC081MishiyouKyuuRyuutsuuKanrihin      string 	JC082MentenanceKubun                   string 	JC083KouhatsuhinNoAruSenpatsuhinKubun  string 	JC084AuthorizedGeneric                 string 	JC085Biosimilar                        string 	JC086HighRiskYaku                      string 	JC087Kuuran1                           string 	JC088Kuuran2                           string 	JC089Shitsuon                          string 	JC090Reisho                            string 	JC091Reizou                            string 	JC092Reitou                            string 	JC093Ansho                             string 	JC094Shakou                            string 	JC095KimitsuYouki                      string 	JC096MippuuYouki                       string 	JC097Kikenbutsu                        string 	JC098OndoJougen                        string 	JC099OndoKagen                         string 	JC100SonotaHokanjouNoChui              string 	JC101KonpouJuuryouSizeJouhou           string 	JC102KonpouTateSizeJouhou              string 	JC103KonpouYokoSizeJouhou              string 	JC104KonpouTakasaSizeJouhou            string 	JC105KonpouTaiseiSizeJouhou            string 	JC106ChuubakoJuuryouSizeJouhou         string 	JC107ChuubakoTateSizeJouhou            string 	JC108ChuubakoYokoSizeJouhou            string 	JC109ChuubakoTakasaSizeJouhou          string 	JC110ChuubakoTaiseiSizeJouhou          string 	JC111KousouJuuryouSizeJouhou           string 	JC112KousouTateSizeJouhou              string 	JC113KousouYokoSizeJouhou              string 	JC114KousouTakasaSizeJouhou            string 	JC115KousouTaiseiSizeJouhou            string 	JC116KonpouTaniSizeJouhou              string 	JC117HacchuuTaniSizeJouhou             string 	JC118KoushinKubun                      string 	JC119TourokuNengappi                   string 	JC120KoushinNengappi                   string 	JC121ChouzaiHousouTaniCode             string 	JC122HanbaiHousouTaniCode              string 	JC123IppanMeiKana                      string 	JC124SaishouYakkaKansanKeisuu          string }  // JCSHMSRecord は QueryJCSHMSRecordsByJan の返却型 type JCSHMSRecord struct { 	JC000JanCode string 	JC           JCFields }  // QueryJCSHMSRecordsByJan は JAN コードを受けて jcshms テーブルを検索し、 // JCSHMSRecord スライスを返します // QueryJCSHMSRecordsByJan は JAN コードを受け、該当する JCSHMSRecord を返します func QueryJCSHMSRecordsByJan(db *sql.DB, jan string) ([]JCSHMSRecord, error) { 	const query = `       SELECT       JC000JanCode, JC001JanCodeShikibetsuKubun, JC002KyuuJanCode, JC003TouitsuShouhinCode, JC004YakkaKijunShuusaiIyakuhinCode, JC005KyuuYakkaKijunShuusaiIyakuhinCode, JC006HOTBangou, JC007ReseputoCode1, JC008ReseputoCode2, JC009YJCode, JC010YakkouBunruiCode, JC011YakkouBunruiMei, JC012ShiyouKubunCode, JC013ShiyouKubunMeishou, JC014NihonHyoujunShouhinBunruiBangou, JC015ZaikeiCode, JC016ZaikeiKigou, JC017ZaikeiMeishou, JC018ShouhinMei, JC019HankakuShouhinMei, JC020KikakuYouryou, JC021HankakuKikakuYouryou, JC022ShouhinMeiKanaSortYou, JC023ShouhinMeiKanpouYouKigou, JC024IppanMeishou, JC025YakkaShuusaiMeishou, JC026ReseYouIyakuhinMei, JC027KikakuTaniMeishou, JC028KikakuTaniKigou, JC029HanbaiMotoCode, JC030HanbaiMotoMei, JC031HanbaiMotoMeiKana, JC032HanbaiMotoMeiRyakuMei, JC033SeizouMotoYunyuuMotoCode, JC034SeizouMotoYunyuuMotoMei, JC035SeizouMotoYunyuuMotoMeiKana, JC036SeizouMotoYunyuuMotoMeiRyakuMei, JC037HousouKeitai, JC038HousouTaniSuuchi, JC039HousouTaniTani, JC040HousouSuuryouSuuchi, JC041HousouSuuryouTani, JC042HousouIrisuuSuuchi, JC043HousouIrisuuTani, JC044HousouSouryouSuuchi, JC045HousouSouryouTani, JC046HousouYouryouSuuchi, JC047HousouYouryouTani, JC048HousouYakkaKeisuu, JC049GenTaniYakka, JC050GenHousouYakka, JC051KyuuTaniYakka, JC052KyuuHousouYakka, JC053KokuchiTaniYakka, JC054KokuchiHousouYakka, JC055YakkaKaiteiNengappi, JC056YakkaShuusaiNengappi, JC057HanbaiKaishiNengappi, JC058KeikaSochiNengappi, JC059HatsubaiChuushiNengappi, JC060SeizouChuushiNengappi, JC061Doyaku, JC062Gekiyaku, JC063Mayaku, JC064Kouseishinyaku, JC065Kakuseizai, JC066KakuseizaiGenryou, JC067ShuukanseiIyakuhin, JC068ShiteiIyakuhinKyuuKiseiKubun, JC069YoushijiIyakuhinKyuuKiseiKubun, JC070KetsuekiSeizai, JC071NihonYakkyokuhou, JC072YuukouKikan, JC073ShiyouKigen, JC074SeibutsuYuraiSeihin, JC075Kouhatsuhin, JC076YakkaKijunShuusaiKubun, JC077KichouGimuKubun, JC078ShouhinKubun, JC079ShohousenIyakuhin, JC080ChuushiRiyuuKubun, JC081MishiyouKyuuRyuutsuuKanrihin, JC082MentenanceKubun, JC083KouhatsuhinNoAruSenpatsuhinKubun, JC084AuthorizedGeneric, JC085Biosimilar, JC086HighRiskYaku, JC087Kuuran1, JC088Kuuran2, JC089Shitsuon, JC090Reisho, JC091Reizou, JC092Reitou, JC093Ansho, JC094Shakou, JC095KimitsuYouki, JC096MippuuYouki, JC097Kikenbutsu, JC098OndoJougen, JC099OndoKagen, JC100SonotaHokanjouNoChui, JC101KonpouJuuryouSizeJouhou, JC102KonpouTateSizeJouhou, JC103KonpouYokoSizeJouhou, JC104KonpouTakasaSizeJouhou, JC105KonpouTaiseiSizeJouhou, JC106ChuubakoJuuryouSizeJouhou, JC107ChuubakoTateSizeJouhou, JC108ChuubakoYokoSizeJouhou, JC109ChuubakoTakasaSizeJouhou, JC110ChuubakoTaiseiSizeJouhou, JC111KousouJuuryouSizeJouhou, JC112KousouTateSizeJouhou, JC113KousouYokoSizeJouhou, JC114KousouTakasaSizeJouhou, JC115KousouTaiseiSizeJouhou, JC116KonpouTaniSizeJouhou, JC117HacchuuTaniSizeJouhou, JC118KoushinKubun, JC119TourokuNengappi, JC120KoushinNengappi, JC121ChouzaiHousouTaniCode, JC122HanbaiHousouTaniCode, JC123IppanMeiKana, JC124SaishouYakkaKansanKeisuu     FROM jcshms     WHERE JC000JanCode = ?   `  	rows, err := db.Query(query, jan) 	if err != nil { 		return nil, fmt.Errorf("jcshms query error: %w", err) 	} 	defer rows.Close()  	var out []JCSHMSRecord 	for rows.Next() { 		var rec JCSHMSRecord 		// Scan の順序は上記 SELECT とまったく同じ順番で書くこと 		if err := rows.Scan( 			&rec.JC.JC000JanCode, 			&rec.JC.JC001JanCodeShikibetsuKubun, 			&rec.JC.JC002KyuuJanCode, 			&rec.JC.JC003TouitsuShouhinCode, 			&rec.JC.JC004YakkaKijunShuusaiIyakuhinCode, 			&rec.JC.JC005KyuuYakkaKijunShuusaiIyakuhinCode, 			&rec.JC.JC006HOTBangou, 			&rec.JC.JC007ReseputoCode1, 			&rec.JC.JC008ReseputoCode2, 			&rec.JC.JC009YJCode, 			&rec.JC.JC010YakkouBunruiCode, 			&rec.JC.JC011YakkouBunruiMei, 			&rec.JC.JC012ShiyouKubunCode, 			&rec.JC.JC013ShiyouKubunMeishou, 			&rec.JC.JC014NihonHyoujunShouhinBunruiBangou, 			&rec.JC.JC015ZaikeiCode, 			&rec.JC.JC016ZaikeiKigou, 			&rec.JC.JC017ZaikeiMeishou, 			&rec.JC.JC018ShouhinMei, 			&rec.JC.JC019HankakuShouhinMei, 			&rec.JC.JC020KikakuYouryou, 			&rec.JC.JC021HankakuKikakuYouryou, 			&rec.JC.JC022ShouhinMeiKanaSortYou, 			&rec.JC.JC023ShouhinMeiKanpouYouKigou, 			&rec.JC.JC024IppanMeishou, 			&rec.JC.JC025YakkaShuusaiMeishou, 			&rec.JC.JC026ReseYouIyakuhinMei, 			&rec.JC.JC027KikakuTaniMeishou, 			&rec.JC.JC028KikakuTaniKigou, 			&rec.JC.JC029HanbaiMotoCode, 			&rec.JC.JC030HanbaiMotoMei, 			&rec.JC.JC031HanbaiMotoMeiKana, 			&rec.JC.JC032HanbaiMotoMeiRyakuMei, 			&rec.JC.JC033SeizouMotoYunyuuMotoCode, 			&rec.JC.JC034SeizouMotoYunyuuMotoMei, 			&rec.JC.JC035SeizouMotoYunyuuMotoMeiKana, 			&rec.JC.JC036SeizouMotoYunyuuMotoMeiRyakuMei, 			&rec.JC.JC037HousouKeitai, 			&rec.JC.JC038HousouTaniSuuchi, 			&rec.JC.JC039HousouTaniTani, 			&rec.JC.JC040HousouSuuryouSuuchi, 			&rec.JC.JC041HousouSuuryouTani, 			&rec.JC.JC042HousouIrisuuSuuchi, 			&rec.JC.JC043HousouIrisuuTani, 			&rec.JC.JC044HousouSouryouSuuchi, 			&rec.JC.JC045HousouSouryouTani, 			&rec.JC.JC046HousouYouryouSuuchi, 			&rec.JC.JC047HousouYouryouTani, 			&rec.JC.JC048HousouYakkaKeisuu, 			&rec.JC.JC049GenTaniYakka, 			&rec.JC.JC050GenHousouYakka, 			&rec.JC.JC051KyuuTaniYakka, 			&rec.JC.JC052KyuuHousouYakka, 			&rec.JC.JC053KokuchiTaniYakka, 			&rec.JC.JC054KokuchiHousouYakka, 			&rec.JC.JC055YakkaKaiteiNengappi, 			&rec.JC.JC056YakkaShuusaiNengappi, 			&rec.JC.JC057HanbaiKaishiNengappi, 			&rec.JC.JC058KeikaSochiNengappi, 			&rec.JC.JC059HatsubaiChuushiNengappi, 			&rec.JC.JC060SeizouChuushiNengappi, 			&rec.JC.JC061Doyaku, 			&rec.JC.JC062Gekiyaku, 			&rec.JC.JC063Mayaku, 			&rec.JC.JC064Kouseishinyaku, 			&rec.JC.JC065Kakuseizai, 			&rec.JC.JC066KakuseizaiGenryou, 			&rec.JC.JC067ShuukanseiIyakuhin, 			&rec.JC.JC068ShiteiIyakuhinKyuuKiseiKubun, 			&rec.JC.JC069YoushijiIyakuhinKyuuKiseiKubun, 			&rec.JC.JC070KetsuekiSeizai, 			&rec.JC.JC071NihonYakkyokuhou, 			&rec.JC.JC072YuukouKikan, 			&rec.JC.JC073ShiyouKigen, 			&rec.JC.JC074SeibutsuYuraiSeihin, 			&rec.JC.JC075Kouhatsuhin, 			&rec.JC.JC076YakkaKijunShuusaiKubun, 			&rec.JC.JC077KichouGimuKubun, 			&rec.JC.JC078ShouhinKubun, 			&rec.JC.JC079ShohousenIyakuhin, 			&rec.JC.JC080ChuushiRiyuuKubun, 			&rec.JC.JC081MishiyouKyuuRyuutsuuKanrihin, 			&rec.JC.JC082MentenanceKubun, 			&rec.JC.JC083KouhatsuhinNoAruSenpatsuhinKubun, 			&rec.JC.JC084AuthorizedGeneric, 			&rec.JC.JC085Biosimilar, 			&rec.JC.JC086HighRiskYaku, 			&rec.JC.JC087Kuuran1, 			&rec.JC.JC088Kuuran2, 			&rec.JC.JC089Shitsuon, 			&rec.JC.JC090Reisho, 			&rec.JC.JC091Reizou, 			&rec.JC.JC092Reitou, 			&rec.JC.JC093Ansho, 			&rec.JC.JC094Shakou, 			&rec.JC.JC095KimitsuYouki, 			&rec.JC.JC096MippuuYouki, 			&rec.JC.JC097Kikenbutsu, 			&rec.JC.JC098OndoJougen, 			&rec.JC.JC099OndoKagen, 			&rec.JC.JC100SonotaHokanjouNoChui, 			&rec.JC.JC101KonpouJuuryouSizeJouhou, 			&rec.JC.JC102KonpouTateSizeJouhou, 			&rec.JC.JC103KonpouYokoSizeJouhou, 			&rec.JC.JC104KonpouTakasaSizeJouhou, 			&rec.JC.JC105KonpouTaiseiSizeJouhou, 			&rec.JC.JC106ChuubakoJuuryouSizeJouhou, 			&rec.JC.JC107ChuubakoTateSizeJouhou, 			&rec.JC.JC108ChuubakoYokoSizeJouhou, 			&rec.JC.JC109ChuubakoTakasaSizeJouhou, 			&rec.JC.JC110ChuubakoTaiseiSizeJouhou, 			&rec.JC.JC111KousouJuuryouSizeJouhou, 			&rec.JC.JC112KousouTateSizeJouhou, 			&rec.JC.JC113KousouYokoSizeJouhou, 			&rec.JC.JC114KousouTakasaSizeJouhou, 			&rec.JC.JC115KousouTaiseiSizeJouhou, 			&rec.JC.JC116KonpouTaniSizeJouhou, 			&rec.JC.JC117HacchuuTaniSizeJouhou, 			&rec.JC.JC118KoushinKubun, 			&rec.JC.JC119TourokuNengappi, 			&rec.JC.JC120KoushinNengappi, 			&rec.JC.JC121ChouzaiHousouTaniCode, 			&rec.JC.JC122HanbaiHousouTaniCode, 			&rec.JC.JC123IppanMeiKana, 			&rec.JC.JC124SaishouYakkaKansanKeisuu, 		); err != nil { 			return nil, fmt.Errorf("jcshms scan error: %w", err) 		} 		out = append(out, rec) 	} 	if err := rows.Err(); err != nil { 		return nil, fmt.Errorf("jcshms rows error: %w", err) 	} 	return out, nil }  func QueryByJan(db *sql.DB, jan string) ([]JCFields, error) { 	recs, err := QueryJCSHMSRecordsByJan(db, jan) 	if err != nil { 		return nil, err 	} 	// JCSHMSRecord の中身（.JC）を抜き出す 	out := make([]JCFields, len(recs)) 	for i, r := range recs { 		f := r.JC 		// 主キーであるJC000JanCodeも JCFields に含めたい場合はここで設定 		f.JC000JanCode = r.JC000JanCode 		out[i] = f 	} 	return out, nil }

----- C:\Dev\YAMATO\ma0\mao.go -----
// ma0/mao.go package ma0  import ( 	"database/sql" 	"fmt" 	"reflect" 	"strings"  	"YAMATO/jancode" 	"YAMATO/jcshms" 	"YAMATO/model" )  // MA0Record は、マスター連携用の全155フィールドを保持する構造体です。 // ※フィールド名は "MAxxxJCyyy"（JC マスター連携用）と "MAxxxJAyyy"（JANコード連携用）に分かれています。 type MA0Record struct { 	MA000JC000JanCode                           string 	MA001JC001JanCodeShikibetsuKubun            string 	MA002JC002KyuuJanCode                       string 	MA003JC003TouitsuShouhinCode                string 	MA004JC004YakkaKijunShuusaiIyakuhinCode     string 	MA005JC005KyuuYakkaKijunShuusaiIyakuhinCode string 	MA006JC006HOTBangou                         string 	MA007JC007ReseputoCode1                     string 	MA008JC008ReseputoCode2                     string 	MA009JC009YJCode                            string 	MA010JC010YakkouBunruiCode                  string 	MA011JC011YakkouBunruiMei                   string 	MA012JC012ShiyouKubunCode                   string 	MA013JC013ShiyouKubunMeishou                string 	MA014JC014NihonHyoujunShouhinBunruiBangou   string 	MA015JC015ZaikeiCode                        string 	MA016JC016ZaikeiKigou                       string 	MA017JC017ZaikeiMeishou                     string 	MA018JC018ShouhinMei                        string 	MA019JC019HankakuShouhinMei                 string 	MA020JC020KikakuYouryou                     string 	MA021JC021HankakuKikakuYouryou              string 	MA022JC022ShouhinMeiKanaSortYou             string 	MA023JC023ShouhinMeiKanpouYouKigou          string 	MA024JC024IppanMeishou                      string 	MA025JC025YakkaShuusaiMeishou               string 	MA026JC026ReseYouIyakuhinMei                string 	MA027JC027KikakuTaniMeishou                 string 	MA028JC028KikakuTaniKigou                   string 	MA029JC029HanbaiMotoCode                    string 	MA030JC030HanbaiMotoMei                     string 	MA031JC031HanbaiMotoMeiKana                 string 	MA032JC032HanbaiMotoMeiRyakuMei             string 	MA033JC033SeizouMotoYunyuuMotoCode          string 	MA034JC034SeizouMotoYunyuuMotoMei           string 	MA035JC035SeizouMotoYunyuuMotoMeiKana       string 	MA036JC036SeizouMotoYunyuuMotoMeiRyakuMei   string 	MA037JC037HousouKeitai                      string 	MA038JC038HousouTaniSuuchi                  string 	MA039JC039HousouTaniTani                    string 	MA040JC040HousouSuuryouSuuchi               string 	MA041JC041HousouSuuryouTani                 string 	MA042JC042HousouIrisuuSuuchi                string 	MA043JC043HousouIrisuuTani                  string 	MA044JC044HousouSouryouSuuchi               string 	MA045JC045HousouSouryouTani                 string 	MA046JC046HousouYouryouSuuchi               string 	MA047JC047HousouYouryouTani                 string 	MA048JC048HousouYakkaKeisuu                 string 	MA049JC049GenTaniYakka                      string 	MA050JC050GenHousouYakka                    string 	MA051JC051KyuuTaniYakka                     string 	MA052JC052KyuuHousouYakka                   string 	MA053JC053KokuchiTaniYakka                  string 	MA054JC054KokuchiHousouYakka                string 	MA055JC055YakkaKaiteiNengappi               string 	MA056JC056YakkaShuusaiNengappi              string 	MA057JC057HanbaiKaishiNengappi              string 	MA058JC058KeikaSochiNengappi                string 	MA059JC059HatsubaiChuushiNengappi           string 	MA060JC060SeizouChuushiNengappi             string 	MA061JC061Doyaku                            string 	MA062JC062Gekiyaku                          string 	MA063JC063Mayaku                            string 	MA064JC064Kouseishinyaku                    string 	MA065JC065Kakuseizai                        string 	MA066JC066KakuseizaiGenryou                 string 	MA067JC067ShuukanseiIyakuhin                string 	MA068JC068ShiteiIyakuhinKyuuKiseiKubun      string 	MA069JC069YoushijiIyakuhinKyuuKiseiKubun    string 	MA070JC070KetsuekiSeizai                    string 	MA071JC071NihonYakkyokuhou                  string 	MA072JC072YuukouKikan                       string 	MA073JC073ShiyouKigen                       string 	MA074JC074SeibutsuYuraiSeihin               string 	MA075JC075Kouhatsuhin                       string 	MA076JC076YakkaKijunShuusaiKubun            string 	MA077JC077KichouGimuKubun                   string 	MA078JC078ShouhinKubun                      string 	MA079JC079ShohousenIyakuhin                 string 	MA080JC080ChuushiRiyuuKubun                 string 	MA081JC081MishiyouKyuuRyuutsuuKanrihin      string 	MA082JC082MentenanceKubun                   string 	MA083JC083KouhatsuhinNoAruSenpatsuhinKubun  string 	MA084JC084AuthorizedGeneric                 string 	MA085JC085Biosimilar                        string 	MA086JC086HighRiskYaku                      string 	MA087JC087Kuuran1                           string 	MA088JC088Kuuran2                           string 	MA089JC089Shitsuon                          string 	MA090JC090Reisho                            string 	MA091JC091Reizou                            string 	MA092JC092Reitou                            string 	MA093JC093Ansho                             string 	MA094JC094Shakou                            string 	MA095JC095KimitsuYouki                      string 	MA096JC096MippuuYouki                       string 	MA097JC097Kikenbutsu                        string 	MA098JC098OndoJougen                        string 	MA099JC099OndoKagen                         string 	MA100JC100SonotaHokanjouNoChui              string 	MA101JC101KonpouJuuryouSizeJouhou           string 	MA102JC102KonpouTateSizeJouhou              string 	MA103JC103KonpouYokoSizeJouhou              string 	MA104JC104KonpouTakasaSizeJouhou            string 	MA105JC105KonpouTaiseiSizeJouhou            string 	MA106JC106ChuubakoJuuryouSizeJouhou         string 	MA107JC107ChuubakoTateSizeJouhou            string 	MA108JC108ChuubakoYokoSizeJouhou            string 	MA109JC109ChuubakoTakasaSizeJouhou          string 	MA110JC110ChuubakoTaiseiSizeJouhou          string 	MA111JC111KousouJuuryouSizeJouhou           string 	MA112JC112KousouTateSizeJouhou              string 	MA113JC113KousouYokoSizeJouhou              string 	MA114JC114KousouTakasaSizeJouhou            string 	MA115JC115KousouTaiseiSizeJouhou            string 	MA116JC116KonpouTaniSizeJouhou              string 	MA117JC117HacchuuTaniSizeJouhou             string 	MA118JC118KoushinKubun                      string 	MA119JC119TourokuNengappi                   string 	MA120JC120KoushinNengappi                   string 	MA121JC121ChouzaiHousouTaniCode             string 	MA122JC122HanbaiHousouTaniCode              string 	MA123JC123IppanMeiKana                      string 	MA124JC124SaishouYakkaKansanKeisuu          string 	MA125JA000                                  string 	MA126JA001JanCode                           string 	MA127JA002                                  string 	MA128JA003                                  string 	MA129JA004                                  string 	MA130JA005                                  string 	MA131JA006HousouSuuryouSuuchi               string 	MA132JA007HousouSuuryouTaniCode             string 	MA133JA008HousouSouryouSuuchi               string 	MA134JA009                                  string 	MA135JA010                                  string 	MA136JA011                                  string 	MA137JA012                                  string 	MA138JA013                                  string 	MA139JA014                                  string 	MA140JA015                                  string 	MA141JA016                                  string 	MA142JA017                                  string 	MA143JA018                                  string 	MA144JA019                                  string 	MA145JA020                                  string 	MA146JA021                                  string 	MA147JA022                                  string 	MA148JA023                                  string 	MA149JA024                                  string 	MA150JA025                                  string 	MA151JA026                                  string 	MA152JA027                                  string 	MA153JA028                                  string 	MA154JA029                                  string }  // DB は、ma0 連携用に参照するグローバルなデータベース接続です。 var DB *sql.DB  // Migrate は、MA0Record の全フィールドを TEXT 型として、 // 最初のフィールドを PRIMARY KEY としたテーブル "ma0" を作成します。 func Migrate(db *sql.DB) error { 	t := reflect.TypeOf(MA0Record{}) 	cols := make([]string, t.NumField()) 	for i := 0; i < t.NumField(); i++ { 		name := t.Field(i).Name 		if i == 0 { 			cols[i] = fmt.Sprintf("%s TEXT PRIMARY KEY", name) 		} else { 			cols[i] = fmt.Sprintf("%s TEXT", name) 		} 	} 	ddl := fmt.Sprintf( 		"CREATE TABLE IF NOT EXISTS ma0 (\n  %s\n);", 		strings.Join(cols, ",\n  "), 	) 	_, err := db.Exec(ddl) 	return err }  // columns は MA0Record の各フィールド名をスライスとして返します。 func columns() []string { 	t := reflect.TypeOf(MA0Record{}) 	out := make([]string, t.NumField()) 	for i := range out { 		out[i] = t.Field(i).Name 	} 	return out }  // values は与えられた MA0Record のフィールド値の一覧を []interface{} として返します。 func values(rec MA0Record) []interface{} { 	v := reflect.ValueOf(rec) 	out := make([]interface{}, v.NumField()) 	for i := range out { 		out[i] = v.Field(i).Interface() 	} 	return out }  // InsertIgnore は、複数の MA0Record を一括で INSERT OR IGNORE します。 // PRIMARY KEY 制約により重複が自動的に防がれます。 func InsertIgnore(db *sql.DB, recs []MA0Record) error { 	cols := columns() 	placeholders := make([]string, len(cols)) 	for i := range placeholders { 		placeholders[i] = "?" 	} 	stmt := fmt.Sprintf( 		"INSERT OR IGNORE INTO ma0 (%s) VALUES (%s)", 		strings.Join(cols, ","), 		strings.Join(placeholders, ","), 	) 	prep, err := db.Prepare(stmt) 	if err != nil { 		return err 	} 	defer prep.Close()  	for _, rec := range recs { 		if _, err := prep.Exec(values(rec)...); err != nil { 			return err 		} 	} 	return nil }  // CheckOrCreateMA0 は、指定された JAN コードで ma0 テーブルを検索します。 // 既存ならそのレコードを返し、created=false とします。 // 見つからなければ、jcshms および jancode からマスター照会を行い、 // 新規レコードを INSERT OR IGNORE して created=true として返します。 func CheckOrCreateMA0(jan string) (MA0Record, bool, error) { 	// 1) ma0 に既にレコードが存在するかチェック 	var rec MA0Record 	cols := columns() 	addrs := make([]interface{}, len(cols)) 	recVal := reflect.ValueOf(&rec).Elem() 	for i := range addrs { 		addrs[i] = recVal.Field(i).Addr().Interface() 	} 	query := fmt.Sprintf("SELECT %s FROM ma0 WHERE MA000JC000JanCode = ?", strings.Join(cols, ",")) 	err := DB.QueryRow(query, jan).Scan(addrs...) 	if err == nil { 		// 既存レコードが見つかった場合 		return rec, false, nil 	} 	if err != sql.ErrNoRows { 		return MA0Record{}, false, fmt.Errorf("ma0 select error: %v", err) 	}  	// 2) マスター照会（jcshms および jancode から）およびフィールドのコピー 	cs, _ := jcshms.QueryByJan(DB, jan) 	ja, _ := jancode.QueryByJan(DB, jan)  	// 両方のマスターにヒットがなければ、登録せずに終了する 	if len(cs) == 0 && len(ja) == 0 { 		return MA0Record{}, false, nil 	}  	// 反射を用いて、jcshms からの項目を MA0Record にコピー 	if len(cs) > 0 { 		jcVal := reflect.ValueOf(cs[0]) 		for i := 0; i < recVal.NumField(); i++ { 			field := recVal.Type().Field(i) 			// MAレコードで "JC" を含むフィールドは、jcshms の対応フィールドへマッピング 			if strings.HasPrefix(field.Name, "MA") && strings.Contains(field.Name, "JC") { 				idx := strings.Index(field.Name, "JC") 				masterName := field.Name[idx:] 				if masterField := jcVal.FieldByName(masterName); masterField.IsValid() { 					recVal.Field(i).SetString(masterField.String()) 				} 			} 		} 	}  	// jancode からも同様にコピー（フィールド名に "JA" を含むもの） 	if len(ja) > 0 { 		jaVal := reflect.ValueOf(ja[0]) 		for i := 0; i < recVal.NumField(); i++ { 			field := recVal.Type().Field(i) 			if strings.HasPrefix(field.Name, "MA") && strings.Contains(field.Name, "JA") { 				idx := strings.Index(field.Name, "JA") 				masterName := field.Name[idx:] 				if masterField := jaVal.FieldByName(masterName); masterField.IsValid() { 					recVal.Field(i).SetString(masterField.String()) 				} 			} 		} 	}  	// 主キー（JANコード）の設定 	rec.MA000JC000JanCode = jan  	// 3) INSERT OR IGNORE により DB へ新規レコード挿入 	if err := InsertIgnore(DB, []MA0Record{rec}); err != nil { 		return MA0Record{}, false, fmt.Errorf("ma0 insert error: %v", err) 	} 	return rec, true, nil }  // InsertDATRecord は、与えられた model.DATRecord を datrecords テーブルに挿入します。 // organizedFlag には、1 (organized) または 0 (disorganized) を指定します。 func InsertDATRecord(db *sql.DB, rec model.DATRecord, organizedFlag int) error { 	stmt := ` 		INSERT OR IGNORE INTO datrecords ( 			CurrentOroshiCode, 			DatDate, 			DatDeliveryFlag, 			DatReceiptNumber, 			DatLineNumber, 			DatJanCode, 			DatProductName, 			DatQuantity, 			DatUnitPrice, 			DatSubtotal, 			DatPackagingDrugPrice, 			DatExpiryDate, 			DatLotNumber, 			organizedFlag 		) 		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);` 	_, err := db.Exec(stmt, 		rec.CurrentOroshiCode, // DatOroshiCode 列へ 		rec.DatDate,           // DatDate 列へ 		rec.DatFlag,           // DatDeliveryFlag 列へ（旧：DatDeliveryFlag → DatFlag） 		rec.DatRecNo,          // DatReceiptNumber 列へ 		rec.DatLineNo,         // DatLineNumber 列へ 		rec.DatJan,            // DatJanCode 列へ 		rec.DatProductName,    // DatProductName 列へ 		rec.DatQty,            // DatQuantity 列へ 		rec.DatUnit,           // DatUnitPrice 列へ 		rec.DatSub,            // DatSubtotal 列へ 		rec.DatPkg,            // DatPackagingDrugPrice 列へ 		rec.DatExp,            // DatExpiryDate 列へ 		rec.DatLot,            // DatLotNumber 列へ 		organizedFlag, 	) 	if err != nil { 		return fmt.Errorf("failed to insert DATRecord: %w", err) 	} 	return nil }  // InsertUsageRecord inserts one USAGERecord into the "usage_records" table. func InsertUsageRecord(db *sql.DB, rec model.USAGERecord) error { 	stmt := ` 		INSERT OR IGNORE INTO usage_records ( 			usageDate, 			usageYjCode, 			usageJanCode, 			usageProductName, 			usageAmount, 			usageUnit, 			usageUnitName, 			organizedFlag 		) VALUES (?, ?, ?, ?, ?, ?, ?, ?); 	` 	_, err := db.Exec(stmt, 		rec.UsageDate, 		rec.UsageYjCode, 		rec.UsageJanCode, 		rec.UsageProductName, 		rec.UsageAmount, 		rec.UsageUnit, 		rec.UsageUnitName, 		rec.OrganizedFlag, 	) 	if err != nil { 		return fmt.Errorf("failed to insert USAGE record: %w", err) 	} 	return nil }

----- C:\Dev\YAMATO\ma0\sequence.go -----
package ma0  import ( 	"database/sql" 	"fmt" )  // NextSequence は prefix（"MA1Y"|"MA2Y"|"MA2J"）ごとに // 8桁ゼロパディング連番を発行します。 func NextSequence(db *sql.DB, prefix string) (string, error) { 	tx, err := db.Begin() 	if err != nil { 		return "", fmt.Errorf("begin tx: %w", err) 	} 	defer func() { 		if err != nil { 			tx.Rollback() 		} else { 			tx.Commit() 		} 	}()  	var lastNo int 	if err = tx.QueryRow( 		`SELECT last_no FROM code_sequences WHERE name = ?`, 		prefix, 	).Scan(&lastNo); err != nil { 		return "", fmt.Errorf("select last_no: %w", err) 	}  	lastNo++ 	if _, err = tx.Exec( 		`UPDATE code_sequences SET last_no = ? WHERE name = ?`, 		lastNo, prefix, 	); err != nil { 		return "", fmt.Errorf("update last_no: %w", err) 	}  	seq := fmt.Sprintf("%s%08d", prefix, lastNo) 	return seq, nil }

----- C:\Dev\YAMATO\ma0\service.go -----
// File: YAMATO/ma0/service.go package ma0  import ( 	"database/sql" 	"fmt" )  // MARecord は MA2 登録に必要な情報を保持します。 type MARecord struct { 	JanCode                string // 元の JAN コード 	ProductName            string // 商品名 	HousouKeitai           string // 包装形態 	HousouTaniUnit         string // 包装単位 	HousouSouryouNumber    int    // 包装総量 	JanHousouSuuryouNumber int    // JAN 包装数量 	JanHousouSuuryouUnit   string // JAN 包装数量単位 	JanHousouSouryouNumber int    // JAN 包装総量 }  // RegisterMA は MA0 マスターにヒットしなかったレコードを MA2 に登録します。 // JanCode が空でなければそれを MA2JanCode に、常にシーケンスで MA2YjCode を発行します。 // 返り値として発番済みの janSeq, yjSeq を返却します。 func RegisterMA(db *sql.DB, maRec *MARecord) (janSeq, yjSeq string, err error) { 	// MA2JanCode を決定 	if maRec.JanCode != "" { 		janSeq = maRec.JanCode 	} else { 		seq, seqErr := NextSequence(db, "MA2J") 		if seqErr != nil { 			err = fmt.Errorf("failed to get MA2J sequence: %w", seqErr) 			return 		} 		janSeq = seq 	}  	// YJ は常にシーケンス発行 	seqYJ, seqErr := NextSequence(db, "MA2Y") 	if seqErr != nil { 		err = fmt.Errorf("failed to get MA2Y sequence: %w", seqErr) 		return 	} 	yjSeq = seqYJ  	// INSERT OR IGNORE で重複をスキップ 	_, execErr := db.Exec( 		`INSERT OR IGNORE INTO ma2            (MA2JanCode, MA2YjCode, Shouhinmei, HousouKeitai,             HousouTaniUnit, HousouSouryouNumber,             JanHousouSuuryouNumber, JanHousouSuuryouUnit,             JanHousouSouryouNumber)          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`, 		janSeq, 		yjSeq, 		maRec.ProductName, 		maRec.HousouKeitai, 		maRec.HousouTaniUnit, 		maRec.HousouSouryouNumber, 		maRec.JanHousouSuuryouNumber, 		maRec.JanHousouSuuryouUnit, 		maRec.JanHousouSouryouNumber, 	) 	if execErr != nil { 		err = fmt.Errorf("failed to insert into ma2: %w", execErr) 		return 	}  	return }

----- C:\Dev\YAMATO\ma2\ma2.go -----
// File: YAMATO/ma2/ma2.go package ma2  import ( 	"database/sql" 	"encoding/json" 	"fmt" 	"net/http" 	"strings"  	"YAMATO/ma0" 	"YAMATO/tani" 	"YAMATO/usage" )  // Record は MA2 登録／更新の DTO です type Record struct { 	JanCode                  string `json:"janCode"` // MA2JanCode 	YjCode                   string `json:"yjCode"`  // MA2YjCode 	Shouhinmei               string `json:"shouhinmei"` 	HousouKeitai             string `json:"housouKeitai"` 	HousouTaniUnitName       string `json:"housouTaniUnit"` // 入力は名称 	HousouSouryouNumber      int    `json:"housouSouryouNumber"` 	JanHousouSuuryouNumber   int    `json:"janHousouSuuryouNumber"` 	JanHousouSuuryouUnitName string `json:"janHousouSuuryouUnit"` // 入力は名称 	JanHousouSouryouNumber   int    `json:"janHousouSouryouNumber"` }  // Upsert は MA2 テーブルへの登録／更新を行います。 // - rec.JanCode/YjCode が空ならシーケンス発番 (新規) // - 空でなければそのまま (更新) func Upsert(db *sql.DB, rec *Record) error { 	// (1) 単位名称→コード変換マップを取得 	nameToCode := tani.BuildNameToCodeMap(usage.GetTaniMap())  	// (2) フィールド名→コードに置き換え 	if code, ok := nameToCode[strings.Trim(rec.HousouTaniUnitName, `"' `)]; ok { 		rec.HousouTaniUnitName = code 	} 	if code, ok := nameToCode[strings.Trim(rec.JanHousouSuuryouUnitName, `"' `)]; ok { 		rec.JanHousouSuuryouUnitName = code 	}  	// (3) 新規か更新か判定してシーケンス発番 	var jaSeq, yjSeq string 	var err error  	if rec.JanCode != "" && rec.YjCode != "" { 		// 更新: 入力されたコードをそのまま使う 		jaSeq = rec.JanCode 		yjSeq = rec.YjCode 	} else { 		// 新規: MA0.RegisterMA で発番 		jaSeq, yjSeq, err = ma0.RegisterMA(db, &ma0.MARecord{ 			JanCode:                rec.JanCode, 			ProductName:            rec.Shouhinmei, 			HousouKeitai:           rec.HousouKeitai, 			HousouTaniUnit:         rec.HousouTaniUnitName, 			HousouSouryouNumber:    rec.HousouSouryouNumber, 			JanHousouSuuryouNumber: rec.JanHousouSuuryouNumber, 			JanHousouSuuryouUnit:   rec.JanHousouSuuryouUnitName, 			JanHousouSouryouNumber: rec.JanHousouSouryouNumber, 		}) 		if err != nil { 			return fmt.Errorf("MA2 シーケンス発番エラー: %w", err) 		} 		rec.JanCode = jaSeq 		rec.YjCode = yjSeq 	}  	// (4) UPSERT INTO ma2 	stmt := ` INSERT OR REPLACE INTO ma2   (MA2JanCode, MA2YjCode, Shouhinmei,    HousouKeitai, HousouTaniUnit, HousouSouryouNumber,    JanHousouSuuryouNumber, JanHousouSuuryouUnit, JanHousouSouryouNumber) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?); ` 	if _, err := db.Exec( 		stmt, 		rec.JanCode, rec.YjCode, rec.Shouhinmei, 		rec.HousouKeitai, rec.HousouTaniUnitName, rec.HousouSouryouNumber, 		rec.JanHousouSuuryouNumber, rec.JanHousouSuuryouUnitName, rec.JanHousouSouryouNumber, 	); err != nil { 		return fmt.Errorf("ma2 UPSERT エラー: %w", err) 	}  	return nil }  // UpsertHandler は /api/ma2/upsert の HTTP ハンドラです func UpsertHandler(w http.ResponseWriter, r *http.Request) { 	if r.Method != http.MethodPost { 		http.Error(w, "method not allowed", http.StatusMethodNotAllowed) 		return 	}  	var rec Record 	if err := json.NewDecoder(r.Body).Decode(&rec); err != nil { 		http.Error(w, "bad request: "+err.Error(), http.StatusBadRequest) 		return 	}  	if err := Upsert(ma0.DB, &rec); err != nil { 		http.Error(w, "upsert error: "+err.Error(), http.StatusInternalServerError) 		return 	}  	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	json.NewEncoder(w).Encode(rec) }

----- C:\Dev\YAMATO\model\model.go -----
// model/model.go package model  // DATRecord は、DAT ファイルの1行分の情報を表す共通データモデルです。 // 注意: DAT ファイルから生の文字列として読み込む場合は、初期値として // "Name" フィールドに読み込まれますが、Shift‑JIS から UTF‑8 への変換後は // この値を "DatProductName" にセットします。 type DATRecord struct { 	CurrentOroshiCode string `json:"DatOroshiCode"`         // 卸コード 	DatDate           string `json:"DatDate"`               // 日付 	DatFlag           string `json:"DatDeliveryFlag"`       // 納品／返品フラグ 	DatRecNo          string `json:"DatReceiptNumber"`      // 伝票番号 	DatJan            string `json:"DatJanCode"`            // JANコード 	DatLineNo         string `json:"DatLineNumber"`         // 行番号 	DatProductName    string `json:"DatProductName"`        // 商品名（変換後の値） 	DatQty            string `json:"DatQuantity"`           // 数量 	DatUnit           string `json:"DatUnitPrice"`          // 単価または単位 	DatSub            string `json:"DatSubtotal"`           // 小計 	DatPkg            string `json:"DatPackagingDrugPrice"` // 包装薬価 	DatExp            string `json:"DatExpiryDate"`         // 賞味期限 	DatLot            string `json:"DatLotNumber"`          // ロット番号 }  // USAGERecord は、USAGE CSV の1行分の情報を表します。 type USAGERecord struct { 	UsageDate        string // 使用日 	UsageYjCode      string // YJコード 	UsageJanCode     string // JANコード（MA0のキーとして利用） 	UsageProductName string // 商品名 	UsageAmount      string // 数量または金額 	UsageUnit        string // 単位コード 	UsageUnitName    string // 単位名称（TANI マップ経由で解決） 	OrganizedFlag    int    // 1: organized, 0: disorganized }

----- C:\Dev\YAMATO\static\css\styles.css -----
/* リセット */ * {   margin: 0;   padding: 0;   box-sizing: border-box; } body {   font-family: Arial, sans-serif;   background: #fafafa;   color: #333;   padding: 1em; }  /* 共通ボタン */ .btn {   background: #007bff;   color: #fff;   border: none;   padding: 0.5em 1em;   border-radius: 4px;   cursor: pointer;   font-size: 0.9em; } .btn:hover {   background: #0056b3; }  /* ヘッダー */ #header {   position: sticky;   top: 0;   background: #fff;   border-bottom: 1px solid #ccc;   z-index: 10; } #header nav {   display: flex;   gap: 0.5em;   padding: 0.5em; } #indicator {   padding: 0.5em;   background: #e9ecef;   border-bottom: 1px solid #ccc;   font-size: 0.9em; }  /* フィルタ部 */ #aggregateFilter {   display: none;   margin: 1em 0;   padding: 1em;   background: #f5f5f5;   border: 1px solid #ccc;   border-radius: 4px; } .row {   display: flex;   flex-wrap: wrap;   align-items: center;   gap: 0.5em;   margin-bottom: 0.8em; } .row label {   font-size: 0.9em; } .row input[type="date"], .row input[type="text"] {   padding: 0.3em;   font-size: 0.9em;   border: 1px solid #aaa;   border-radius: 4px;   min-width: 8em; } .row input[type="checkbox"] {   transform: scale(1.1);   margin-right: 0.3em; }  /* 共通テーブル */ table {   width: 100%;   border-collapse: collapse;   margin-top: 1em; } th, td {   border: 1px solid #ccc;   padding: 0.5em;   font-size: 0.9em; } thead {   background: #e9ecef; } tr:nth-child(even) td {   background: #f8f9fa; }  /* 印刷 */ @media print {   @page {     size: A4 landscape;     margin: 10mm;   }   body * {     visibility: hidden;   }   #outputTable, #outputTable * {     visibility: visible;   }   #outputTable {     position: absolute;     top: 0;     left: 0;     width: 100%;   } }   /* ma2 編集用レイアウト */ .ma2-editor {   width: 100%;   margin: 1em auto;   padding: 1em; }  .ma2-grid.body {   display: grid;   row-gap: 1.5em; }  /* １レコード枠 */ .record {   border: 1px solid #ccc;   border-radius: 4px;   background: #fff;   padding: 1em; }  /* サブ行 */ .record .row {   display: grid;   gap: 0.8em 1em;   align-items: center;   margin-bottom: 0.8em; }  /* 各行ごとのカラム数指定 */ .record .row:nth-child(1) {    /* 1行目：JANコード・YJコード */   grid-template-columns: 1fr 1fr; } .record .row:nth-child(2) {    /* 2行目：商品名 */   grid-template-columns: 1fr; } .record .row:nth-child(3), .record .row:nth-child(4) {    /* 3・4行目：各3カラム */   grid-template-columns: repeat(3, 1fr); } .record .row:last-child {      /* 5行目：操作ボタン */   grid-template-columns: auto;   margin-bottom: 0; }  /* 入力要素の共通スタイル */ .record input, .record select {   width: 100%;   padding: 0.4em;   border: 1px solid #aaa;   border-radius: 4px;   font-size: 0.9em; }  /* ボタン */ .record button {   padding: 0.5em 1em;   background: #007bff;   color: #fff;   border: none;   border-radius: 4px;   cursor: pointer;   font-size: 0.9em; } .record button:hover {   background: #0056b3; }   /* ---- ここから追加 ---- */ .hidden {   display: none !important; } /* ---- ここまで ---- */ 

----- C:\Dev\YAMATO\static\js\aggregate.js -----
document.addEventListener("DOMContentLoaded", () => {   const aggregateBtn = document.getElementById("aggregateBtn");   const printBtn     = document.getElementById("printTable");   const filterDiv    = document.getElementById("aggregateFilter");   const formFilter   = document.getElementById("filterForm");   const indicator    = document.getElementById("indicator");   const table        = document.getElementById("outputTable");   const thead        = table.querySelector("thead");   const tbody        = table.querySelector("tbody");    // ── デフォルト日付を設定 ──   const fromInput = formFilter.querySelector('input[name="from"]');   const toInput   = formFilter.querySelector('input[name="to"]');   (function setDefaultDates() {     const today       = new Date();     const endOfMonth  = new Date(today.getFullYear(), today.getMonth() + 1, 0);     const fourMonths  = new Date(today);     fourMonths.setMonth(today.getMonth() - 4);      function fmt(d) {       const y  = d.getFullYear();       const m  = ('0' + (d.getMonth() + 1)).slice(-2);       const dd = ('0' + d.getDate()).slice(-2);       return `${y}-${m}-${dd}`;     }      fromInput.value = fmt(fourMonths);     toInput.value   = fmt(endOfMonth);   })();    // 初期化   thead.innerHTML = "";   tbody.innerHTML = "";    // 印刷ボタン   if (printBtn) {     printBtn.addEventListener("click", () => window.print());   }    // 集計ボタン   aggregateBtn.addEventListener("click", () => {     filterDiv.style.display = "block";     indicator.textContent   = "";     thead.innerHTML         = "";     tbody.innerHTML         = "";   });    // フィルタ実行...   formFilter.addEventListener("submit", async e => {     /* 以下、既存の submit 処理 */     e.preventDefault();     thead.innerHTML = "";     tbody.innerHTML = "";     const from   = fromInput.value;     const to     = toInput.value;     if (!from || !to) {       alert("開始日と終了日を指定してください");       return;     }     const filter = formFilter.querySelector('input[name="filter"]').value.trim();      // クエリ生成     const params = new URLSearchParams({ from, to });     if (filter) params.append("filter", filter);     ["doyaku","gekiyaku","mayaku","kakuseizai","kakuseizaiGenryou"]       .forEach(name => {         const cb = formFilter.querySelector(`input[name="${name}"]`);         if (cb && cb.checked) params.append(name, cb.value);       });     const kousei = Array.from(       formFilter.querySelectorAll('input[name="kouseishinyaku"]:checked')     ).map(cb => cb.value);     if (kousei.length) {       params.append("kouseishinyaku", kousei.join(","));     }      indicator.textContent = `集計中… (${from} ～ ${to})`;      let data;     try {       const res = await fetch(`/aggregate?${params.toString()}`);       if (!res.ok) throw new Error(res.statusText);       data = await res.json();     } catch (err) {       indicator.textContent = `集計失敗: ${err.message}`;       return;     }     if (!data || !Object.keys(data).length) {       indicator.textContent = "該当データがありません";       return;     }      // 描画: YJ → 包装分類キー → 明細     Object.entries(data).forEach(([yj, {productName, groups}]) => {       // YJヘッダ       const trYJ = document.createElement("tr");       trYJ.innerHTML = `<td colspan="14">         YJコード: ${yj}${productName ? " " + productName : ""}       </td>`;       tbody.appendChild(trYJ);        // 各包装分類キーごとに       Object.entries(groups).forEach(([pk, list]) => {         // 包装分類ヘッダ         const trPK = document.createElement("tr");         trPK.innerHTML = `<td colspan="14">包装分類: ${pk}</td>`;         tbody.appendChild(trPK);          // 列ヘッダー         const trCols = document.createElement("tr");         trCols.innerHTML = `           <th>日付</th><th>種類</th><th>数量</th>           <th>単位</th><th>包装</th><th>個数</th>           <th>単価</th><th>金額</th><th>期限</th>           <th>ロット</th><th>卸コード</th>           <th>伝票番号</th><th>行番号</th>`;         tbody.appendChild(trCols);          // 明細         list.forEach(d => {           const tr = document.createElement("tr");           tr.innerHTML = `             <td>${d.date}</td><td>${d.type}</td>             <td>${d.quantity}</td><td>${d.unit}</td><td>${d.packaging}</td>             <td>${d.count}</td><td>${d.unitPrice}</td><td>${d.subtotal}</td>             <td>${d.expiryDate}</td><td>${d.lotNumber}</td>             <td>${d.oroshiCode}</td><td>${d.receiptNumber}</td><td>${d.lineNumber}</td>`;           tbody.appendChild(tr);         });       });     });      indicator.textContent = `集計完了 (${from} ～ ${to})`;   }); });

----- C:\Dev\YAMATO\static\js\common.js -----
// static/js/common.js document.addEventListener("DOMContentLoaded", () => {   const table      = document.getElementById("outputTable");   const thead      = table.querySelector("thead");   const tbody      = table.querySelector("tbody");   const filter     = document.getElementById("aggregateFilter");   const editor     = document.querySelector(".ma2-editor");   const indicator  = document.getElementById("indicator");   const debug      = document.getElementById("debug");   const inoutForm  = document.getElementById("inoutForm");  // ← 追加    function resetUI() {     // MA2エディタを隠す     editor.style.display      = "none";     // 集計／DAT／USAGE／棚卸テーブルを表示     table.style.display       = "table";     // フィルタ部を隠す     filter.style.display      = "none";     // 出庫／入庫フォームを隠す     inoutForm.classList.add("hidden");     // テーブルクリア     thead.innerHTML           = "";     tbody.innerHTML           = "";     // インジケータ・デバッグ領域クリア     indicator.textContent     = "";     debug.textContent         = "";   }    // NAV の全ボタンで resetUI を実行（出庫・入庫ボタンも含む）   document     .querySelectorAll("header nav .btn")     .forEach(btn => btn.addEventListener("click", resetUI, true)); });

----- C:\Dev\YAMATO\static\js\dat.js -----
// File: static/js/dat.js document.addEventListener("DOMContentLoaded", () => {   const btn       = document.getElementById("datBtn");   const input     = document.getElementById("datInput");   const indicator = document.getElementById("indicator");   const table     = document.getElementById("outputTable");   const thead     = table.querySelector("thead");   const tbody     = table.querySelector("tbody");    // 初期化   thead.innerHTML = "";   tbody.innerHTML = "";    btn.addEventListener("click", () => {     // フィルタ部を隠す     const filterDiv = document.getElementById("aggregateFilter");     filterDiv.style.display = "none";      // テーブル初期化＋DATヘッダーセット     thead.innerHTML = `       <tr>         <th>卸コード</th><th>日付</th><th>納品／返品</th>         <th>伝票番号</th><th>行番号</th><th>JANコード</th>         <th>商品名</th><th>数量</th><th>単価</th>         <th>小計</th><th>包装薬価</th><th>有効期限</th><th>ロット番号</th>       </tr>`;     tbody.innerHTML = "";      input.click();   });    input.addEventListener("change", async () => {     if (!input.files.length) return;     indicator.textContent = "DATアップロード中…";      for (let file of input.files) {       const form = new FormData();       form.append("datFileInput[]", file);       try {         const res = await fetch("/uploadDat", { method: "POST", body: form });         const result = await res.json();         indicator.textContent = `${file.name}: DAT読み込み ${result.DATReadCount}件 | MA0作成 ${result.MA0CreatedCount}件 | 重複 ${result.DuplicateCount}件`;         // テーブル行追加         result.DATRecords.forEach(rec => {           const tr = document.createElement("tr");           tr.innerHTML = `             <td>${rec.DatOroshiCode}</td>             <td>${rec.DatDate}</td>             <td>${rec.DatDeliveryFlag}</td>             <td>${rec.DatReceiptNumber}</td>             <td>${rec.DatLineNumber}</td>             <td>${rec.DatJanCode}</td>             <td>${rec.DatProductName}</td>             <td>${rec.DatQuantity}</td>             <td>${rec.DatUnitPrice}</td>             <td>${rec.DatSubtotal}</td>             <td>${rec.DatPackagingDrugPrice}</td>             <td>${rec.DatExpiryDate}</td>             <td>${rec.DatLotNumber}</td>           `;           tbody.appendChild(tr);         });       } catch (err) {         console.error(err);         indicator.textContent = "DATアップロードエラー: " + err.message;       }     }     indicator.textContent += " 完了";     input.value = "";   }); });

----- C:\Dev\YAMATO\static\js\inout.js -----
// File: static/js/inout.js  document.addEventListener("DOMContentLoaded", () => {   const MAX_ROWS       = 10;   const inoutBtn       = document.getElementById("inoutBtn");   const inoutForm      = document.getElementById("inoutForm");   const existingNames  = document.getElementById("existingNames");   const newNameInput   = document.getElementById("newName");   const oroshiInput    = document.getElementById("oroshiCode");   const addClientBtn   = document.getElementById("addClientBtn");   const clearFormBtn   = document.getElementById("clearFormBtn");   const submitBtn      = document.getElementById("submitInoutBtn");   const dateInput      = document.getElementById("inoutDate");   const slipInput      = document.getElementById("inoutSlipNo");   const body           = document.getElementById("inoutBody");   const taxRateInput   = document.getElementById("taxRate");   const subtotalCell   = document.getElementById("subtotal");   const totalTaxCell   = document.getElementById("totalTax");   const grandTotalCell = document.getElementById("grandTotal");    const modal          = document.getElementById("drugModal");   const closeModalBtn  = document.getElementById("drugModalClose");   const searchName     = document.getElementById("searchName");   const searchSpec     = document.getElementById("searchSpec");   const searchBtn      = document.getElementById("searchBtn");   const resultsTbody   = document.querySelector("#searchResults tbody");    let currentRow = null;   let taniMap    = {};    // 単位マップ取得   fetch("/api/tani")     .then(res => res.json())     .then(m => taniMap = m)     .catch(console.error);    // 得意先一覧   async function loadClients() {     existingNames.innerHTML = `<option value="">── 選択 ──</option>`;     const list = await (await fetch("/api/inout")).json();     list.forEach(r => {       const o = document.createElement("option");       o.value = r.name; o.textContent = r.name;       existingNames.appendChild(o);     });   }    // 明細行初期化   function initRows() {     body.innerHTML = "";     for (let i = 1; i <= MAX_ROWS; i++) {       const tr = document.createElement("tr");       tr.dataset.line = i;       tr.innerHTML = `         <td>${i}</td>         <td class="yj-code"></td>         <td><input class="jan" type="text"></td>         <td class="item-name" style="cursor:pointer;">（商品名クリック）</td>         <td><input class="packaging" readonly></td>         <td><input class="qty" type="number" min="0"></td>         <td class="amount">0</td>         <td class="tax-amount">0</td>         <td><input class="expiryDate" type="date"></td>         <td><input class="lotNumber" type="text"></td>       `;       // 商品クリックでモーダルを開く       tr.querySelector(".item-name").addEventListener("click", () => {         currentRow = tr;         resultsTbody.innerHTML = "";         searchName.value = "";         searchSpec.value = "";         modal.classList.remove("hidden");       });        // 数量変更・期限変更で再計算       tr.querySelector(".qty").addEventListener("input", recalcAll);       tr.querySelector(".expiryDate").addEventListener("change", recalcAll);        body.appendChild(tr);     }   }    // 金額・税額再計算   function recalcAll() {     const rate = parseFloat(taxRateInput.value) || 0;     let sumNet = 0, sumTax = 0;      body.querySelectorAll("tr").forEach(row => {       const qtyIn   = parseFloat(row.querySelector(".qty").value) || 0;       const janQty  = parseFloat(row.dataset.num)   || 0;       const baseY   = parseFloat(row.dataset.baseY) || 0;       const realQty = janQty * qtyIn;       const net     = Math.round(baseY * realQty);       const tax     = Math.round(net * rate / 100);        row.querySelector(".amount").textContent     = net;       row.querySelector(".tax-amount").textContent = tax;       sumNet += net;       sumTax += tax;     });      subtotalCell.textContent = sumNet;     totalTaxCell.textContent = sumTax;     grandTotalCell.textContent = sumNet + sumTax;   }    // 得意先登録   addClientBtn.addEventListener("click", async () => {     const name = newNameInput.value.trim() || existingNames.value;     if (!name) {       alert("得意先を入力または選択してください");       return;     }     await fetch("/api/inout", {       method: "POST",       headers: {"Content-Type": "application/json"},       body: JSON.stringify({ name, oroshicode: oroshiInput.value.trim() })     });     await loadClients();   });    // フォームクリア   clearFormBtn.addEventListener("click", () => {     [dateInput, slipInput, existingNames, newNameInput, oroshiInput]       .forEach(el => el.value = "");     body.querySelectorAll("input").forEach(i => i.value = "");     recalcAll();   });    // モーダル閉じる   closeModalBtn.addEventListener("click", () => modal.classList.add("hidden"));    // 薬品検索   searchBtn.addEventListener("click", async () => {     const name = encodeURIComponent(searchName.value.trim());     const spec = encodeURIComponent(searchSpec.value.trim());     const list = await (await fetch(`/api/inout/search?name=${name}&spec=${spec}`)).json();     resultsTbody.innerHTML = "";      list.forEach(item => {       const tr = document.createElement("tr");       const baseY = item.unitYaku / (item.packTotal / item.coef);       tr.dataset.baseY = baseY.toFixed(6);       tr.dataset.num   = item.packQtyNumber;       tr.dataset.code  = item.packQtyUnitCode;       tr.dataset.unit  = item.unitName;        const mapped = taniMap[item.packQtyUnitCode] || item.unitName;       const suffix = item.packQtyUnitCode === 0 ? "" : `/${mapped}`;       const pkgStr = `${item.packQtyNumber}${item.unitName}${suffix}`;        tr.innerHTML = `         <td>${item.yj}</td>         <td>${item.jan}</td>         <td>${item.name}</td>         <td>${item.spec}</td>         <td>${pkgStr}</td>         <td>${baseY.toFixed(3)}</td>       `;        tr.addEventListener("click", () => {         currentRow.querySelector(".yj-code").textContent   = item.yj;         currentRow.querySelector(".jan").value             = item.jan;         currentRow.querySelector(".item-name").textContent = item.name;         currentRow.querySelector(".packaging").value       = pkgStr;         currentRow.dataset.baseY = tr.dataset.baseY;         currentRow.dataset.num   = tr.dataset.num;         currentRow.dataset.code  = tr.dataset.code;         currentRow.dataset.unit  = tr.dataset.unit;         modal.classList.add("hidden");         recalcAll();       });        resultsTbody.appendChild(tr);     });   });    // 明細送信   submitBtn.addEventListener("click", async () => {     if (!dateInput.value || !slipInput.value) {       alert("日付と伝票番号を入力してください");       return;     }     const type = document.querySelector('input[name="inoutType"]:checked').value;     const payload = [];      const rawDate = dateInput.value;               // "2025-12-25"     const iodDate = rawDate.replace(/-/g, "");     // "20251225"      body.querySelectorAll("tr").forEach(row => {       const jan    = row.querySelector(".jan").value;       const qtyIn  = parseFloat(row.querySelector(".qty").value) || 0;       const janQty = parseFloat(row.dataset.num) || 0;       if (!jan || qtyIn === 0) return;        const realQty = janQty * qtyIn;       const baseY   = parseFloat(row.dataset.baseY) || 0;       const net     = Math.round(baseY * realQty);       const janUnit = taniMap[row.dataset.code] || row.dataset.unit;        payload.push({         iodJan:           jan,         iodDate:          iodDate,         iodType:          type,         iodJanQuantity:   janQty,         iodJanUnit:       janUnit,         iodQuantity:      realQty,         iodUnit:          row.dataset.unit,         iodPackaging:     row.querySelector(".packaging").value,         iodUnitPrice:     baseY,         iodSubtotal:      net,         iodExpiryDate:    row.querySelector(".expiryDate").value.replace(/-/g, ""),         iodLotNumber:     row.querySelector(".lotNumber").value,         iodOroshiCode:    oroshiInput.value.trim(),         iodReceiptNumber: slipInput.value.replace(/-/g, ""),         iodLineNumber:    parseInt(row.dataset.line, 10),       });     });      console.log("DEBUG payload:", payload);     await fetch("/api/inout/save", {       method: "POST",       headers: {"Content-Type": "application/json"},       body: JSON.stringify(payload)     });     alert("保存しました");   });    // フォーム トグル   inoutBtn.addEventListener("click", async () => {     inoutForm.classList.toggle("hidden");     if (!inoutForm.classList.contains("hidden")) {       await loadClients();       initRows();       recalcAll();     }   });    // 初期化   initRows();   recalcAll(); });

----- C:\Dev\YAMATO\static\js\inventory.js -----
// static/js/inventory.js document.addEventListener("DOMContentLoaded", () => {   const btn       = document.getElementById("inventoryBtn")   const input     = document.getElementById("inventoryInput")   const indicator = document.getElementById("indicator")   const table     = document.getElementById("outputTable")   const thead     = table.querySelector("thead")   const tbody     = table.querySelector("tbody")   const debug     = document.getElementById("debug")    // 「棚卸」ボタン押下でヘッダー設定＆ファイル選択   btn.addEventListener("click", () => {     const filterDiv = document.getElementById("aggregateFilter")     if (filterDiv) filterDiv.style.display = "none"      thead.innerHTML = `       <tr>         <th>棚卸日</th>         <th>YJコード</th>         <th>JANコード</th>         <th>商品名</th>         <th>JAN包装数量</th>         <th>在庫数(包装単位)</th>         <th>包装単位</th>         <th>包装単位コード</th>         <th>在庫数(JAN包装単位)</th>         <th>JAN包装数量単位</th>         <th>JAN包装単位コード</th>       </tr>`     tbody.innerHTML = ""     debug.textContent = ""     indicator.textContent = ""     input.value = null     input.click()   })    // ファイル選択後の処理   input.addEventListener("change", async () => {     if (!input.files.length) return     indicator.textContent = "棚卸CSVアップロード中…"      const form = new FormData()     form.append("inventoryFile", input.files[0])      try {       const res = await fetch("/uploadInventory", {         method: "POST",         body: form       })       debug.textContent = `HTTP status: ${res.status}\n`       if (!res.ok) throw new Error(res.statusText)        const data = await res.json()       debug.textContent += JSON.stringify(data, null, 2)        tbody.innerHTML = ""       data.inventories.forEach(rec => {         const tr = document.createElement("tr")         tr.innerHTML = `           <td>${rec.InvDate}</td>           <td>${rec.InvYjCode}</td>           <td>${rec.InvJanCode}</td>           <td>${rec.InvProductName}</td>           <td>${rec.InvJanHousouSuuryouNumber}</td>           <td>${rec.Qty}</td>           <td>${rec.HousouTaniUnit}</td>           <td>${rec.InvHousouTaniUnit}</td>           <td>${rec.JanQty}</td>           <td>${rec.JanHousouSuuryouUnit}</td>           <td>${rec.InvJanHousouSuuryouUnit}</td>         `         tbody.appendChild(tr)       })        indicator.textContent = `棚卸 ${data.count} 件を取り込みました。`     } catch (err) {       console.error(err)       indicator.textContent = "棚卸アップロード失敗: " + err.message     }   }) })

----- C:\Dev\YAMATO\static\js\ma2.js -----
// static/js/ma2.js (() => {   // ── 1) 包装単位マップ取得 ──   let taniMap = {};   fetch("/api/tani")     .then(res => res.json())     .then(map => { taniMap = map; })     .catch(err => console.error("TANI取得失敗:", err));    document.addEventListener("DOMContentLoaded", () => {     const ma2Btn   = document.getElementById("ma2Btn");     const editor   = document.querySelector(".ma2-editor");     const bodyGrid = document.querySelector(".ma2-grid.body");      // ── フィールド定義 ──     const FIELDS = [       { key: "janCode",                label: "JANコード",           type: "text",    readOnly: true  },       { key: "yjCode",                 label: "YJコード",            type: "text"                   },       { key: "shouhinmei",             label: "商品名",              type: "text"                   },       { key: "housouKeitai",           label: "包装形態",            type: "text"                   },       { key: "housouSouryouNumber",    label: "包装総量",            type: "number"                 },       { key: "housouTaniUnit",         label: "包装単位",            type: "select"                 },       { key: "janHousouSuuryouNumber", label: "JAN包装数量",         type: "number"                 },       { key: "janHousouSouryouNumber", label: "JAN包装総量",         type: "number"                 },       { key: "janHousouSuuryouUnit",   label: "JAN包装数量単位",     type: "select"                 }     ];      ma2Btn.addEventListener("click", loadData);      // ── フィールド要素（input/select）を生成 ──     function createFieldCell(key, value = "", isNew) {       const def = FIELDS.find(f => f.key === key);       let el;       if (def.type === "select") {         el = document.createElement("select");         el.innerHTML = `<option value=""></option>`;         Object.entries(taniMap).forEach(([code, name]) => {           const o = document.createElement("option");           o.value = code;           o.textContent = name;           if (value === code) o.selected = true;           el.appendChild(o);         });       } else {         el = document.createElement("input");         el.type = def.type;         if (def.type === "number") el.min = "0";         if (!isNew && def.readOnly) el.readOnly = true;         el.value = value;       }       return el;     }      // ── １レコードを<table>で生成（<thead>ラベル行・<tbody>入力行・<tfoot>操作行＋プレビュー） ──     function makeRecord(data = {}, isNew = false) {       const table = document.createElement("table");       table.className = "record";        // thead：ラベル行       const thead = document.createElement("thead");       const headTr = document.createElement("tr");       FIELDS.forEach(def => {         const th = document.createElement("th");         th.textContent = def.label;         headTr.appendChild(th);       });       thead.appendChild(headTr);       table.appendChild(thead);        // tbody：入力行       const tbody = document.createElement("tbody");       const bodyTr = document.createElement("tr");       FIELDS.forEach(def => {         const td = document.createElement("td");         const val = data[def.key] != null ? data[def.key] : "";         td.appendChild(createFieldCell(def.key, val, isNew));         bodyTr.appendChild(td);       });       tbody.appendChild(bodyTr);       table.appendChild(tbody);        // tfoot：操作行＋プレビュー       const tfoot = document.createElement("tfoot");       const footTr = document.createElement("tr");       const footTd = document.createElement("td");       footTd.colSpan = FIELDS.length;        // 登録／更新ボタン       const btn = document.createElement("button");       btn.textContent = isNew ? "登録" : "更新";       btn.addEventListener("click", () => upsertRecord(table, isNew));       footTd.appendChild(btn);        // プレビュー用 span       const preview = document.createElement("span");       preview.className = "labelPreview";       preview.style.marginLeft = "8px";       footTd.appendChild(preview);        footTr.appendChild(footTd);       tfoot.appendChild(footTr);       table.appendChild(tfoot);        // ── プレビュー更新ロジック ──       const inputs = {};       FIELDS.forEach((def, i) => {         const cell = bodyTr.children[i];         inputs[def.key] = cell.querySelector(def.type === "select" ? "select" : "input");       });       function updatePreview() {         const f   = inputs.housouKeitai.value.trim();         const s   = inputs.housouSouryouNumber.value.trim();         const ut1 = inputs.housouTaniUnit.selectedOptions[0]?.text || "";         const jn  = inputs.janHousouSuuryouNumber.value.trim();         const mn  = inputs.janHousouSouryouNumber.value.trim();         const ut2 = inputs.janHousouSuuryouUnit.selectedOptions[0]?.text || "";         preview.textContent = `${f}${s}${ut1}（${jn}${ut1}×${mn}${ut2}）`;       }       // イベント紐付け       ["housouKeitai","housouSouryouNumber","housouTaniUnit",        "janHousouSuuryouNumber","janHousouSouryouNumber","janHousouSuuryouUnit"       ].forEach(key => {         const el = inputs[key];         const ev = el.tagName === "SELECT" ? "change" : "input";         el.addEventListener(ev, updatePreview);       });       updatePreview();        return table;     }      // ── データ取得＆描画 ──     async function loadData() {       editor.style.display = "block";       bodyGrid.innerHTML   = "";        // 新規入力行       bodyGrid.appendChild(makeRecord({}, true));        // 既存データ行       try {         const res  = await fetch("/api/ma2");         if (!res.ok) throw new Error(res.statusText);         const data = await res.json();         data.forEach(rec => bodyGrid.appendChild(makeRecord(rec, false)));       } catch (e) {         alert("データ取得失敗: " + e.message);       }     }      // ── upsert API 呼び出し ──     async function upsertRecord(tableEl, isNew) {       const rec    = {};       const elems  = tableEl.querySelectorAll("input,select");       elems.forEach((el, i) => {         const key = FIELDS[i].key;         let v = el.tagName === "SELECT" ? el.value : el.value.trim();         if (FIELDS[i].type === "number") v = parseInt(v, 10) || 0;         rec[key] = v;       });        try {         const res = await fetch("/api/ma2/upsert", {           method:  "POST",           headers: { "Content-Type": "application/json" },           body:    JSON.stringify(rec)         });         if (!res.ok) throw new Error(res.statusText);         alert((isNew ? "登録" : "更新") + " 成功");         loadData();       } catch (e) {         alert("エラー: " + e.message);       }     }   }); })();

----- C:\Dev\YAMATO\static\js\usage.js -----
// File: static/js/usage.js document.addEventListener("DOMContentLoaded", () => {   const btn       = document.getElementById("usageBtn");   const input     = document.getElementById("usageInput");   const indicator = document.getElementById("indicator");   const table     = document.getElementById("outputTable");   const thead     = table.querySelector("thead");   const tbody     = table.querySelector("tbody");    // 初期化   thead.innerHTML = "";   tbody.innerHTML = "";    btn.addEventListener("click", () => {     // フィルタ部を隠す     const filterDiv = document.getElementById("aggregateFilter");     filterDiv.style.display = "none";      // テーブル初期化＋USAGEヘッダーセット     thead.innerHTML = `       <tr>         <th>日付</th><th>YJコード</th><th>JANコード</th>         <th>商品名</th><th>数量</th><th>単位コード</th><th>単位名称</th>       </tr>`;     tbody.innerHTML = "";      input.click();   });    input.addEventListener("change", async () => {     if (!input.files.length) return;     indicator.textContent = "USAGEアップロード中…";      for (let file of input.files) {       const form = new FormData();       form.append("usageFileInput[]", file);       try {         const res = await fetch("/uploadUsage", { method: "POST", body: form });         const result = await res.json();         indicator.textContent = `${file.name}: USAGE読み込み ${result.TotalRecords}件`;         // テーブル行追加         result.USAGERecords.forEach(rec => {           const tr = document.createElement("tr");           tr.innerHTML = `             <td>${rec.usageDate}</td>             <td>${rec.usageYjCode}</td>             <td>${rec.usageJanCode}</td>             <td>${rec.usageProductName}</td>             <td>${rec.usageAmount}</td>             <td>${rec.usageUnit}</td>             <td>${rec.usageUnitName}</td>           `;           tbody.appendChild(tr);         });       } catch (err) {         console.error(err);         indicator.textContent = "USAGEアップロードエラー: " + err.message;       }     }     indicator.textContent += " 完了";     input.value = "";   }); });

----- C:\Dev\YAMATO\static\index.html -----
<!-- static/index.html --> <!DOCTYPE html> <html lang="ja"> <head>   <meta charset="UTF-8">   <title>YAMATO 集計システム</title>   <link rel="stylesheet" href="/static/css/styles.css">   <link rel="icon" href="/favicon.ico" type="image/x-icon">   <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"> </head> <body>   <!-- ヘッダー/ナビ -->   <header id="header">     <div id="indicator"></div>     <nav>       <button id="datBtn" class="btn">DAT</button>       <button id="usageBtn" class="btn">USAGE</button>       <button id="aggregateBtn" class="btn">集計</button>       <button id="inventoryBtn" class="btn">棚卸</button>       <button id="ma2Btn" class="btn">MA2編集</button>       <button id="inoutBtn" class="btn">出庫・入庫</button>       </nav>     <!-- 集計フィルタ --> <div id="aggregateFilter">       <form id="filterForm">         <div class="row">           <button type="button" id="printTable" class="btn">印刷</button>           <label>開始日:<input type="date" name="from" required></label>           <label>終了日:<input type="date" name="to"   required></label>           <label>商品名フィルタ:<input type="text" name="filter" placeholder="部分一致OK"></label>           <label><input type="checkbox" name="doyaku" value="1">毒薬</label>           <label><input type="checkbox" name="gekiyaku" value="1">劇薬</label>           <label><input type="checkbox" name="mayaku" value="1">麻薬</label>           <label><input type="checkbox" name="kouseishinyaku" value="1">向1</label>           <label><input type="checkbox" name="kouseishinyaku" value="2">向2</label>           <label><input type="checkbox" name="kouseishinyaku" value="3">向3</label>           <label><input type="checkbox" name="kakuseizai" value="1">覚せい剤</label>           <label><input type="checkbox" name="kakuseizaiGenryou" value="1">覚せい剤原料</label>           <button type="submit" class="btn">実行</button>         </div>       </form>     </div>   </header>    <!-- ファイル入力群（非表示） -->   <input type="file" id="datInput"       style="display:none" multiple>   <input type="file" id="usageInput"     style="display:none" multiple>   <input type="file" id="inventoryInput" style="display:none" accept=".csv">  <!-- DAT/USAGE/集計/棚卸 用テーブル --> <table id="outputTable">   <thead>     <tr>       <th>棚卸日</th>       <th>YJコード</th>       <th>JANコード</th>       <th>商品名</th>       <th>JAN包装数量</th>       <th>在庫数(包装単位)</th>       <th>包装単位</th>       <th>包装単位コード</th>       <th>在庫数(JAN包装単位)</th>       <th>JAN包装数量単位</th>       <th>JAN包装単位コード</th>     </tr>   </thead>   <tbody></tbody> </table>      <!-- デバッグ用表示 -->   <pre id="debug" style="background:#f0f0f0; padding:0.5em; margin:1em 0;"></pre>  <!-- MA2編集エリア（初期は非表示） --> <div class="ma2-editor" style="display:none;">     <div class="ma2-grid body"></div>     </div>  <!-- モーダルにスクロールを効かせる --> <style>   #drugModal {     max-height: 70vh;     overflow-y: auto;   } </style>  <!-- 出庫・入庫フォーム --> <form id="inoutForm" class="hidden" autocomplete="off" style="margin:1em 0;">     <!-- 出庫／入庫選択 -->   <div class="row">     <label><input type="radio" name="inoutType" value="出庫" checked> 出庫</label>     <label><input type="radio" name="inoutType" value="入庫"> 入庫</label>   </div>    <!-- 日付と伝票番号 -->   <div class="row">     <label>日付: <input type="date" id="inoutDate"></label>     <label>伝票番号: <input type="text" id="inoutSlipNo" placeholder="例:20250703-001"></label>   </div>    <!-- 得意先 -->   <div class="row">     <label>既存得意先:       <select id="existingNames">         <option value="">── 選択 ──</option>       </select>     </label>     <label>新規得意先: <input type="text" id="newName" placeholder="例：A薬局"></label>     <label>卸コード: <input type="text" id="oroshiCode" placeholder="例：ORO001"></label>     <button id="addClientBtn" class="btn">得意先登録</button>   </div>    <!-- 明細テーブル -->   <table id="inoutTable" border="1" cellpadding="4" style="width:100%; margin-top:1em;">     <thead>       <tr>         <th>行</th><th>YJ</th><th>JAN</th><th>商品名</th>         <th>包装</th><th>数量</th><th>金額(税抜)</th><th>税額</th>         <th>期限</th><th>ロット</th>       </tr>     </thead>     <tbody id="inoutBody">       <!-- JS が初期10行を生成 -->     </tbody>     <tfoot>       <tr>         <td colspan="6" style="text-align:right;">小計</td>         <td id="subtotal">0</td><td id="totalTax">0</td><td colspan="2"></td>       </tr>       <tr>         <td colspan="6" style="text-align:right;">           消費税率           <input type="number" id="taxRate" min="0" value="10" style="width:3em;">%         </td>         <td colspan="4" id="grandTotal">0</td>       </tr>     </tfoot>   </table>    <!-- 操作ボタン -->   <div class="row" style="justify-content:flex-end; margin-top:1em;">     <button id="clearFormBtn" class="btn">クリア</button>     <button id="submitInoutBtn" class="btn">登録</button>   </div> </div>      <!-- 検索モーダル --> <div id="drugModal" class="hidden"      style="position:fixed; top:20%; left:50%; transform:translateX(-50%);             background:#fff; border:1px solid #ccc; padding:1em; z-index:999;">   <h3>薬品検索</h3>   <div class="row">     <input type="text" id="searchName" placeholder="商品名キーワード">     <input type="text" id="searchSpec" placeholder="規格容量">     <button id="searchBtn" class="btn">検索</button>   </div>   <div id="searchResultsContainer" style="max-height:60vh; overflow-y:auto;">     <table id="searchResults" style="width:100%; margin-top:0.5em;">       <thead>         <tr>           <th>YJ</th><th>JAN</th><th>商品名</th>           <th>規格</th><th>包装</th><th>薬価</th>         </tr>       </thead>       <tbody></tbody>     </table>   </div>   <button id="drugModalClose" class="btn">閉じる</button> </div>     <!-- スクリプト読み込み順 -->   <script src="/static/js/common.js"></script>   <script src="/static/js/dat.js"></script>   <script src="/static/js/usage.js"></script>   <script src="/static/js/aggregate.js"></script>   <script src="/static/js/inventory.js"></script>   <script src="/static/js/ma2.js"></script>   <script src="/static/js/inout.js"></script>   </body> </html>

----- C:\Dev\YAMATO\tani\tani.go -----
package tani  import ( 	"encoding/csv" 	"io" 	"log"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // ParseTANI は、TANI CSV ファイルを Shift‑JIS から UTF‑8 に変換しながら読み込み、 // 各行のフィールド0（単位コード）をキー、フィールド1（単位名称）を値とするマップを返します。 func ParseTANI(r io.Reader) (map[string]string, error) { 	// Shift‑JIS → UTF‑8 変換を適用 	decoder := transform.NewReader(r, japanese.ShiftJIS.NewDecoder()) 	reader := csv.NewReader(decoder) 	records, err := reader.ReadAll() 	if err != nil { 		return nil, err 	} 	taniMap := make(map[string]string) 	for _, row := range records { 		if len(row) < 2 { 			log.Printf("TANI行のフィールド不足: %v", row) 			continue 		} 		code := row[0] 		unit := row[1] 		taniMap[code] = unit 	} 	return taniMap, nil }  func BuildNameToCodeMap(codeToName map[string]string) map[string]string { 	nameToCode := make(map[string]string, len(codeToName)) 	for code, name := range codeToName { 		nameToCode[name] = code 	} 	return nameToCode }

----- C:\Dev\YAMATO\usage\usage.go -----
// File: YAMATO/usage/usage.go package usage  import ( 	"bufio" 	"database/sql" 	"fmt" 	"io" 	"log" 	"os" 	"strconv" 	"strings"  	"YAMATO/jcshms" 	"YAMATO/ma0" 	"YAMATO/tani"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // UsageRecord は USAGE CSV の１行分を表します。 type UsageRecord struct { 	UsageDate        string `json:"usageDate"` 	UsageYjCode      string `json:"usageYjCode"` 	UsageJanCode     string `json:"usageJanCode"` 	UsageProductName string `json:"usageProductName"` 	UsageAmount      string `json:"usageAmount"` 	UsageUnit        string `json:"usageUnit"` 	UsageUnitName    string `json:"usageUnitName"` 	OrganizedFlag    int    `json:"organizedFlag"` }  var taniMap map[string]string  // loadTaniMap は内部用：TANI.CSV を読み込んで taniMap を初期化します。 func loadTaniMap() { 	if taniMap != nil { 		return 	} 	f, err := os.Open("C:\\Dev\\YAMATO\\SOU\\TANI.CSV") 	if err != nil { 		log.Printf("TANI file open error: %v", err) 		taniMap = make(map[string]string) 		return 	} 	defer f.Close()  	m, err := tani.ParseTANI(f) 	if err != nil { 		log.Printf("TANI parse error: %v", err) 		taniMap = make(map[string]string) 		return 	} 	taniMap = m }  // GetTaniName は単位コードから単位名称を返します。 func GetTaniName(code string) string { 	if taniMap == nil { 		loadTaniMap() 	} 	if name, ok := taniMap[code]; ok { 		return name 	} 	return "" }  // getOrganizedFlag は JCShms マスターに JAN があれば1、なければ0を返します。 func getOrganizedFlag(jan string) int { 	recs, err := jcshms.QueryByJan(ma0.DB, jan) 	if err != nil { 		log.Printf("[USAGE] OrganizedFlag error JAN=%q: %v", jan, err) 		return 0 	} 	if len(recs) > 0 { 		return 1 	} 	return 0 }  // ParseUsageFile は SHIFT-JIS USAGE CSV を読み込み、UsageRecord スライスを返します。 // MA0 未登録品は MA2 テーブルに登録します。 func ParseUsageFile(r io.Reader) ([]UsageRecord, error) { 	loadTaniMap() 	scanner := bufio.NewScanner(transform.NewReader(r, japanese.ShiftJIS.NewDecoder()))  	var records []UsageRecord 	headerSkipped := false  	for scanner.Scan() { 		line := scanner.Text() 		if !headerSkipped { 			headerSkipped = true 			continue 		} 		fields := strings.Split(line, ",") 		if len(fields) < 6 { 			log.Printf("[USAGE] skip short row: %v", fields) 			continue 		} 		for i := range fields { 			fields[i] = strings.Trim(fields[i], "\" ") 		}  		ur := UsageRecord{ 			UsageDate:        fields[0], 			UsageYjCode:      fields[1], 			UsageJanCode:     fields[2], 			UsageProductName: fields[3], 			UsageAmount:      fields[4], 			UsageUnit:        fields[5], 		} 		// 単位名称を解決 		if nm := GetTaniName(ur.UsageUnit); nm != "" { 			ur.UsageUnitName = nm 		} else { 			ur.UsageUnitName = ur.UsageUnit 		} 		// organizedFlag 		ur.OrganizedFlag = getOrganizedFlag(ur.UsageJanCode)  		// MA0 連携／MA2 登録 		ma0Rec, created, err0 := ma0.CheckOrCreateMA0(ur.UsageJanCode) 		if err0 != nil { 			log.Printf("[USAGE] MA0 lookup error JAN=%s: %v", ur.UsageJanCode, err0) 		}  		// マスター名未設定の既存品のみ MA2 登録 		if !created && ma0Rec.MA018JC018ShouhinMei == "" { 			hs, _ := strconv.Atoi(ma0Rec.MA044JC044HousouSouryouSuuchi) 			jsn, _ := strconv.Atoi(ma0Rec.MA131JA006HousouSuuryouSuuchi) 			jssn, _ := strconv.Atoi(ma0Rec.MA133JA008HousouSouryouSuuchi)  			mrec := &ma0.MARecord{ 				JanCode:                ur.UsageJanCode, 				ProductName:            ur.UsageProductName, 				HousouKeitai:           ma0Rec.MA037JC037HousouKeitai, 				HousouTaniUnit:         ur.UsageUnit, 				HousouSouryouNumber:    hs, 				JanHousouSuuryouNumber: jsn, 				JanHousouSuuryouUnit:   ma0Rec.MA132JA007HousouSuuryouTaniCode, 				JanHousouSouryouNumber: jssn, 			} 			// シーケンスを受け取りつつ登録（戻り値は破棄） 			_, _, err2 := ma0.RegisterMA(ma0.DB, mrec) 			if err2 != nil { 				log.Printf("[USAGE] MA2 registration error JAN=%s: %v", ur.UsageJanCode, err2) 			} 		}  		records = append(records, ur) 	} 	if err := scanner.Err(); err != nil { 		return nil, fmt.Errorf("USAGE scan error: %w", err) 	} 	return records, nil }  // LoadTaniMap は main.go から呼ばれる公開版です。 func LoadTaniMap() { 	loadTaniMap() }  // ReplaceUsageRecordsWithPeriod は main.go から呼ばれる公開版です。 // 指定期間の USAGE レコードを削除し、再挿入します。 func ReplaceUsageRecordsWithPeriod(db *sql.DB, recs []UsageRecord) error { 	if len(recs) == 0 { 		return nil 	} 	start, end := recs[0].UsageDate, recs[0].UsageDate 	for _, r := range recs { 		if r.UsageDate < start { 			start = r.UsageDate 		} 		if r.UsageDate > end { 			end = r.UsageDate 		} 	} 	if _, err := db.Exec( 		`DELETE FROM usagerecords WHERE usageDate BETWEEN ? AND ?`, 		start, end, 	); err != nil { 		return fmt.Errorf("delete existing USAGE error: %w", err) 	} 	stmt := `         INSERT OR REPLACE INTO usagerecords (           usageDate, usageYjCode, usageJanCode,           usageProductName, usageAmount, usageUnit,           usageUnitName, organizedFlag         ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)` 	for _, r := range recs { 		if _, err := db.Exec(stmt, 			r.UsageDate, r.UsageYjCode, r.UsageJanCode, 			r.UsageProductName, r.UsageAmount, r.UsageUnit, 			r.UsageUnitName, r.OrganizedFlag, 		); err != nil { 			return fmt.Errorf("insert USAGE record error: %w", err) 		} 	} 	return nil }  // GetTaniMap は main.go から呼ばれる公開版です。 func GetTaniMap() map[string]string { 	loadTaniMap() 	return taniMap }

----- C:\Dev\YAMATO\ma0handler.go -----
// File: ma0handler.go package main  import ( 	"YAMATO/ma0" 	"database/sql" 	"encoding/json" 	"log" 	"net/http" )  // assuming global DB *sql.DB exists  // 例: productNameHandler を main.go 内に記述する場合  func productNameHandler(w http.ResponseWriter, r *http.Request) { 	yj := r.URL.Query().Get("yj") 	if yj == "" { 		http.Error(w, "yj を指定してください", http.StatusBadRequest) 		return 	}  	// ma0 テーブルから MA018JC018ShouhinMei を取得するクエリ 	const sqlq = `       SELECT MA018JC018ShouhinMei       FROM ma0       WHERE MA009JC009YJCode = ?       LIMIT 1     ` 	var productName string 	if err := ma0.DB.QueryRow(sqlq, yj).Scan(&productName); err != nil { 		if err == sql.ErrNoRows { 			productName = "" // 存在しなければ空文字 		} else { 			log.Println("productName query error:", err) 			http.Error(w, "DBエラー", http.StatusInternalServerError) 			return 		} 	}  	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	json.NewEncoder(w).Encode(map[string]string{"productName": productName}) }

----- C:\Dev\YAMATO\main.go -----
// File: main.go package main  import ( 	"database/sql" 	"encoding/csv" 	"encoding/json" 	"io" 	"log" 	"mime" 	"net/http" 	"os" 	"os/exec" 	"runtime" 	"strings"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform"  	"YAMATO/aggregate" 	"YAMATO/dat" 	"YAMATO/inout" 	"YAMATO/inventory" 	"YAMATO/jcshms" 	"YAMATO/ma0" 	"YAMATO/ma2" 	"YAMATO/model" 	"YAMATO/usage"  	_ "github.com/mattn/go-sqlite3" )  func autoLaunchBrowser(url string) { 	var cmd string 	var args []string 	switch runtime.GOOS { 	case "windows": 		cmd = "cmd" 		args = []string{"/c", "start", url} 	case "darwin": 		cmd = "open" 		args = []string{url} 	default: 		cmd = "xdg-open" 		args = []string{url} 	} 	exec.Command(cmd, args...).Start() }  // loadCSV は Shift-JIS エンコードの CSV を指定テーブルにロードするユーティリティ func loadCSV(db *sql.DB, filePath, table string, cols int, skipHeader bool) error { 	f, err := os.Open(filePath) 	if err != nil { 		return err 	} 	defer f.Close()  	rd := csv.NewReader(transform.NewReader(f, japanese.ShiftJIS.NewDecoder())) 	rd.LazyQuotes = true 	rd.FieldsPerRecord = -1 	if skipHeader { 		if _, err := rd.Read(); err != nil { 			return err 		} 	}  	tx, err := db.Begin() 	if err != nil { 		return err 	} 	defer func() { 		if err != nil { 			tx.Rollback() 		} 	}()  	ph := make([]string, cols) 	for i := range ph { 		ph[i] = "?" 	} 	stmt, err := tx.Prepare( 		"INSERT OR REPLACE INTO " + table + " VALUES(" + strings.Join(ph, ",") + ")", 	) 	if err != nil { 		return err 	} 	defer stmt.Close()  	for { 		rec, err := rd.Read() 		if err == io.EOF { 			break 		} 		if err != nil { 			return err 		} 		args := make([]interface{}, len(rec)) 		for i, v := range rec { 			args[i] = v 		} 		if _, err := stmt.Exec(args...); err != nil { 			return err 		} 	} 	return tx.Commit() }  // uploadDatHandler は DAT ファイルのアップロードを処理 func uploadDatHandler(w http.ResponseWriter, r *http.Request) { 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	} 	if err := r.ParseMultipartForm(10 << 20); err != nil { 		http.Error(w, "Error parsing form: "+err.Error(), http.StatusBadRequest) 		return 	} 	files := r.MultipartForm.File["datFileInput[]"] 	if len(files) == 0 { 		http.Error(w, "No DAT file uploaded", http.StatusBadRequest) 		return 	}  	var all []model.DATRecord 	var total, created, dup int 	for _, fh := range files { 		file, err := fh.Open() 		if err != nil { 			log.Println("open DAT error:", err) 			continue 		} 		recs, tc, mc, dc, err := dat.ParseDATFile(file) 		file.Close() 		if err != nil { 			log.Println("parse DAT error:", err) 			continue 		} 		total += tc 		created += mc 		dup += dc 		all = append(all, recs...) 	}  	resp := map[string]interface{}{ 		"DATReadCount":    total, 		"MA0CreatedCount": created, 		"DuplicateCount":  dup, 		"DATRecords":      all, 	} 	w.Header().Set("Content-Type", "application/json") 	json.NewEncoder(w).Encode(resp) }  // uploadUsageHandler は USAGE ファイルのアップロードを処理 func uploadUsageHandler(w http.ResponseWriter, r *http.Request) { 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	} 	if err := r.ParseMultipartForm(10 << 20); err != nil { 		http.Error(w, "Error parsing form: "+err.Error(), http.StatusBadRequest) 		return 	} 	files := r.MultipartForm.File["usageFileInput[]"] 	if len(files) == 0 { 		http.Error(w, "No USAGE file uploaded", http.StatusBadRequest) 		return 	}  	var allRecords []usage.UsageRecord 	for _, fh := range files { 		file, err := fh.Open() 		if err != nil { 			log.Printf("Error opening usage file %s: %v", fh.Filename, err) 			continue 		} 		recs, err := usage.ParseUsageFile(file) 		file.Close() 		if err != nil { 			log.Printf("Error parsing usage file %s: %v", fh.Filename, err) 			continue 		} 		allRecords = append(allRecords, recs...) 	}  	if err := usage.ReplaceUsageRecordsWithPeriod(ma0.DB, allRecords); err != nil { 		log.Printf("Failed to replace USAGE records: %v", err) 		http.Error(w, "Failed to update USAGE records", http.StatusInternalServerError) 		return 	}  	response := map[string]interface{}{ 		"TotalRecords": len(allRecords), 		"USAGERecords": allRecords, 	} 	w.Header().Set("Content-Type", "application/json") 	json.NewEncoder(w).Encode(response) }  // uploadInventoryHandler は棚卸 CSV を受け取り、inventory テーブルに UPSERT // ———— JCSHMS に未登録の JAN だけ MA2 登録 ———— func uploadInventoryHandler(w http.ResponseWriter, r *http.Request) { 	// 1) POST チェック 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	}  	// 2) multipart/form-data からファイル取得 	file, _, err := r.FormFile("inventoryFile") 	if err != nil { 		http.Error(w, "ファイルが指定されていません", http.StatusBadRequest) 		return 	} 	defer file.Close()  	// 3) CSV → InventoryRecord スライス 	recs, err := inventory.ParseInventoryCSV(file) 	if err != nil { 		http.Error(w, "CSV読み込みエラー: "+err.Error(), http.StatusBadRequest) 		return 	}  	// 4) 各レコード処理 	for i := range recs { 		rec := &recs[i]  		// (A) MA0 に登録 or 取得 		maRec, _, err := ma0.CheckOrCreateMA0(rec.InvJanCode) 		if err != nil { 			log.Printf("[INVENTORY] MA0 lookup/create error JAN=%s: %v", rec.InvJanCode, err) 			continue 		}  		// (B) JCSHMS に存在するかチェック 		cs, err := jcshms.QueryByJan(ma0.DB, rec.InvJanCode) 		if err != nil { 			log.Printf("[INVENTORY] JCShms lookup error JAN=%s: %v", rec.InvJanCode, err) 		}  		if len(cs) == 0 { 			// → 未登録 JAN のみ MA2 登録 			_, yjSeq, err := ma0.RegisterMA(ma0.DB, &ma0.MARecord{ 				JanCode:                rec.InvJanCode, 				ProductName:            rec.InvProductName, 				HousouKeitai:           "", 				HousouTaniUnit:         rec.InvHousouTaniUnit, 				HousouSouryouNumber:    0, 				JanHousouSuuryouNumber: int(rec.InvJanHousouSuuryouNumber), 				JanHousouSuuryouUnit:   rec.JanHousouSuuryouUnit, 				JanHousouSouryouNumber: 0, 			}) 			if err != nil { 				log.Printf("[INVENTORY] MA2 registration error JAN=%s: %v", rec.InvJanCode, err) 			} else { 				rec.InvYjCode = yjSeq 			} 		} else { 			// → 既存 JAN は ma0 から返ってきた YJ を使う 			rec.InvYjCode = maRec.MA009JC009YJCode 		}  		// (C) inventory テーブルに UPSERT 		prod := maRec.MA018JC018ShouhinMei 		if prod == "" { 			prod = rec.InvProductName 		} 		if _, err := ma0.DB.Exec( 			`INSERT OR REPLACE INTO inventory          (invDate, invYjCode, invJanCode, invProductName,           invJanHousouSuuryouNumber, qty,           HousouTaniUnit, InvHousouTaniUnit,           janqty, JanHousouSuuryouUnit, InvJanHousouSuuryouUnit)        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, 			rec.InvDate, 			rec.InvYjCode, 			rec.InvJanCode, 			prod, 			rec.InvJanHousouSuuryouNumber, 			rec.Qty, 			rec.HousouTaniUnit, 			rec.InvHousouTaniUnit, 			rec.JanQty, 			rec.JanHousouSuuryouUnit, 			rec.InvJanHousouSuuryouUnit, 		); err != nil { 			log.Printf("[INVENTORY] upsert error JAN=%s: %v", rec.InvJanCode, err) 		} 	}  	// 5) 結果を JSON で返却 	resp := map[string]interface{}{ 		"count":       len(recs), 		"inventories": recs, 	} 	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	json.NewEncoder(w).Encode(resp) }  // listMa2Handler は MA2全件を空配列保証で返却 func listMa2Handler(w http.ResponseWriter, r *http.Request) { 	type rec struct { 		JanCode                string `json:"janCode"` 		YjCode                 string `json:"yjCode"` 		Shouhinmei             string `json:"shouhinmei"` 		HousouKeitai           string `json:"housouKeitai"` 		HousouTaniUnit         string `json:"housouTaniUnit"` 		HousouSouryouNumber    int    `json:"housouSouryouNumber"` 		JanHousouSuuryouNumber int    `json:"janHousouSuuryouNumber"` 		JanHousouSuuryouUnit   string `json:"janHousouSuuryouUnit"` 		JanHousouSouryouNumber int    `json:"janHousouSouryouNumber"` 	} 	out := make([]rec, 0) // nil→[] になる 	rows, err := ma0.DB.Query(`       SELECT MA2JanCode, MA2YjCode, Shouhinmei,              HousouKeitai, HousouTaniUnit, HousouSouryouNumber,              JanHousouSuuryouNumber, JanHousouSuuryouUnit, JanHousouSouryouNumber         FROM ma2        ORDER BY MA2JanCode     `) 	if err != nil { 		http.Error(w, err.Error(), http.StatusInternalServerError) 		return 	} 	defer rows.Close()  	for rows.Next() { 		var r rec 		if err := rows.Scan( 			&r.JanCode, &r.YjCode, &r.Shouhinmei, 			&r.HousouKeitai, &r.HousouTaniUnit, &r.HousouSouryouNumber, 			&r.JanHousouSuuryouNumber, &r.JanHousouSuuryouUnit, &r.JanHousouSouryouNumber, 		); err != nil { 			continue 		} 		out = append(out, r) 	} 	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	json.NewEncoder(w).Encode(out) }  func main() { 	// Register MIME types for static files 	mime.AddExtensionType(".css", "text/css") 	mime.AddExtensionType(".js", "application/javascript")  	// Open SQLite database 	db, err := sql.Open("sqlite3", "yamato.db") 	if err != nil { 		log.Fatalf("DB open error: %v", err) 	} 	defer db.Close()  	// Provide DB to other packages 	ma0.DB = db 	inout.DB = db 	aggregate.SetDB(db) 	usage.LoadTaniMap()  	// Apply schema.sql 	schema, err := os.ReadFile("schema.sql") 	if err != nil { 		log.Fatalf("read schema.sql error: %v", err) 	} 	if _, err := db.Exec(string(schema)); err != nil { 		log.Fatalf("exec schema.sql error: %v", err) 	}  	// Load master CSVs 	if err := loadCSV(db, "SOU/JCSHMS.CSV", "jcshms", 125, false); err != nil { 		log.Fatalf("load JCSHMS failed: %v", err) 	} 	if err := loadCSV(db, "SOU/JANCODE.CSV", "jancode", 30, true); err != nil { 		log.Fatalf("load JANCODE failed: %v", err) 	}  	// Static file server 	fs := http.FileServer(http.Dir("./static")) 	http.Handle("/", fs) 	http.Handle("/static/", http.StripPrefix("/static/", fs)) 	http.HandleFunc("/api/productName", productNameHandler)  	// API endpoints 	http.HandleFunc("/uploadDat", uploadDatHandler) 	http.HandleFunc("/uploadUsage", uploadUsageHandler) 	http.HandleFunc("/uploadInventory", uploadInventoryHandler) 	http.HandleFunc("/aggregate", aggregate.AggregateHandler)  	// Inout (出庫・入庫) 	http.HandleFunc("/api/inout", inout.Handler) 	http.HandleFunc("/api/inout/search", inout.ProductSearchHandler) 	http.HandleFunc("/api/inout/save", inout.SaveIODHandler)  	// MA2 endpoints 	http.HandleFunc("/api/ma2", listMa2Handler) 	http.HandleFunc("/api/ma2/upsert", ma2.UpsertHandler)  	// TANI map endpoint 	http.HandleFunc("/api/tani", func(w http.ResponseWriter, r *http.Request) { 		w.Header().Set("Content-Type", "application/json; charset=utf-8") 		json.NewEncoder(w).Encode(usage.GetTaniMap()) 	})  	// Auto-open browser 	go autoLaunchBrowser("http://localhost:8080")  	log.Println("Server listening on :8080") 	log.Fatal(http.ListenAndServe(":8080", nil)) }

----- C:\Dev\YAMATO\schema.sql -----
CREATE TABLE IF NOT EXISTS ma0 ( MA000JC000JanCode TEXT KEY, MA001JC001JanCodeShikibetsuKubun TEXT, MA002JC002KyuuJanCode TEXT, MA003JC003TouitsuShouhinCode TEXT, MA004JC004YakkaKijunShuusaiIyakuhinCode TEXT, MA005JC005KyuuYakkaKijunShuusaiIyakuhinCode TEXT, MA006JC006HOTBangou TEXT, MA007JC007ReseputoCode1 TEXT, MA008JC008ReseputoCode2 TEXT, MA009JC009YJCode TEXT, MA010JC010YakkouBunruiCode TEXT, MA011JC011YakkouBunruiMei TEXT, MA012JC012ShiyouKubunCode TEXT, MA013JC013ShiyouKubunMeishou TEXT, MA014JC014NihonHyoujunShouhinBunruiBangou TEXT, MA015JC015ZaikeiCode TEXT, MA016JC016ZaikeiKigou TEXT, MA017JC017ZaikeiMeishou TEXT, MA018JC018ShouhinMei TEXT, MA019JC019HankakuShouhinMei TEXT, MA020JC020KikakuYouryou TEXT, MA021JC021HankakuKikakuYouryou TEXT, MA022JC022ShouhinMeiKanaSortYou TEXT, MA023JC023ShouhinMeiKanpouYouKigou TEXT, MA024JC024IppanMeishou TEXT, MA025JC025YakkaShuusaiMeishou TEXT, MA026JC026ReseYouIyakuhinMei TEXT, MA027JC027KikakuTaniMeishou TEXT, MA028JC028KikakuTaniKigou TEXT, MA029JC029HanbaiMotoCode TEXT, MA030JC030HanbaiMotoMei TEXT, MA031JC031HanbaiMotoMeiKana TEXT, MA032JC032HanbaiMotoMeiRyakuMei TEXT, MA033JC033SeizouMotoYunyuuMotoCode TEXT, MA034JC034SeizouMotoYunyuuMotoMei TEXT, MA035JC035SeizouMotoYunyuuMotoMeiKana TEXT, MA036JC036SeizouMotoYunyuuMotoMeiRyakuMei TEXT, MA037JC037HousouKeitai TEXT, MA038JC038HousouTaniSuuchi TEXT, MA039JC039HousouTaniTani TEXT, MA040JC040HousouSuuryouSuuchi TEXT, MA041JC041HousouSuuryouTani TEXT, MA042JC042HousouIrisuuSuuchi TEXT, MA043JC043HousouIrisuuTani TEXT, MA044JC044HousouSouryouSuuchi TEXT, MA045JC045HousouSouryouTani TEXT, MA046JC046HousouYouryouSuuchi TEXT, MA047JC047HousouYouryouTani TEXT, MA048JC048HousouYakkaKeisuu TEXT, MA049JC049GenTaniYakka TEXT, MA050JC050GenHousouYakka TEXT, MA051JC051KyuuTaniYakka TEXT, MA052JC052KyuuHousouYakka TEXT, MA053JC053KokuchiTaniYakka TEXT, MA054JC054KokuchiHousouYakka TEXT, MA055JC055YakkaKaiteiNengappi TEXT, MA056JC056YakkaShuusaiNengappi TEXT, MA057JC057HanbaiKaishiNengappi TEXT, MA058JC058KeikaSochiNengappi TEXT, MA059JC059HatsubaiChuushiNengappi TEXT, MA060JC060SeizouChuushiNengappi TEXT, MA061JC061Doyaku TEXT, MA062JC062Gekiyaku TEXT, MA063JC063Mayaku TEXT, MA064JC064Kouseishinyaku TEXT, MA065JC065Kakuseizai TEXT, MA066JC066KakuseizaiGenryou TEXT, MA067JC067ShuukanseiIyakuhin TEXT, MA068JC068ShiteiIyakuhinKyuuKiseiKubun TEXT, MA069JC069YoushijiIyakuhinKyuuKiseiKubun TEXT, MA070JC070KetsuekiSeizai TEXT, MA071JC071NihonYakkyokuhou TEXT, MA072JC072YuukouKikan TEXT, MA073JC073ShiyouKigen TEXT, MA074JC074SeibutsuYuraiSeihin TEXT, MA075JC075Kouhatsuhin TEXT, MA076JC076YakkaKijunShuusaiKubun TEXT, MA077JC077KichouGimuKubun TEXT, MA078JC078ShouhinKubun TEXT, MA079JC079ShohousenIyakuhin TEXT, MA080JC080ChuushiRiyuuKubun TEXT, MA081JC081MishiyouKyuuRyuutsuuKanrihin TEXT, MA082JC082MentenanceKubun TEXT, MA083JC083KouhatsuhinNoAruSenpatsuhinKubun TEXT, MA084JC084AuthorizedGeneric TEXT, MA085JC085Biosimilar TEXT, MA086JC086HighRiskYaku TEXT, MA087JC087Kuuran1 TEXT, MA088JC088Kuuran2 TEXT, MA089JC089Shitsuon TEXT, MA090JC090Reisho TEXT, MA091JC091Reizou TEXT, MA092JC092Reitou TEXT, MA093JC093Ansho TEXT, MA094JC094Shakou TEXT, MA095JC095KimitsuYouki TEXT, MA096JC096MippuuYouki TEXT, MA097JC097Kikenbutsu TEXT, MA098JC098OndoJougen TEXT, MA099JC099OndoKagen TEXT, MA100JC100SonotaHokanjouNoChui TEXT, MA101JC101KonpouJuuryouSizeJouhou TEXT, MA102JC102KonpouTateSizeJouhou TEXT, MA103JC103KonpouYokoSizeJouhou TEXT, MA104JC104KonpouTakasaSizeJouhou TEXT, MA105JC105KonpouTaiseiSizeJouhou TEXT, MA106JC106ChuubakoJuuryouSizeJouhou TEXT, MA107JC107ChuubakoTateSizeJouhou TEXT, MA108JC108ChuubakoYokoSizeJouhou TEXT, MA109JC109ChuubakoTakasaSizeJouhou TEXT, MA110JC110ChuubakoTaiseiSizeJouhou TEXT, MA111JC111KousouJuuryouSizeJouhou TEXT, MA112JC112KousouTateSizeJouhou TEXT, MA113JC113KousouYokoSizeJouhou TEXT, MA114JC114KousouTakasaSizeJouhou TEXT, MA115JC115KousouTaiseiSizeJouhou TEXT, MA116JC116KonpouTaniSizeJouhou TEXT, MA117JC117HacchuuTaniSizeJouhou TEXT, MA118JC118KoushinKubun TEXT, MA119JC119TourokuNengappi TEXT, MA120JC120KoushinNengappi TEXT, MA121JC121ChouzaiHousouTaniCode TEXT, MA122JC122HanbaiHousouTaniCode TEXT, MA123JC123IppanMeiKana TEXT, MA124JC124SaishouYakkaKansanKeisuu TEXT, MA125JA000 TEXT, MA126JA001JanCode TEXT, MA127JA002 TEXT, MA128JA003 TEXT, MA129JA004 TEXT, MA130JA005 TEXT, MA131JA006HousouSuuryouSuuchi TEXT, MA132JA007HousouSuuryouTaniCode TEXT, MA133JA008HousouSouryouSuuchi TEXT, MA134JA009 TEXT, MA135JA010 TEXT, MA136JA011 TEXT, MA137JA012 TEXT, MA138JA013 TEXT, MA139JA014 TEXT, MA140JA015 TEXT, MA141JA016 TEXT, MA142JA017 TEXT, MA143JA018 TEXT, MA144JA019 TEXT, MA145JA020 TEXT, MA146JA021 TEXT, MA147JA022 TEXT, MA148JA023 TEXT, MA149JA024 TEXT, MA150JA025 TEXT, MA151JA026 TEXT, MA152JA027 TEXT, MA153JA028 TEXT, MA154JA029 TEXT,   PRIMARY KEY(MA000JC000JanCode) );  CREATE TABLE IF NOT EXISTS jcshms ( JC000JanCode TEXT, JC001JanCodeShikibetsuKubun TEXT, JC002KyuuJanCode TEXT, JC003TouitsuShouhinCode TEXT, JC004YakkaKijunShuusaiIyakuhinCode TEXT, JC005KyuuYakkaKijunShuusaiIyakuhinCode TEXT, JC006HOTBangou TEXT, JC007ReseputoCode1 TEXT, JC008ReseputoCode2 TEXT, JC009YJCode TEXT, JC010YakkouBunruiCode TEXT, JC011YakkouBunruiMei TEXT, JC012ShiyouKubunCode TEXT, JC013ShiyouKubunMeishou TEXT, JC014NihonHyoujunShouhinBunruiBangou TEXT, JC015ZaikeiCode TEXT, JC016ZaikeiKigou TEXT, JC017ZaikeiMeishou TEXT, JC018ShouhinMei TEXT, JC019HankakuShouhinMei TEXT, JC020KikakuYouryou TEXT, JC021HankakuKikakuYouryou TEXT, JC022ShouhinMeiKanaSortYou TEXT, JC023ShouhinMeiKanpouYouKigou TEXT, JC024IppanMeishou TEXT, JC025YakkaShuusaiMeishou TEXT, JC026ReseYouIyakuhinMei TEXT, JC027KikakuTaniMeishou TEXT, JC028KikakuTaniKigou TEXT, JC029HanbaiMotoCode TEXT, JC030HanbaiMotoMei TEXT, JC031HanbaiMotoMeiKana TEXT, JC032HanbaiMotoMeiRyakuMei TEXT, JC033SeizouMotoYunyuuMotoCode TEXT, JC034SeizouMotoYunyuuMotoMei TEXT, JC035SeizouMotoYunyuuMotoMeiKana TEXT, JC036SeizouMotoYunyuuMotoMeiRyakuMei TEXT, JC037HousouKeitai TEXT, JC038HousouTaniSuuchi TEXT, JC039HousouTaniTani TEXT, JC040HousouSuuryouSuuchi TEXT, JC041HousouSuuryouTani TEXT, JC042HousouIrisuuSuuchi TEXT, JC043HousouIrisuuTani TEXT, JC044HousouSouryouSuuchi TEXT, JC045HousouSouryouTani TEXT, JC046HousouYouryouSuuchi TEXT, JC047HousouYouryouTani TEXT, JC048HousouYakkaKeisuu TEXT, JC049GenTaniYakka TEXT, JC050GenHousouYakka TEXT, JC051KyuuTaniYakka TEXT, JC052KyuuHousouYakka TEXT, JC053KokuchiTaniYakka TEXT, JC054KokuchiHousouYakka TEXT, JC055YakkaKaiteiNengappi TEXT, JC056YakkaShuusaiNengappi TEXT, JC057HanbaiKaishiNengappi TEXT, JC058KeikaSochiNengappi TEXT, JC059HatsubaiChuushiNengappi TEXT, JC060SeizouChuushiNengappi TEXT, JC061Doyaku TEXT, JC062Gekiyaku TEXT, JC063Mayaku TEXT, JC064Kouseishinyaku TEXT, JC065Kakuseizai TEXT, JC066KakuseizaiGenryou TEXT, JC067ShuukanseiIyakuhin TEXT, JC068ShiteiIyakuhinKyuuKiseiKubun TEXT, JC069YoushijiIyakuhinKyuuKiseiKubun TEXT, JC070KetsuekiSeizai TEXT, JC071NihonYakkyokuhou TEXT, JC072YuukouKikan TEXT, JC073ShiyouKigen TEXT, JC074SeibutsuYuraiSeihin TEXT, JC075Kouhatsuhin TEXT, JC076YakkaKijunShuusaiKubun TEXT, JC077KichouGimuKubun TEXT, JC078ShouhinKubun TEXT, JC079ShohousenIyakuhin TEXT, JC080ChuushiRiyuuKubun TEXT, JC081MishiyouKyuuRyuutsuuKanrihin TEXT, JC082MentenanceKubun TEXT, JC083KouhatsuhinNoAruSenpatsuhinKubun TEXT, JC084AuthorizedGeneric TEXT, JC085Biosimilar TEXT, JC086HighRiskYaku TEXT, JC087Kuuran1 TEXT, JC088Kuuran2 TEXT, JC089Shitsuon TEXT, JC090Reisho TEXT, JC091Reizou TEXT, JC092Reitou TEXT, JC093Ansho TEXT, JC094Shakou TEXT, JC095KimitsuYouki TEXT, JC096MippuuYouki TEXT, JC097Kikenbutsu TEXT, JC098OndoJougen TEXT, JC099OndoKagen TEXT, JC100SonotaHokanjouNoChui TEXT, JC101KonpouJuuryouSizeJouhou TEXT, JC102KonpouTateSizeJouhou TEXT, JC103KonpouYokoSizeJouhou TEXT, JC104KonpouTakasaSizeJouhou TEXT, JC105KonpouTaiseiSizeJouhou TEXT, JC106ChuubakoJuuryouSizeJouhou TEXT, JC107ChuubakoTateSizeJouhou TEXT, JC108ChuubakoYokoSizeJouhou TEXT, JC109ChuubakoTakasaSizeJouhou TEXT, JC110ChuubakoTaiseiSizeJouhou TEXT, JC111KousouJuuryouSizeJouhou TEXT, JC112KousouTateSizeJouhou TEXT, JC113KousouYokoSizeJouhou TEXT, JC114KousouTakasaSizeJouhou TEXT, JC115KousouTaiseiSizeJouhou TEXT, JC116KonpouTaniSizeJouhou TEXT, JC117HacchuuTaniSizeJouhou TEXT, JC118KoushinKubun TEXT, JC119TourokuNengappi TEXT, JC120KoushinNengappi TEXT, JC121ChouzaiHousouTaniCode TEXT, JC122HanbaiHousouTaniCode TEXT, JC123IppanMeiKana TEXT, JC124SaishouYakkaKansanKeisuu TEXT, PRIMARY KEY(JC000JanCode) );  CREATE TABLE IF NOT EXISTS jancode ( JA000 TEXT, JA001JanCode TEXT, JA002 TEXT, JA003 TEXT, JA004 TEXT, JA005 TEXT, JA006HousouSuuryouSuuchi TEXT, JA007HousouSuuryouTaniCode TEXT, JA008HousouSouryouSuuchi TEXT, JA009 TEXT, JA010 TEXT, JA011 TEXT, JA012 TEXT, JA013 TEXT, JA014 TEXT, JA015 TEXT, JA016 TEXT, JA017 TEXT, JA018 TEXT, JA019 TEXT, JA020 TEXT, JA021 TEXT, JA022 TEXT, JA023 TEXT, JA024 TEXT, JA025 TEXT, JA026 TEXT, JA027 TEXT, JA028 TEXT, JA029 TEXT, PRIMARY KEY(JA001JanCode) );  CREATE TABLE IF NOT EXISTS datrecords (   CurrentOroshiCode         TEXT,   DatDate                   TEXT,   DatDeliveryFlag           TEXT,   DatReceiptNumber          TEXT,   DatLineNumber             TEXT,   DatJanCode                TEXT,   DatProductName            TEXT,   DatQuantity               TEXT,   DatUnitPrice              TEXT,   DatSubtotal               TEXT,   DatPackagingDrugPrice     TEXT,   DatExpiryDate             TEXT,   DatLotNumber              TEXT,   organizedFlag             INTEGER,   PRIMARY KEY (     CurrentOroshiCode,     DatDeliveryFlag,     DatDate,     DatReceiptNumber,     DatLineNumber,     DatJanCode   ) );      CREATE TABLE IF NOT EXISTS usagerecords (     usageDate         TEXT,     usageYjCode       TEXT,     usageJanCode      TEXT,     usageProductName  TEXT,     usageAmount       TEXT,     usageUnit         TEXT,     usageUnitName     TEXT,     organizedFlag     INTEGER NOT NULL DEFAULT 0, -- 1: organized, 0: disorganized     PRIMARY KEY (usageDate, usageYjCode, usageJanCode) );  CREATE TABLE IF NOT EXISTS inventory (   invDate                     TEXT    NOT NULL,  -- 棚卸日 (YYYYMMDD)   invYjCode                   TEXT    NOT NULL,  -- YJコード   invJanCode                  TEXT    NOT NULL,  -- JANコード   invProductName              TEXT    NOT NULL,  -- 商品名   invJanHousouSuuryouNumber   REAL    NOT NULL,  -- JAN包装数量（数字）   qty                         REAL    NOT NULL,  -- 在庫数（包装単位）   HousouTaniUnit              TEXT    NOT NULL,  -- 包装単位（単位）   InvHousouTaniUnit           TEXT    NOT NULL,  -- 包装単位（単位）逆マッピング   janqty                      REAL    NOT NULL,  -- 在庫数（JAN包装単位）   JanHousouSuuryouUnit        TEXT    NOT NULL,  -- JAN包装単位（単位）   InvJanHousouSuuryouUnit     TEXT    NOT NULL,  -- JAN包装単位（単位）逆マッピング   PRIMARY KEY (invDate, invJanCode) );      -- ========================================= -- MA2 テーブル定義 -- ========================================= CREATE TABLE IF NOT EXISTS ma2 (     MA2JanCode                TEXT    PRIMARY KEY,     MA2YjCode                 TEXT,     Shouhinmei                TEXT,     HousouKeitai              TEXT,     HousouTaniUnit            TEXT,     HousouSouryouNumber       INTEGER,     JanHousouSuuryouNumber    INTEGER,     JanHousouSuuryouUnit      TEXT,     JanHousouSouryouNumber    INTEGER  );   -- ====================================================== -- ② シーケンス管理テーブル定義（１回だけ実行） -- ====================================================== CREATE TABLE IF NOT EXISTS code_sequences (   name    TEXT    PRIMARY KEY,   -- 'MA1Y','MA1J','MA2Y','MA2J','INOUT' など   last_no INTEGER NOT NULL       -- 最終発番番号 );  INSERT OR IGNORE INTO code_sequences(name, last_no) VALUES   ('MA1Y',  0),   ('MA1J',  0),   ('MA2Y',  0),   ('MA2J',  0),   ('INOUT', 0);  -- ====================================================== -- ③ inout テーブル定義 -- ====================================================== CREATE TABLE IF NOT EXISTS inout (   inoutcode   TEXT    PRIMARY KEY,  -- 自動採番コード (例: 'INOUT00001')   name        TEXT    NOT NULL,     -- 入力された名称   oroshicode  TEXT    NOT NULL      -- 卸コード );  CREATE TABLE IF NOT EXISTS iod (   iodJan            TEXT    NOT NULL,   iodDate           TEXT    NOT NULL,   iodType           TEXT    NOT NULL,   iodJanQuantity    REAL    NOT NULL,   iodJanUnit        TEXT    NOT NULL,   iodQuantity       REAL    NOT NULL,   iodUnit           TEXT    NOT NULL,   iodPackaging      TEXT    NOT NULL,   iodUnitPrice      REAL    NOT NULL,   iodSubtotal       REAL    NOT NULL,   iodExpiryDate     TEXT,   iodLotNumber      TEXT,   iodOroshiCode     TEXT,   iodReceiptNumber  TEXT    NOT NULL,   iodLineNumber     INTEGER NOT NULL,   PRIMARY KEY(iodReceiptNumber, iodLineNumber) );   

