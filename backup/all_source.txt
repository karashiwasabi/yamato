----- C:\Dev\YAMATO\dat\dat.go -----
// File: dat/dat.go package dat  import ( 	"bufio" 	"io" 	"log" 	"strings"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform"  	"YAMATO/ma0" )  // DATRecord は DAT ファイルの1行をパースした結果を保持します。 type DATRecord struct { 	DatOroshiCode         string // S行の卸コード 	DatDate               string // D行の日付 	DatDeliveryFlag       string // D行のデリバリフラグ 	DatReceiptNumber      string // D行の受領番号 	DatLineNumber         string // D行の行番号 	DatJanCode            string // D行のJANコード 	DatProductName        string // D行の商品名 	DatQuantity           string // D行の数量 	DatUnitPrice          string // D行の単価 	DatSubtotal           string // D行の小計 	DatPackagingDrugPrice string // D行の包装医薬品価格 	DatExpiryDate         string // D行の賞味期限 	DatLotNumber          string // D行のロット番号 }  // ProcessDATRecord は、スライス化したレコードデータで MA0 を作成／参照します。 func ProcessDATRecord(data []string) (bool, error) { 	if len(data) < 5 { 		return false, nil 	} 	jan := data[4] 	_, created, err := ma0.CheckOrCreateMA0(jan) 	if err != nil { 		return false, err 	} 	if created { 		log.Printf("[DAT] New MA0 record: JAN=%q", jan) 	} 	return created, nil }  // ParseDATFile は io.Reader から DAT を読み込み、各レコードを DATRecord にして返します。 // 同時に ProcessDATRecord で MA0 の登録も行い、件数も集計します。 func ParseDATFile(r io.Reader) (records []DATRecord, totalCount, ma0CreatedCount, duplicateCount int, err error) { 	scanner := bufio.NewScanner(r) 	var currentOroshiCode string  	for scanner.Scan() { 		line := scanner.Text() 		if len(line) < 3 { 			continue 		} 		if strings.HasPrefix(line, "S20") { 			currentOroshiCode = strings.TrimSpace(line[3:14]) 			continue 		} 		if !strings.HasPrefix(line, "D20") { 			continue 		} 		totalCount++  		// フィールド抽出 		get := func(s string, start, end int) string { 			if len(s) >= end { 				return s[start:end] 			} else if len(s) > start { 				return s[start:] 			} 			return "" 		} 		datDate := get(line, 4, 12) 		datFlag := get(line, 3, 4) 		datRecNo := get(line, 12, 22) 		datLineNo := get(line, 22, 24) 		datJan := get(line, 25, 38) 		rawName := get(line, 38, 78) 		name, _, convErr := transform.String(japanese.ShiftJIS.NewDecoder(), rawName) 		if convErr != nil { 			name = rawName 		} 		datQty := get(line, 78, 83) 		datUnit := get(line, 83, 92) 		datSub := get(line, 92, 101) 		datPkg := get(line, 101, 109) 		datExp := get(line, 109, 115) 		datLot := get(line, 115, 121)  		rec := DATRecord{ 			DatOroshiCode:         currentOroshiCode, 			DatDate:               datDate, 			DatDeliveryFlag:       datFlag, 			DatReceiptNumber:      datRecNo, 			DatLineNumber:         datLineNo, 			DatJanCode:            datJan, 			DatProductName:        name, 			DatQuantity:           datQty, 			DatUnitPrice:          datUnit, 			DatSubtotal:           datSub, 			DatPackagingDrugPrice: datPkg, 			DatExpiryDate:         datExp, 			DatLotNumber:          datLot, 		} 		records = append(records, rec)  		// MA0連携 		created, procErr := ProcessDATRecord([]string{ 			currentOroshiCode, 			datDate, 			datFlag, 			datRecNo, 			datJan, 			datLineNo, 			name, 			datQty, 			datUnit, 			datSub, 			datPkg, 			datExp, 			datLot, 		}) 		if procErr != nil { 			return records, totalCount, ma0CreatedCount, duplicateCount, procErr 		} 		if created { 			ma0CreatedCount++ 		} else { 			duplicateCount++ 		} 	} 	if scanErr := scanner.Err(); scanErr != nil { 		err = scanErr 	} 	return }

----- C:\Dev\YAMATO\jancode\jancode.go -----
// File: jancode/jancode.go package jancode  import ( 	"database/sql" 	"fmt" )  type JANCODERecord struct { 	JA000                      string 	JA001JanCode               string 	JA002                      string 	JA003                      string 	JA004                      string 	JA005                      string 	JA006HousouSuuryouSuuchi   string 	JA007HousouSuuryouTaniCode string 	JA008HousouSouryouSuuchi   string 	JA009                      string 	JA010                      string 	JA011                      string 	JA012                      string 	JA013                      string 	JA014                      string 	JA015                      string 	JA016                      string 	JA017                      string 	JA018                      string 	JA019                      string 	JA020                      string 	JA021                      string 	JA022                      string 	JA023                      string 	JA024                      string 	JA025                      string 	JA026                      string 	JA027                      string 	JA028                      string 	JA029                      string }  func QueryJANCODERecordsByJan(db *sql.DB, jan string) ([]JANCODERecord, error) { 	query := `         SELECT  JA001JanCode, JA006HousouSuuryouSuuchi         FROM jancode         WHERE JA001JanCode = ?     ` 	rows, err := db.Query(query, jan) 	if err != nil { 		return nil, fmt.Errorf("jancode query error: %v", err) 	} 	defer rows.Close()  	var records []JANCODERecord 	for rows.Next() { 		var rec JANCODERecord 		if err := rows.Scan(&rec.JA001JanCode, &rec.JA006HousouSuuryouSuuchi); err != nil { 			return nil, fmt.Errorf("jancode row scan error: %v", err) 		} 		records = append(records, rec) 	} 	if err := rows.Err(); err != nil { 		return nil, fmt.Errorf("jancode rows error: %v", err) 	} 	return records, nil }

----- C:\Dev\YAMATO\jcshms\jcshms.go -----
// File: jchms/jcshms.go package jcshms  import ( 	"database/sql" 	"fmt" 	"reflect" )  type JCFields struct { 	JC000JanCode                           string 	JC001JanCodeShikibetsuKubun            string 	JC002KyuuJanCode                       string 	JC003TouitsuShouhinCode                string 	JC004YakkaKijunShuusaiIyakuhinCode     string 	JC005KyuuYakkaKijunShuusaiIyakuhinCode string 	JC006HOTBangou                         string 	JC007ReseputoCode1                     string 	JC008ReseputoCode2                     string 	JC009YJCode                            string 	JC010YakkouBunruiCode                  string 	JC011YakkouBunruiMei                   string 	JC012ShiyouKubunCode                   string 	JC013ShiyouKubunMeishou                string 	JC014NihonHyoujunShouhinBunruiBangou   string 	JC015ZaikeiCode                        string 	JC016ZaikeiKigou                       string 	JC017ZaikeiMeishou                     string 	JC018ShouhinMei                        string 	JC019HankakuShouhinMei                 string 	JC020KikakuYouryou                     string 	JC021HankakuKikakuYouryou              string 	JC022ShouhinMeiKanaSortYou             string 	JC023ShouhinMeiKanpouYouKigou          string 	JC024IppanMeishou                      string 	JC025YakkaShuusaiMeishou               string 	JC026ReseYouIyakuhinMei                string 	JC027KikakuTaniMeishou                 string 	JC028KikakuTaniKigou                   string 	JC029HanbaiMotoCode                    string 	JC030HanbaiMotoMei                     string 	JC031HanbaiMotoMeiKana                 string 	JC032HanbaiMotoMeiRyakuMei             string 	JC033SeizouMotoYunyuuMotoCode          string 	JC034SeizouMotoYunyuuMotoMei           string 	JC035SeizouMotoYunyuuMotoMeiKana       string 	JC036SeizouMotoYunyuuMotoMeiRyakuMei   string 	JC037HousouKeitai                      string 	JC038HousouTaniSuuchi                  string 	JC039HousouTaniTani                    string 	JC040HousouSuuryouSuuchi               string 	JC041HousouSuuryouTani                 string 	JC042HousouIrisuuSuuchi                string 	JC043HousouIrisuuTani                  string 	JC044HousouSouryouSuuchi               string 	JC045HousouSouryouTani                 string 	JC046HousouYouryouSuuchi               string 	JC047HousouYouryouTani                 string 	JC048HousouYakkaKeisuu                 string 	JC049GenTaniYakka                      string 	JC050GenHousouYakka                    string 	JC051KyuuTaniYakka                     string 	JC052KyuuHousouYakka                   string 	JC053KokuchiTaniYakka                  string 	JC054KokuchiHousouYakka                string 	JC055YakkaKaiteiNengappi               string 	JC056YakkaShuusaiNengappi              string 	JC057HanbaiKaishiNengappi              string 	JC058KeikaSochiNengappi                string 	JC059HatsubaiChuushiNengappi           string 	JC060SeizouChuushiNengappi             string 	JC061Doyaku                            string 	JC062Gekiyaku                          string 	JC063Mayaku                            string 	JC064Kouseishinyaku                    string 	JC065Kakuseizai                        string 	JC066KakuseizaiGenryou                 string 	JC067ShuukanseiIyakuhin                string 	JC068ShiteiIyakuhinKyuuKiseiKubun      string 	JC069YoushijiIyakuhinKyuuKiseiKubun    string 	JC070KetsuekiSeizai                    string 	JC071NihonYakkyokuhou                  string 	JC072YuukouKikan                       string 	JC073ShiyouKigen                       string 	JC074SeibutsuYuraiSeihin               string 	JC075Kouhatsuhin                       string 	JC076YakkaKijunShuusaiKubun            string 	JC077KichouGimuKubun                   string 	JC078ShouhinKubun                      string 	JC079ShohousenIyakuhin                 string 	JC080ChuushiRiyuuKubun                 string 	JC081MishiyouKyuuRyuutsuuKanrihin      string 	JC082MentenanceKubun                   string 	JC083KouhatsuhinNoAruSenpatsuhinKubun  string 	JC084AuthorizedGeneric                 string 	JC085Biosimilar                        string 	JC086HighRiskYaku                      string 	JC087Kuuran1                           string 	JC088Kuuran2                           string 	JC089Shitsuon                          string 	JC090Reisho                            string 	JC091Reizou                            string 	JC092Reitou                            string 	JC093Ansho                             string 	JC094Shakou                            string 	JC095KimitsuYouki                      string 	JC096MippuuYouki                       string 	JC097Kikenbutsu                        string 	JC098OndoJougen                        string 	JC099OndoKagen                         string 	JC100SonotaHokanjouNoChui              string 	JC101KonpouJuuryouSizeJouhou           string 	JC102KonpouTateSizeJouhou              string 	JC103KonpouYokoSizeJouhou              string 	JC104KonpouTakasaSizeJouhou            string 	JC105KonpouTaiseiSizeJouhou            string 	JC106ChuubakoJuuryouSizeJouhou         string 	JC107ChuubakoTateSizeJouhou            string 	JC108ChuubakoYokoSizeJouhou            string 	JC109ChuubakoTakasaSizeJouhou          string 	JC110ChuubakoTaiseiSizeJouhou          string 	JC111KousouJuuryouSizeJouhou           string 	JC112KousouTateSizeJouhou              string 	JC113KousouYokoSizeJouhou              string 	JC114KousouTakasaSizeJouhou            string 	JC115KousouTaiseiSizeJouhou            string 	JC116KonpouTaniSizeJouhou              string 	JC117HacchuuTaniSizeJouhou             string 	JC118KoushinKubun                      string 	JC119TourokuNengappi                   string 	JC120KoushinNengappi                   string 	JC121ChouzaiHousouTaniCode             string 	JC122HanbaiHousouTaniCode              string 	JC123IppanMeiKana                      string 	JC124SaishouYakkaKansanKeisuu          string }  type JCSHMSRecord struct { 	// JANCode は、SELECT 文で「JC000JanCode AS JC000」により取得された値です。 	JC000JanCode string 	// JC は、CSVの125フィールドを保持します。 	JC JCFields }  func QueryJCSHMSRecordsByJan(db *sql.DB, jan string) ([]JCSHMSRecord, error) { 	query := `         SELECT  JC000JanCode, JC001JanCodeShikibetsuKubun, JC002KyuuJanCode, JC003TouitsuShouhinCode, JC004YakkaKijunShuusaiIyakuhinCode, JC005KyuuYakkaKijunShuusaiIyakuhinCode, JC006HOTBangou, JC007ReseputoCode1, JC008ReseputoCode2, JC009YJCode, JC010YakkouBunruiCode, JC011YakkouBunruiMei, JC012ShiyouKubunCode, JC013ShiyouKubunMeishou, JC014NihonHyoujunShouhinBunruiBangou, JC015ZaikeiCode, JC016ZaikeiKigou, JC017ZaikeiMeishou, JC018ShouhinMei, JC019HankakuShouhinMei, JC020KikakuYouryou, JC021HankakuKikakuYouryou, JC022ShouhinMeiKanaSortYou, JC023ShouhinMeiKanpouYouKigou, JC024IppanMeishou, JC025YakkaShuusaiMeishou, JC026ReseYouIyakuhinMei, JC027KikakuTaniMeishou, JC028KikakuTaniKigou, JC029HanbaiMotoCode, JC030HanbaiMotoMei, JC031HanbaiMotoMeiKana, JC032HanbaiMotoMeiRyakuMei, JC033SeizouMotoYunyuuMotoCode, JC034SeizouMotoYunyuuMotoMei, JC035SeizouMotoYunyuuMotoMeiKana, JC036SeizouMotoYunyuuMotoMeiRyakuMei, JC037HousouKeitai, JC038HousouTaniSuuchi, JC039HousouTaniTani, JC040HousouSuuryouSuuchi, JC041HousouSuuryouTani, JC042HousouIrisuuSuuchi, JC043HousouIrisuuTani, JC044HousouSouryouSuuchi, JC045HousouSouryouTani, JC046HousouYouryouSuuchi, JC047HousouYouryouTani, JC048HousouYakkaKeisuu, JC049GenTaniYakka, JC050GenHousouYakka, JC051KyuuTaniYakka, JC052KyuuHousouYakka, JC053KokuchiTaniYakka, JC054KokuchiHousouYakka, JC055YakkaKaiteiNengappi, JC056YakkaShuusaiNengappi, JC057HanbaiKaishiNengappi, JC058KeikaSochiNengappi, JC059HatsubaiChuushiNengappi, JC060SeizouChuushiNengappi, JC061Doyaku, JC062Gekiyaku, JC063Mayaku, JC064Kouseishinyaku, JC065Kakuseizai, JC066KakuseizaiGenryou, JC067ShuukanseiIyakuhin, JC068ShiteiIyakuhinKyuuKiseiKubun, JC069YoushijiIyakuhinKyuuKiseiKubun, JC070KetsuekiSeizai, JC071NihonYakkyokuhou, JC072YuukouKikan, JC073ShiyouKigen, JC074SeibutsuYuraiSeihin, JC075Kouhatsuhin, JC076YakkaKijunShuusaiKubun, JC077KichouGimuKubun, JC078ShouhinKubun, JC079ShohousenIyakuhin, JC080ChuushiRiyuuKubun, JC081MishiyouKyuuRyuutsuuKanrihin, JC082MentenanceKubun, JC083KouhatsuhinNoAruSenpatsuhinKubun, JC084AuthorizedGeneric, JC085Biosimilar, JC086HighRiskYaku, JC087Kuuran1, JC088Kuuran2, JC089Shitsuon, JC090Reisho, JC091Reizou, JC092Reitou, JC093Ansho, JC094Shakou, JC095KimitsuYouki, JC096MippuuYouki, JC097Kikenbutsu, JC098OndoJougen, JC099OndoKagen, JC100SonotaHokanjouNoChui, JC101KonpouJuuryouSizeJouhou, JC102KonpouTateSizeJouhou, JC103KonpouYokoSizeJouhou, JC104KonpouTakasaSizeJouhou, JC105KonpouTaiseiSizeJouhou, JC106ChuubakoJuuryouSizeJouhou, JC107ChuubakoTateSizeJouhou, JC108ChuubakoYokoSizeJouhou, JC109ChuubakoTakasaSizeJouhou, JC110ChuubakoTaiseiSizeJouhou, JC111KousouJuuryouSizeJouhou, JC112KousouTateSizeJouhou, JC113KousouYokoSizeJouhou, JC114KousouTakasaSizeJouhou, JC115KousouTaiseiSizeJouhou, JC116KonpouTaniSizeJouhou, JC117HacchuuTaniSizeJouhou, JC118KoushinKubun, JC119TourokuNengappi, JC120KoushinNengappi, JC121ChouzaiHousouTaniCode, JC122HanbaiHousouTaniCode, JC123IppanMeiKana, JC124SaishouYakkaKansanKeisuu         FROM jcshms         WHERE JC000JanCode = ?     ` 	rows, err := db.Query(query, jan) 	if err != nil { 		return nil, fmt.Errorf("jcshms query error: %v", err) 	} 	defer rows.Close()  	const colsCount = 125 	var records []JCSHMSRecord 	for rows.Next() { 		columns := make([]interface{}, colsCount) 		columnPtrs := make([]interface{}, colsCount) 		for i := 0; i < colsCount; i++ { 			columnPtrs[i] = &columns[i] 		} 		if err := rows.Scan(columnPtrs...); err != nil { 			return nil, fmt.Errorf("jcshms scan error: %v", err) 		}  		var rec JCSHMSRecord 		// 最初のカラム（エイリアス済みの JC000）を JANCode として取得 		if b, ok := columns[0].([]byte); ok { 			rec.JC000JanCode = string(b) 		} else if columns[0] != nil { 			rec.JC000JanCode = columns[0].(string) 		}  		var jf JCFields 		jfVal := reflect.ValueOf(&jf).Elem() 		for i := 0; i < colsCount; i++ { 			var colStr string 			if b, ok := columns[i].([]byte); ok { 				colStr = string(b) 			} else if columns[i] != nil { 				colStr = columns[i].(string) 			} 			if i < jfVal.NumField() && jfVal.Field(i).CanSet() { 				jfVal.Field(i).SetString(colStr) 			} else { 				return nil, fmt.Errorf("failed to set JCFields field index %d", i) 			} 		} 		rec.JC = jf 		records = append(records, rec) 	} 	if err := rows.Err(); err != nil { 		return nil, fmt.Errorf("jcshms rows error: %v", err) 	} 	return records, nil }

----- C:\Dev\YAMATO\js\dat.js -----
document.addEventListener('DOMContentLoaded', () => {   const uploadBtn = document.getElementById('uploadBtn');   const fileInput = document.getElementById('fileInput');   const indicator = document.getElementById('indicator');   const output = document.getElementById('output');    if (!uploadBtn || !fileInput || !indicator || !output) {     console.error("必要な DOM 要素が見つかりません。HTML を確認してください。");     return;   }    // アップロードボタンをクリックでファイル選択ダイアログを表示   uploadBtn.addEventListener('click', () => {     fileInput.click();   });    fileInput.addEventListener('change', async () => {     const files = fileInput.files;     if (!files || files.length === 0) {       console.warn("ファイルが選択されていません。");       return;     }      // Indicator に選択されたファイル数を表示     indicator.textContent = `${files.length} 個のファイルが選択されました。`;      let results = [];     // 各ファイルを1個ずつアップロード     for (let i = 0; i < files.length; i++) {       const formData = new FormData();       formData.append('file', files[i]);        try {         const res = await fetch('/upload', {           method: 'POST',           body: formData         });         if (!res.ok) throw new Error(`HTTPエラー: ${res.status}`);         // レスポンスはプレーンテキストとして受け取る         const text = await res.text();         results.push(`[${files[i].name}]:\n${text}`);       } catch (err) {         results.push(`[${files[i].name}]: アップロード失敗 (${err.message})`);       }     }     output.textContent = results.join("\n\n");     indicator.textContent += " アップロード処理が完了しました。";     fileInput.value = '';   }); });

----- C:\Dev\YAMATO\ma0\mao.go -----
// File: ma0/ma0.go package ma0  import ( 	"database/sql" 	"encoding/json" 	"fmt" 	"log" 	"net/http" 	"sync"  	"YAMATO/jancode" 	"YAMATO/jcshms" )  type MA0Record struct { 	MA000JC000JanCode                           string 	MA001JC001JanCodeShikibetsuKubun            string 	MA002JC002KyuuJanCode                       string 	MA003JC003TouitsuShouhinCode                string 	MA004JC004YakkaKijunShuusaiIyakuhinCode     string 	MA005JC005KyuuYakkaKijunShuusaiIyakuhinCode string 	MA006JC006HOTBangou                         string 	MA007JC007ReseputoCode1                     string 	MA008JC008ReseputoCode2                     string 	MA009JC009YJCode                            string 	MA010JC010YakkouBunruiCode                  string 	MA011JC011YakkouBunruiMei                   string 	MA012JC012ShiyouKubunCode                   string 	MA013JC013ShiyouKubunMeishou                string 	MA014JC014NihonHyoujunShouhinBunruiBangou   string 	MA015JC015ZaikeiCode                        string 	MA016JC016ZaikeiKigou                       string 	MA017JC017ZaikeiMeishou                     string 	MA018JC018ShouhinMei                        string 	MA019JC019HankakuShouhinMei                 string 	MA020JC020KikakuYouryou                     string 	MA021JC021HankakuKikakuYouryou              string 	MA022JC022ShouhinMeiKanaSortYou             string 	MA023JC023ShouhinMeiKanpouYouKigou          string 	MA024JC024IppanMeishou                      string 	MA025JC025YakkaShuusaiMeishou               string 	MA026JC026ReseYouIyakuhinMei                string 	MA027JC027KikakuTaniMeishou                 string 	MA028JC028KikakuTaniKigou                   string 	MA029JC029HanbaiMotoCode                    string 	MA030JC030HanbaiMotoMei                     string 	MA031JC031HanbaiMotoMeiKana                 string 	MA032JC032HanbaiMotoMeiRyakuMei             string 	MA033JC033SeizouMotoYunyuuMotoCode          string 	MA034JC034SeizouMotoYunyuuMotoMei           string 	MA035JC035SeizouMotoYunyuuMotoMeiKana       string 	MA036JC036SeizouMotoYunyuuMotoMeiRyakuMei   string 	MA037JC037HousouKeitai                      string 	MA038JC038HousouTaniSuuchi                  string 	MA039JC039HousouTaniTani                    string 	MA040JC040HousouSuuryouSuuchi               string 	MA041JC041HousouSuuryouTani                 string 	MA042JC042HousouIrisuuSuuchi                string 	MA043JC043HousouIrisuuTani                  string 	MA044JC044HousouSouryouSuuchi               string 	MA045JC045HousouSouryouTani                 string 	MA046JC046HousouYouryouSuuchi               string 	MA047JC047HousouYouryouTani                 string 	MA048JC048HousouYakkaKeisuu                 string 	MA049JC049GenTaniYakka                      string 	MA050JC050GenHousouYakka                    string 	MA051JC051KyuuTaniYakka                     string 	MA052JC052KyuuHousouYakka                   string 	MA053JC053KokuchiTaniYakka                  string 	MA054JC054KokuchiHousouYakka                string 	MA055JC055YakkaKaiteiNengappi               string 	MA056JC056YakkaShuusaiNengappi              string 	MA057JC057HanbaiKaishiNengappi              string 	MA058JC058KeikaSochiNengappi                string 	MA059JC059HatsubaiChuushiNengappi           string 	MA060JC060SeizouChuushiNengappi             string 	MA061JC061Doyaku                            string 	MA062JC062Gekiyaku                          string 	MA063JC063Mayaku                            string 	MA064JC064Kouseishinyaku                    string 	MA065JC065Kakuseizai                        string 	MA066JC066KakuseizaiGenryou                 string 	MA067JC067ShuukanseiIyakuhin                string 	MA068JC068ShiteiIyakuhinKyuuKiseiKubun      string 	MA069JC069YoushijiIyakuhinKyuuKiseiKubun    string 	MA070JC070KetsuekiSeizai                    string 	MA071JC071NihonYakkyokuhou                  string 	MA072JC072YuukouKikan                       string 	MA073JC073ShiyouKigen                       string 	MA074JC074SeibutsuYuraiSeihin               string 	MA075JC075Kouhatsuhin                       string 	MA076JC076YakkaKijunShuusaiKubun            string 	MA077JC077KichouGimuKubun                   string 	MA078JC078ShouhinKubun                      string 	MA079JC079ShohousenIyakuhin                 string 	MA080JC080ChuushiRiyuuKubun                 string 	MA081JC081MishiyouKyuuRyuutsuuKanrihin      string 	MA082JC082MentenanceKubun                   string 	MA083JC083KouhatsuhinNoAruSenpatsuhinKubun  string 	MA084JC084AuthorizedGeneric                 string 	MA085JC085Biosimilar                        string 	MA086JC086HighRiskYaku                      string 	MA087JC087Kuuran1                           string 	MA088JC088Kuuran2                           string 	MA089JC089Shitsuon                          string 	MA090JC090Reisho                            string 	MA091JC091Reizou                            string 	MA092JC092Reitou                            string 	MA093JC093Ansho                             string 	MA094JC094Shakou                            string 	MA095JC095KimitsuYouki                      string 	MA096JC096MippuuYouki                       string 	MA097JC097Kikenbutsu                        string 	MA098JC098OndoJougen                        string 	MA099JC099OndoKagen                         string 	MA100JC100SonotaHokanjouNoChui              string 	MA101JC101KonpouJuuryouSizeJouhou           string 	MA102JC102KonpouTateSizeJouhou              string 	MA103JC103KonpouYokoSizeJouhou              string 	MA104JC104KonpouTakasaSizeJouhou            string 	MA105JC105KonpouTaiseiSizeJouhou            string 	MA106JC106ChuubakoJuuryouSizeJouhou         string 	MA107JC107ChuubakoTateSizeJouhou            string 	MA108JC108ChuubakoYokoSizeJouhou            string 	MA109JC109ChuubakoTakasaSizeJouhou          string 	MA110JC110ChuubakoTaiseiSizeJouhou          string 	MA111JC111KousouJuuryouSizeJouhou           string 	MA112JC112KousouTateSizeJouhou              string 	MA113JC113KousouYokoSizeJouhou              string 	MA114JC114KousouTakasaSizeJouhou            string 	MA115JC115KousouTaiseiSizeJouhou            string 	MA116JC116KonpouTaniSizeJouhou              string 	MA117JC117HacchuuTaniSizeJouhou             string 	MA118JC118KoushinKubun                      string 	MA119JC119TourokuNengappi                   string 	MA120JC120KoushinNengappi                   string 	MA121JC121ChouzaiHousouTaniCode             string 	MA122JC122HanbaiHousouTaniCode              string 	MA123JC123IppanMeiKana                      string 	MA124JC124SaishouYakkaKansanKeisuu          string 	MA125JA000                                  string 	MA126JA001JanCode                           string 	MA127JA002                                  string 	MA128JA003                                  string 	MA129JA004                                  string 	MA130JA005                                  string 	MA131JA006HousouSuuryouSuuchi               string 	MA132JA007HousouSuuryouTaniCode             string 	MA133JA008HousouSouryouSuuchi               string 	MA134JA009                                  string 	MA135JA010                                  string 	MA136JA011                                  string 	MA137JA012                                  string 	MA138JA013                                  string 	MA139JA014                                  string 	MA140JA015                                  string 	MA141JA016                                  string 	MA142JA017                                  string 	MA143JA018                                  string 	MA144JA019                                  string 	MA145JA020                                  string 	MA146JA021                                  string 	MA147JA022                                  string 	MA148JA023                                  string 	MA149JA024                                  string 	MA150JA025                                  string 	MA151JA026                                  string 	MA152JA027                                  string 	MA153JA028                                  string 	MA154JA029                                  string }  var ( 	DB     *sql.DB 	cache  = make(map[string]MA0Record) 	cacheM sync.Mutex )  // CheckOrCreateMA0 はキャッシュ→DB→マスター照会→INSERT の順で動作します。 func CheckOrCreateMA0(jan string) (MA0Record, bool, error) { 	cacheM.Lock() 	defer cacheM.Unlock()  	log.Printf("[ma0] ▶ CheckOrCreateMA0 start: JAN=%s", jan)  	// キャッシュチェック 	if rec, ok := cache[jan]; ok { 		log.Printf("[ma0] ⇨ cache hit: %+v", rec) 		logCount() 		return rec, false, nil 	}  	// 永続テーブル検索 	var rec MA0Record 	err := DB.QueryRow(`         SELECT  MA000JC000JanCode, MA001JC001JanCodeShikibetsuKubun, MA002JC002KyuuJanCode, MA003JC003TouitsuShouhinCode, MA004JC004YakkaKijunShuusaiIyakuhinCode, MA005JC005KyuuYakkaKijunShuusaiIyakuhinCode, MA006JC006HOTBangou, MA007JC007ReseputoCode1, MA008JC008ReseputoCode2, MA009JC009YJCode, MA010JC010YakkouBunruiCode, MA011JC011YakkouBunruiMei, MA012JC012ShiyouKubunCode, MA013JC013ShiyouKubunMeishou, MA014JC014NihonHyoujunShouhinBunruiBangou, MA015JC015ZaikeiCode, MA016JC016ZaikeiKigou, MA017JC017ZaikeiMeishou, MA018JC018ShouhinMei, MA019JC019HankakuShouhinMei, MA020JC020KikakuYouryou, MA021JC021HankakuKikakuYouryou, MA022JC022ShouhinMeiKanaSortYou, MA023JC023ShouhinMeiKanpouYouKigou, MA024JC024IppanMeishou, MA025JC025YakkaShuusaiMeishou, MA026JC026ReseYouIyakuhinMei, MA027JC027KikakuTaniMeishou, MA028JC028KikakuTaniKigou, MA029JC029HanbaiMotoCode, MA030JC030HanbaiMotoMei, MA031JC031HanbaiMotoMeiKana, MA032JC032HanbaiMotoMeiRyakuMei, MA033JC033SeizouMotoYunyuuMotoCode, MA034JC034SeizouMotoYunyuuMotoMei, MA035JC035SeizouMotoYunyuuMotoMeiKana, MA036JC036SeizouMotoYunyuuMotoMeiRyakuMei, MA037JC037HousouKeitai, MA038JC038HousouTaniSuuchi, MA039JC039HousouTaniTani, MA040JC040HousouSuuryouSuuchi, MA041JC041HousouSuuryouTani, MA042JC042HousouIrisuuSuuchi, MA043JC043HousouIrisuuTani, MA044JC044HousouSouryouSuuchi, MA045JC045HousouSouryouTani, MA046JC046HousouYouryouSuuchi, MA047JC047HousouYouryouTani, MA048JC048HousouYakkaKeisuu, MA049JC049GenTaniYakka, MA050JC050GenHousouYakka, MA051JC051KyuuTaniYakka, MA052JC052KyuuHousouYakka, MA053JC053KokuchiTaniYakka, MA054JC054KokuchiHousouYakka, MA055JC055YakkaKaiteiNengappi, MA056JC056YakkaShuusaiNengappi, MA057JC057HanbaiKaishiNengappi, MA058JC058KeikaSochiNengappi, MA059JC059HatsubaiChuushiNengappi, MA060JC060SeizouChuushiNengappi, MA061JC061Doyaku, MA062JC062Gekiyaku, MA063JC063Mayaku, MA064JC064Kouseishinyaku, MA065JC065Kakuseizai, MA066JC066KakuseizaiGenryou, MA067JC067ShuukanseiIyakuhin, MA068JC068ShiteiIyakuhinKyuuKiseiKubun, MA069JC069YoushijiIyakuhinKyuuKiseiKubun, MA070JC070KetsuekiSeizai, MA071JC071NihonYakkyokuhou, MA072JC072YuukouKikan, MA073JC073ShiyouKigen, MA074JC074SeibutsuYuraiSeihin, MA075JC075Kouhatsuhin, MA076JC076YakkaKijunShuusaiKubun, MA077JC077KichouGimuKubun, MA078JC078ShouhinKubun, MA079JC079ShohousenIyakuhin, MA080JC080ChuushiRiyuuKubun, MA081JC081MishiyouKyuuRyuutsuuKanrihin, MA082JC082MentenanceKubun, MA083JC083KouhatsuhinNoAruSenpatsuhinKubun, MA084JC084AuthorizedGeneric, MA085JC085Biosimilar, MA086JC086HighRiskYaku, MA087JC087Kuuran1, MA088JC088Kuuran2, MA089JC089Shitsuon, MA090JC090Reisho, MA091JC091Reizou, MA092JC092Reitou, MA093JC093Ansho, MA094JC094Shakou, MA095JC095KimitsuYouki, MA096JC096MippuuYouki, MA097JC097Kikenbutsu, MA098JC098OndoJougen, MA099JC099OndoKagen, MA100JC100SonotaHokanjouNoChui, MA101JC101KonpouJuuryouSizeJouhou, MA102JC102KonpouTateSizeJouhou, MA103JC103KonpouYokoSizeJouhou, MA104JC104KonpouTakasaSizeJouhou, MA105JC105KonpouTaiseiSizeJouhou, MA106JC106ChuubakoJuuryouSizeJouhou, MA107JC107ChuubakoTateSizeJouhou, MA108JC108ChuubakoYokoSizeJouhou, MA109JC109ChuubakoTakasaSizeJouhou, MA110JC110ChuubakoTaiseiSizeJouhou, MA111JC111KousouJuuryouSizeJouhou, MA112JC112KousouTateSizeJouhou, MA113JC113KousouYokoSizeJouhou, MA114JC114KousouTakasaSizeJouhou, MA115JC115KousouTaiseiSizeJouhou, MA116JC116KonpouTaniSizeJouhou, MA117JC117HacchuuTaniSizeJouhou, MA118JC118KoushinKubun, MA119JC119TourokuNengappi, MA120JC120KoushinNengappi, MA121JC121ChouzaiHousouTaniCode, MA122JC122HanbaiHousouTaniCode, MA123JC123IppanMeiKana, MA124JC124SaishouYakkaKansanKeisuu, MA125JA000, MA126JA001JanCode, MA127JA002, MA128JA003, MA129JA004, MA130JA005, MA131JA006HousouSuuryouSuuchi, MA132JA007HousouSuuryouTaniCode, MA133JA008HousouSouryouSuuchi, MA134JA009, MA135JA010, MA136JA011, MA137JA012, MA138JA013, MA139JA014, MA140JA015, MA141JA016, MA142JA017, MA143JA018, MA144JA019, MA145JA020, MA146JA021, MA147JA022, MA148JA023, MA149JA024, MA150JA025, MA151JA026, MA152JA027, MA153JA028, MA154JA029           FROM ma0          WHERE MA000JC000JanCode = ?     `, jan).Scan( 		&rec.MA000JC000JanCode, 		&rec.MA001JC001JanCodeShikibetsuKubun, 		&rec.MA002JC002KyuuJanCode, 		&rec.MA003JC003TouitsuShouhinCode, 		&rec.MA004JC004YakkaKijunShuusaiIyakuhinCode, 		&rec.MA005JC005KyuuYakkaKijunShuusaiIyakuhinCode, 		&rec.MA006JC006HOTBangou, 		&rec.MA007JC007ReseputoCode1, 		&rec.MA008JC008ReseputoCode2, 		&rec.MA009JC009YJCode, 		&rec.MA010JC010YakkouBunruiCode, 		&rec.MA011JC011YakkouBunruiMei, 		&rec.MA012JC012ShiyouKubunCode, 		&rec.MA013JC013ShiyouKubunMeishou, 		&rec.MA014JC014NihonHyoujunShouhinBunruiBangou, 		&rec.MA015JC015ZaikeiCode, 		&rec.MA016JC016ZaikeiKigou, 		&rec.MA017JC017ZaikeiMeishou, 		&rec.MA018JC018ShouhinMei, 		&rec.MA019JC019HankakuShouhinMei, 		&rec.MA020JC020KikakuYouryou, 		&rec.MA021JC021HankakuKikakuYouryou, 		&rec.MA022JC022ShouhinMeiKanaSortYou, 		&rec.MA023JC023ShouhinMeiKanpouYouKigou, 		&rec.MA024JC024IppanMeishou, 		&rec.MA025JC025YakkaShuusaiMeishou, 		&rec.MA026JC026ReseYouIyakuhinMei, 		&rec.MA027JC027KikakuTaniMeishou, 		&rec.MA028JC028KikakuTaniKigou, 		&rec.MA029JC029HanbaiMotoCode, 		&rec.MA030JC030HanbaiMotoMei, 		&rec.MA031JC031HanbaiMotoMeiKana, 		&rec.MA032JC032HanbaiMotoMeiRyakuMei, 		&rec.MA033JC033SeizouMotoYunyuuMotoCode, 		&rec.MA034JC034SeizouMotoYunyuuMotoMei, 		&rec.MA035JC035SeizouMotoYunyuuMotoMeiKana, 		&rec.MA036JC036SeizouMotoYunyuuMotoMeiRyakuMei, 		&rec.MA037JC037HousouKeitai, 		&rec.MA038JC038HousouTaniSuuchi, 		&rec.MA039JC039HousouTaniTani, 		&rec.MA040JC040HousouSuuryouSuuchi, 		&rec.MA041JC041HousouSuuryouTani, 		&rec.MA042JC042HousouIrisuuSuuchi, 		&rec.MA043JC043HousouIrisuuTani, 		&rec.MA044JC044HousouSouryouSuuchi, 		&rec.MA045JC045HousouSouryouTani, 		&rec.MA046JC046HousouYouryouSuuchi, 		&rec.MA047JC047HousouYouryouTani, 		&rec.MA048JC048HousouYakkaKeisuu, 		&rec.MA049JC049GenTaniYakka, 		&rec.MA050JC050GenHousouYakka, 		&rec.MA051JC051KyuuTaniYakka, 		&rec.MA052JC052KyuuHousouYakka, 		&rec.MA053JC053KokuchiTaniYakka, 		&rec.MA054JC054KokuchiHousouYakka, 		&rec.MA055JC055YakkaKaiteiNengappi, 		&rec.MA056JC056YakkaShuusaiNengappi, 		&rec.MA057JC057HanbaiKaishiNengappi, 		&rec.MA058JC058KeikaSochiNengappi, 		&rec.MA059JC059HatsubaiChuushiNengappi, 		&rec.MA060JC060SeizouChuushiNengappi, 		&rec.MA061JC061Doyaku, 		&rec.MA062JC062Gekiyaku, 		&rec.MA063JC063Mayaku, 		&rec.MA064JC064Kouseishinyaku, 		&rec.MA065JC065Kakuseizai, 		&rec.MA066JC066KakuseizaiGenryou, 		&rec.MA067JC067ShuukanseiIyakuhin, 		&rec.MA068JC068ShiteiIyakuhinKyuuKiseiKubun, 		&rec.MA069JC069YoushijiIyakuhinKyuuKiseiKubun, 		&rec.MA070JC070KetsuekiSeizai, 		&rec.MA071JC071NihonYakkyokuhou, 		&rec.MA072JC072YuukouKikan, 		&rec.MA073JC073ShiyouKigen, 		&rec.MA074JC074SeibutsuYuraiSeihin, 		&rec.MA075JC075Kouhatsuhin, 		&rec.MA076JC076YakkaKijunShuusaiKubun, 		&rec.MA077JC077KichouGimuKubun, 		&rec.MA078JC078ShouhinKubun, 		&rec.MA079JC079ShohousenIyakuhin, 		&rec.MA080JC080ChuushiRiyuuKubun, 		&rec.MA081JC081MishiyouKyuuRyuutsuuKanrihin, 		&rec.MA082JC082MentenanceKubun, 		&rec.MA083JC083KouhatsuhinNoAruSenpatsuhinKubun, 		&rec.MA084JC084AuthorizedGeneric, 		&rec.MA085JC085Biosimilar, 		&rec.MA086JC086HighRiskYaku, 		&rec.MA087JC087Kuuran1, 		&rec.MA088JC088Kuuran2, 		&rec.MA089JC089Shitsuon, 		&rec.MA090JC090Reisho, 		&rec.MA091JC091Reizou, 		&rec.MA092JC092Reitou, 		&rec.MA093JC093Ansho, 		&rec.MA094JC094Shakou, 		&rec.MA095JC095KimitsuYouki, 		&rec.MA096JC096MippuuYouki, 		&rec.MA097JC097Kikenbutsu, 		&rec.MA098JC098OndoJougen, 		&rec.MA099JC099OndoKagen, 		&rec.MA100JC100SonotaHokanjouNoChui, 		&rec.MA101JC101KonpouJuuryouSizeJouhou, 		&rec.MA102JC102KonpouTateSizeJouhou, 		&rec.MA103JC103KonpouYokoSizeJouhou, 		&rec.MA104JC104KonpouTakasaSizeJouhou, 		&rec.MA105JC105KonpouTaiseiSizeJouhou, 		&rec.MA106JC106ChuubakoJuuryouSizeJouhou, 		&rec.MA107JC107ChuubakoTateSizeJouhou, 		&rec.MA108JC108ChuubakoYokoSizeJouhou, 		&rec.MA109JC109ChuubakoTakasaSizeJouhou, 		&rec.MA110JC110ChuubakoTaiseiSizeJouhou, 		&rec.MA111JC111KousouJuuryouSizeJouhou, 		&rec.MA112JC112KousouTateSizeJouhou, 		&rec.MA113JC113KousouYokoSizeJouhou, 		&rec.MA114JC114KousouTakasaSizeJouhou, 		&rec.MA115JC115KousouTaiseiSizeJouhou, 		&rec.MA116JC116KonpouTaniSizeJouhou, 		&rec.MA117JC117HacchuuTaniSizeJouhou, 		&rec.MA118JC118KoushinKubun, 		&rec.MA119JC119TourokuNengappi, 		&rec.MA120JC120KoushinNengappi, 		&rec.MA121JC121ChouzaiHousouTaniCode, 		&rec.MA122JC122HanbaiHousouTaniCode, 		&rec.MA123JC123IppanMeiKana, 		&rec.MA124JC124SaishouYakkaKansanKeisuu, 		&rec.MA125JA000, 		&rec.MA126JA001JanCode, 		&rec.MA127JA002, 		&rec.MA128JA003, 		&rec.MA129JA004, 		&rec.MA130JA005, 		&rec.MA131JA006HousouSuuryouSuuchi, 		&rec.MA132JA007HousouSuuryouTaniCode, 		&rec.MA133JA008HousouSouryouSuuchi, 		&rec.MA134JA009, 		&rec.MA135JA010, 		&rec.MA136JA011, 		&rec.MA137JA012, 		&rec.MA138JA013, 		&rec.MA139JA014, 		&rec.MA140JA015, 		&rec.MA141JA016, 		&rec.MA142JA017, 		&rec.MA143JA018, 		&rec.MA144JA019, 		&rec.MA145JA020, 		&rec.MA146JA021, 		&rec.MA147JA022, 		&rec.MA148JA023, 		&rec.MA149JA024, 		&rec.MA150JA025, 		&rec.MA151JA026, 		&rec.MA152JA027, 		&rec.MA153JA028, 		&rec.MA154JA029, 	) 	if err == nil { 		log.Printf("[ma0] ⇨ found in DB: %+v", rec) 		cache[jan] = rec 		logCount() 		return rec, false, nil 	} 	if err != sql.ErrNoRows { 		return MA0Record{}, false, fmt.Errorf("DB query error: %v", err) 	} 	log.Printf("[ma0] ⇨ not found in ma0, querying masters")  	// JCSHMSマスター照会 	csRecs, err := jcshms.QueryJCSHMSRecordsByJan(DB, jan) 	if err != nil { 		return MA0Record{}, false, fmt.Errorf("jcshms query error: %v", err) 	} 	// JANCODEマスター照会 	jaRecs, err := jancode.QueryJANCODERecordsByJan(DB, jan) 	if err != nil { 		return MA0Record{}, false, fmt.Errorf("jancode query error: %v", err) 	} 	log.Printf("[ma0] ⇨ master counts: JCSHMS=%d rows, JANCODE=%d rows", len(csRecs), len(jaRecs))  	// 値の組み立て 	var yj, t string 	if len(csRecs) > 0 { 		yj = csRecs[0].JC.JC009YJCode 	} 	if len(jaRecs) > 1 { 		t = jaRecs[1].JA006HousouSuuryouSuuchi 	} else if len(jaRecs) > 0 { 		t = jaRecs[0].JA006HousouSuuryouSuuchi 	} 	log.Printf("[ma0] ⇨ about to insert: jan=%q, yj=%q, t=%q", jan, yj, t)  	// INSERT 	res, err := DB.Exec(`         INSERT INTO ma0 (             MA000JC000JanCode,             MA009JC009YJCode,             MA131JA006HousouSuuryouSuuchi         ) VALUES (?, ?, ?)     `, jan, yj, t) 	if err != nil { 		return MA0Record{}, false, fmt.Errorf("insert error: %v", err) 	} 	cnt, _ := res.RowsAffected() 	log.Printf("[ma0] ⇨ inserted rows: %d", cnt)  	newRec := MA0Record{ 		MA000JC000JanCode:             jan, 		MA009JC009YJCode:              yj, 		MA131JA006HousouSuuryouSuuchi: t, 	}  	cache[jan] = newRec 	logCount() 	return newRec, true, nil }  // ProcessMA0Record は DAT レコードごとに呼ばれます。 func ProcessMA0Record(data []string) error { 	if len(data) < 3 { 		return fmt.Errorf("insufficient DAT data: %v", data) 	} 	rec, created, err := CheckOrCreateMA0(data[2]) 	if err != nil { 		return err 	} 	if created { 		fmt.Printf("New MA0 created: %+v\n", rec) 	} 	return nil }  // ViewMA0Handler はキャッシュの内容を JSON で返却します。 func ViewMA0Handler(w http.ResponseWriter, r *http.Request) { 	cacheM.Lock() 	defer cacheM.Unlock()  	list := make([]MA0Record, 0, len(cache)) 	for _, rec := range cache { 		list = append(list, rec) 	} 	w.Header().Set("Content-Type", "application/json; charset=utf-8") 	json.NewEncoder(w).Encode(list) }  // CountMA0 は ma0 テーブルの件数を返します。 func CountMA0() (int, error) { 	var cnt int 	err := DB.QueryRow("SELECT COUNT(*) FROM ma0").Scan(&cnt) 	return cnt, err }  func logCount() { 	cnt, err := CountMA0() 	if err != nil { 		log.Printf("[ma0] count error: %v", err) 		return 	} 	log.Printf("[ma0] current ma0 count: %d", cnt) }

----- C:\Dev\YAMATO\static\css\styles.css -----
body {   font-family: Arial, sans-serif;   margin: 1em; } header button {   margin-right: .5em;   padding: .4em 1em; } #indicator {   margin: 1em 0;   font-weight: bold; } #outputTable {   width: 100%;   border-collapse: collapse; } #outputTable th, #outputTable td {   border: 1px solid #ccc;   padding: .3em .6em;   font-size: .85em; } #outputTable th {   background: #f0f0f0;   text-align: left; }

----- C:\Dev\YAMATO\static\js\dat.js -----
document.addEventListener('DOMContentLoaded', () => {   // 各DOM要素の取得   const btn       = document.getElementById('datBtn');   const input     = document.getElementById('datInput');   const indicator = document.getElementById('indicator');   const table     = document.getElementById('outputTable');   const thead     = table.querySelector('thead');   const tbody     = table.querySelector('tbody');    // DATファイルアップロードボタンをクリックで隠しファイル入力をトリガー   btn.addEventListener('click', () => {     input.click();   });    // ファイル選択後の処理   input.addEventListener('change', async () => {     if (!input.files.length) return;      // アップロード開始状態を indicator に表示     indicator.textContent = 'DATアップロード中…';      // テーブルヘッダー、ボディの初期化     thead.innerHTML = `       <tr>         <th>卸コード</th>         <th>日付</th>         <th>納品／返品</th>         <th>伝票番号</th>         <th>行番号</th>         <th>JANコード</th>         <th>商品名</th>         <th>数量</th>         <th>単価</th>         <th>小計</th>         <th>包装薬価</th>         <th>有効期限</th>         <th>ロット番号</th>       </tr>`;     tbody.innerHTML = '';      // 選択された全ファイルについてループ処理     for (let file of input.files) {       const formData = new FormData();       formData.append('datFileInput[]', file);        try {         // /uploadDat エンドポイントに対して POST リクエスト送信         const res = await fetch('/uploadDat', { method: 'POST', body: formData });         if (!res.ok) {           throw new Error(`HTTPステータス: ${res.status}`);         }         // サーバーから返却される JSON を取得（"DATRecords" などのキーを持つ）         const result = await res.json();          // 指定ファイルの処理結果を indicator に表示         indicator.textContent = `${file.name}: DAT読み込み: ${result.DATReadCount} 件 | MA0作成: ${result.MA0CreatedCount} 件 | 重複: ${result.DuplicateCount} 件`;          // DATRecords に含まれる各レコードをテーブルへ追加         if (result.DATRecords && result.DATRecords.length > 0) {           result.DATRecords.forEach(record => {             const tr = document.createElement('tr');             tr.innerHTML = `               <td>${record.DatOroshiCode}</td>               <td>${record.DatDate}</td>               <td>${record.DatDeliveryFlag}</td>               <td>${record.DatReceiptNumber}</td>               <td>${record.DatLineNumber}</td>               <td>${record.DatJanCode}</td>               <td>${record.DatProductName}</td>               <td>${record.DatQuantity}</td>               <td>${record.DatUnitPrice}</td>               <td>${record.DatSubtotal}</td>               <td>${record.DatPackagingDrugPrice}</td>               <td>${record.DatExpiryDate}</td>               <td>${record.DatLotNumber}</td>             `;             tbody.appendChild(tr);           });         }       } catch (err) {         // エラー発生時の処理         indicator.textContent = "アップロード中にエラーが発生しました: " + err.message;         console.error(err);       }     }     // 全ファイル処理完了後のメッセージ     indicator.textContent += " 完了";     // 入力値のリセット     input.value = '';   }); });

----- C:\Dev\YAMATO\static\js\ma0.js -----
// File: static/js/ma0.js document.addEventListener('DOMContentLoaded', () => {   const ma0Btn       = document.getElementById('ma0Btn');   const ma0Container = document.getElementById('ma0Container');   const indicator    = document.getElementById('indicator');    ma0Btn.addEventListener('click', async () => {     indicator.textContent = 'MA0表示中…';     ma0Container.innerHTML = ''; // 前回の結果をクリア      try {       const res = await fetch('/viewMA0');       if (!res.ok) {         throw new Error(`HTTPステータス: ${res.status}`);       }        const data = await res.json();       // サーバーは JSON 配列を返す想定       const list = Array.isArray(data) ? data : [];        if (list.length > 0) {         ma0Container.innerHTML =           `<h2>MA0レコード（${list.length} 件）</h2>` +           `<ul>` +           list.map(rec =>             `<li>` +               `<strong>JANコード:</strong> ${rec.mA000JC000JanCode}<br>` +               `<strong>YJコード:</strong> ${rec.mA009JC009YJCode || '―'}<br>` +               `<strong>包装単位コード:</strong> ${rec.mA131JA006HousouSuuryouSuuchi || '―'}` +             `</li>`           ).join('') +           `</ul>`;       } else {         ma0Container.innerHTML = `<h2>MA0は空です。</h2>`;       }     } catch (err) {       ma0Container.innerHTML = `<h2>MA0の表示中にエラーが発生しました。</h2>`;       console.error('MA0 fetch error:', err);     } finally {       indicator.textContent = '';     }   }); });

----- C:\Dev\YAMATO\static\js\usage.js -----
document.addEventListener('DOMContentLoaded', () => {   const usageBtn   = document.getElementById('usageBtn');   const usageInput = document.getElementById('usageInput');   const indicator  = document.getElementById('indicator');   const table      = document.getElementById('outputTable');   const thead      = table.querySelector('thead');   const tbody      = table.querySelector('tbody');    usageBtn.addEventListener('click', () => usageInput.click());    usageInput.addEventListener('change', async () => {     if (!usageInput.files || usageInput.files.length === 0) return;      indicator.textContent = 'USAGEアップロード中…';     // 新しいヘッダー（項目名）に合わせて設定     thead.innerHTML = `       <tr>         <th>日付</th>         <th>YJコード</th>         <th>JANコード</th>         <th>商品名</th>         <th>数量</th>         <th>単位コード</th>         <th>単位名称</th>       </tr>`;     tbody.innerHTML = '';      for (let file of usageInput.files) {       const formData = new FormData();       formData.append('usageFileInput[]', file);        try {         const res = await fetch('/uploadUsage', { method: 'POST', body: formData });         if (!res.ok) throw new Error(`HTTPエラー: ${res.status}`);         const result = await res.json();         indicator.textContent = `${file.name}: USAGE読み込み: ${result.TotalRecords} 件`;         if (result.USAGERecords && result.USAGERecords.length > 0) {           result.USAGERecords.forEach(record => {             const tr = document.createElement('tr');             tr.innerHTML = `               <td>${record.usageDate}</td>               <td>${record.usageYjCode}</td>               <td>${record.usageJanCode}</td>               <td>${record.usageProductName}</td>               <td>${record.usageAmount}</td>               <td>${record.usageUnit}</td>               <td>${record.usageUnitName}</td>             `;             tbody.appendChild(tr);           });         }       } catch (error) {         indicator.textContent = "アップロード中にエラー: " + error.message;         console.error("USAGEアップロードエラー:", error);       }     }     indicator.textContent += " 完了";     usageInput.value = '';   }); });

----- C:\Dev\YAMATO\static\index.html -----
<!DOCTYPE html> <html lang="ja"> <head>   <meta charset="UTF-8">   <title>YAMATO Upload</title>   <!-- 必要に応じてスタイルシートを調整 -->   <link rel="stylesheet" href="css/styles.css"> </head> <body>   <header>     <!-- DATファイルアップロードボタン -->     <button id="datBtn">DATファイルアップロード</button>     <!-- USAGEファイルアップロードボタン -->     <button id="usageBtn">USAGEファイルアップロード</button>     <!-- MA0確認ボタン -->     <button id="ma0Btn">MA0確認peropero</button>   </header>      <!-- アップロード処理の進捗や結果を表示するエリア -->   <section id="indicator"></section>      <!-- MA0の中身を表示するエリア -->   <section id="ma0Container"></section>      <!-- 解析結果（必要に応じてテーブル表示） -->   <table id="outputTable">     <thead></thead>     <tbody></tbody>   </table>      <!-- 隠しのファイル入力（DAT/USAGE用） -->   <input type="file" id="datInput" accept=".dat" multiple hidden>   <input type="file" id="usageInput" accept=".csv" multiple hidden>      <!-- JavaScriptファイルの読み込み -->   <script src="js/dat.js"></script>   <script src="js/usage.js"></script>   <script src="js/ma0.js"></script> </body> </html>

----- C:\Dev\YAMATO\tani\tani.go -----
package tani  import ( 	"encoding/csv" 	"io" 	"log"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // ParseTANI は、TANI CSV ファイルを Shift‑JIS から UTF‑8 に変換しながら読み込み、 // 各行のフィールド0（単位コード）をキー、フィールド1（単位名称）を値とするマップを返します。 func ParseTANI(r io.Reader) (map[string]string, error) { 	// Shift‑JIS → UTF‑8 変換を適用 	decoder := transform.NewReader(r, japanese.ShiftJIS.NewDecoder()) 	reader := csv.NewReader(decoder) 	records, err := reader.ReadAll() 	if err != nil { 		return nil, err 	} 	taniMap := make(map[string]string) 	for _, row := range records { 		if len(row) < 2 { 			log.Printf("TANI行のフィールド不足: %v", row) 			continue 		} 		code := row[0] 		unit := row[1] 		taniMap[code] = unit 	} 	return taniMap, nil }

----- C:\Dev\YAMATO\usage\usage.go -----
package usage  import ( 	"bufio" 	"io" 	"log" 	"os" 	"strings"  	"YAMATO/ma0" 	"YAMATO/tani"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform" )  // UsageRecord は USAGE CSV の各レコード情報を保持します type UsageRecord struct { 	UsageDate        string `json:"usageDate"` 	UsageYjCode      string `json:"usageYjCode"` 	UsageJanCode     string `json:"usageJanCode"` 	UsageProductName string `json:"usageProductName"` 	UsageAmount      string `json:"usageAmount"` 	UsageUnit        string `json:"usageUnit"` 	UsageUnitName    string `json:"usageUnitName"` }  var taniMap map[string]string  // loadTaniMap は所定のパスの TANI.CSV を読み込み、taniMap にセットします func loadTaniMap() { 	if taniMap != nil { 		return 	} 	f, err := os.Open("C:\\Dev\\YAMATO\\SOU\\TANI.CSV") 	if err != nil { 		log.Printf("TANIファイルオープンエラー: %v", err) 		taniMap = make(map[string]string) 		return 	} 	defer f.Close() 	tMap, err := tani.ParseTANI(f) 	if err != nil { 		log.Printf("TANIパース失敗: %v", err) 		taniMap = make(map[string]string) 		return 	} 	taniMap = tMap }  // ParseUsageFile は、USAGE CSV を Shift‑JIS から UTF‑8 に変換しながらパースして UsageRecord のスライスを返します。 // 各レコードの全データを抽出し、同時に MA0 への連携（全データをそのまま送る）を行います。 func ParseUsageFile(r io.Reader) ([]UsageRecord, error) { 	loadTaniMap() 	var records []UsageRecord 	scanner := bufio.NewScanner(transform.NewReader(r, japanese.ShiftJIS.NewDecoder())) 	headerSkipped := false 	for scanner.Scan() { 		line := scanner.Text()  		// ヘッダー行（"UsageDate" を含む場合）をスキップ 		if !headerSkipped { 			if strings.Contains(line, "UsageDate") { 				headerSkipped = true 				continue 			} 			headerSkipped = true 		}  		// カンマ区切りで各フィールドを取得 		fields := strings.Split(line, ",") 		if len(fields) < 6 { 			continue 		} 		// 各フィールドの前後の引用符や空白を除去 		for i, f := range fields { 			fields[i] = strings.Trim(f, "\" ") 		}  		ur := UsageRecord{ 			UsageDate:        fields[0], 			UsageYjCode:      fields[1], 			UsageJanCode:     fields[2], 			UsageProductName: fields[3], 			UsageAmount:      fields[4], 			UsageUnit:        fields[5], 		} 		// TANI マスターより単位コードに対応する単位名称を取得 		if name, ok := taniMap[ur.UsageUnit]; ok { 			ur.UsageUnitName = name 		} else { 			ur.UsageUnitName = ur.UsageUnit 		}  		records = append(records, ur)  		// ここで UsageRecord の全データをスライスにまとめ、ma0 へそのまま送ります 		recordData := []string{ 			ur.UsageDate,        // 0: 使用日 			ur.UsageYjCode,      // 1: YJコード 			ur.UsageJanCode,     // 2: JANコード ← MA0 のキーとなります 			ur.UsageProductName, // 3: 商品名 			ur.UsageAmount,      // 4: 数量／金額 			ur.UsageUnit,        // 5: 単位コード 			ur.UsageUnitName,    // 6: 単位名称 		} 		if err := ma0.ProcessMA0Record(recordData); err != nil { 			log.Printf("[USAGE] MA0照合エラー (JAN=%q): %v", ur.UsageJanCode, err) 		} 	} 	if err := scanner.Err(); err != nil { 		return nil, err 	} 	return records, nil }

----- C:\Dev\YAMATO\main.go -----
// File: main.go package main  import ( 	"database/sql" 	"encoding/csv" 	"encoding/json" 	"io" 	"log" 	"net/http" 	"os" 	"os/exec" 	"runtime" 	"strings"  	"golang.org/x/text/encoding/japanese" 	"golang.org/x/text/transform"  	"YAMATO/dat" 	"YAMATO/ma0" 	"YAMATO/usage"  	_ "github.com/mattn/go-sqlite3" )  // loadCSV は Shift-JIS → UTF-8 変換しつつ CSV を INSERT します。 // skipHeader=true のときだけ最初の１行をスキップします。 func loadCSV(db *sql.DB, filePath, table string, cols int, skipHeader bool) error { 	f, err := os.Open(filePath) 	if err != nil { 		return err 	} 	defer f.Close()  	rd := csv.NewReader(transform.NewReader(f, japanese.ShiftJIS.NewDecoder())) 	rd.LazyQuotes = true 	rd.FieldsPerRecord = -1  	if skipHeader { 		if _, err := rd.Read(); err != nil { 			return err 		} 	}  	tx, err := db.Begin() 	if err != nil { 		return err 	} 	defer func() { 		if err != nil { 			tx.Rollback() 		} 	}()  	ph := make([]string, cols) 	for i := range ph { 		ph[i] = "?" 	} 	stmt, err := tx.Prepare( 		"INSERT OR REPLACE INTO " + table + 			" VALUES(" + strings.Join(ph, ",") + ")", 	) 	if err != nil { 		return err 	} 	defer stmt.Close()  	for { 		rec, err := rd.Read() 		if err == io.EOF { 			break 		} 		if err != nil { 			return err 		} 		args := make([]interface{}, len(rec)) 		for i, v := range rec { 			args[i] = v 		} 		if _, err := stmt.Exec(args...); err != nil { 			return err 		} 	}  	return tx.Commit() }  func uploadDatHandler(w http.ResponseWriter, r *http.Request) { 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	} 	if err := r.ParseMultipartForm(10 << 20); err != nil { 		http.Error(w, "Error parsing form: "+err.Error(), http.StatusBadRequest) 		return 	} 	files := r.MultipartForm.File["datFileInput[]"] 	if len(files) == 0 { 		http.Error(w, "No DAT file uploaded", http.StatusBadRequest) 		return 	}  	var all []dat.DATRecord 	total, created, dup := 0, 0, 0 	for _, fh := range files { 		file, err := fh.Open() 		if err != nil { 			log.Println("open DAT error:", err) 			continue 		} 		defer file.Close()  		recs, tc, mc, dc, err := dat.ParseDATFile(file) 		if err != nil { 			log.Println("parse DAT error:", err) 			continue 		} 		total += tc 		created += mc 		dup += dc 		all = append(all, recs...) 	}  	resp := map[string]interface{}{ 		"DATReadCount":    total, 		"MA0CreatedCount": created, 		"DuplicateCount":  dup, 		"DATRecords":      all, 	} 	w.Header().Set("Content-Type", "application/json") 	json.NewEncoder(w).Encode(resp) }  func uploadUsageHandler(w http.ResponseWriter, r *http.Request) { 	if r.Method != http.MethodPost { 		http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed) 		return 	} 	if err := r.ParseMultipartForm(10 << 20); err != nil { 		http.Error(w, "Error parsing form: "+err.Error(), http.StatusBadRequest) 		return 	} 	files := r.MultipartForm.File["usageFileInput[]"] 	if len(files) == 0 { 		http.Error(w, "No USAGE file uploaded", http.StatusBadRequest) 		return 	}  	var all []usage.UsageRecord 	for _, fh := range files { 		file, err := fh.Open() 		if err != nil { 			log.Println("open USAGE error:", err) 			continue 		} 		defer file.Close()  		recs, err := usage.ParseUsageFile(file) 		if err != nil { 			log.Println("parse USAGE error:", err) 			continue 		} 		all = append(all, recs...) 	}  	w.Header().Set("Content-Type", "application/json") 	json.NewEncoder(w).Encode(map[string]interface{}{ 		"USAGERecords": all, 		"TotalRecords": len(all), 	}) }  func viewMA0Handler(w http.ResponseWriter, r *http.Request) { 	ma0.ViewMA0Handler(w, r) }  func autoLaunchBrowser(url string) { 	var cmd string 	var args []string 	switch runtime.GOOS { 	case "windows": 		cmd = "cmd" 		args = []string{"/c", "start", url} 	case "darwin": 		cmd = "open" 		args = []string{url} 	default: 		cmd = "xdg-open" 		args = []string{url} 	} 	if err := exec.Command(cmd, args...).Start(); err != nil { 		log.Printf("browser start failed: %v", err) 	} }  func main() { 	db, err := sql.Open("sqlite3", "yamato.db") 	if err != nil { 		log.Fatalf("DB open error: %v", err) 	} 	defer db.Close()  	ma0.DB = db  	schema, err := os.ReadFile("schema.sql") 	if err != nil { 		log.Fatalf("read schema.sql error: %v", err) 	} 	if _, err := db.Exec(string(schema)); err != nil { 		log.Fatalf("exec schema.sql error: %v", err) 	}  	jcshmsPath := `C:\Dev\YAMATO\SOU\JCSHMS.CSV` 	jancodePath := `C:\Dev\YAMATO\SOU\JANCODE.CSV` 	if err := loadCSV(db, jcshmsPath, "jcshms", 125, false); err != nil { 		log.Fatalf("load JCSHMS failed: %v", err) 	} 	if err := loadCSV(db, jancodePath, "jancode", 30, true); err != nil { 		log.Fatalf("load JANCODE failed: %v", err) 	}  	fs := http.FileServer(http.Dir("./static")) 	http.Handle("/", fs) 	http.HandleFunc("/uploadDat", uploadDatHandler) 	http.HandleFunc("/uploadUsage", uploadUsageHandler) 	http.HandleFunc("/viewMA0", viewMA0Handler)  	go autoLaunchBrowser("http://localhost:8080") 	log.Println("Server listening on :8080") 	log.Fatal(http.ListenAndServe(":8080", nil)) }

